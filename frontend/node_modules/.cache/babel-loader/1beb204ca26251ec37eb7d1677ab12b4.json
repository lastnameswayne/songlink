{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { generateStripe, getColor, mode } from \"@chakra-ui/theme-tools\";\nvar parts = [\"track\", \"filledTrack\", \"panel\"];\n\nfunction filledStyle(props) {\n  var {\n    colorScheme: c,\n    theme: t,\n    isIndeterminate,\n    hasStripe\n  } = props;\n  var stripeStyle = mode(generateStripe(), generateStripe(\"1rem\", \"rgba(0,0,0,0.1)\"))(props);\n  var bgColor = mode(c + \".500\", c + \".200\")(props);\n  var gradient = \"linear-gradient(\\n    to right,\\n    transparent 0%,\\n    \" + getColor(t, bgColor) + \" 50%,\\n    transparent 100%\\n  )\";\n  var addStripe = !isIndeterminate && hasStripe;\n  return _extends({}, addStripe && stripeStyle, isIndeterminate ? {\n    bgImage: gradient\n  } : {\n    bgColor\n  });\n}\n\nvar baseStyleLabel = {\n  lineHeight: \"1\",\n  fontSize: \"0.25em\",\n  fontWeight: \"bold\",\n  color: \"white\"\n};\n\nfunction baseStyleTrack(props) {\n  return {\n    bg: mode(\"gray.100\", \"whiteAlpha.300\")(props)\n  };\n}\n\nfunction baseStyleFilledTrack(props) {\n  return _extends({\n    transition: \"all 0.3s\"\n  }, filledStyle(props));\n}\n\nvar baseStyle = props => ({\n  label: baseStyleLabel,\n  filledTrack: baseStyleFilledTrack(props),\n  track: baseStyleTrack(props)\n});\n\nvar sizes = {\n  xs: {\n    track: {\n      h: \"0.25rem\"\n    }\n  },\n  sm: {\n    track: {\n      h: \"0.5rem\"\n    }\n  },\n  md: {\n    track: {\n      h: \"0.75rem\"\n    }\n  },\n  lg: {\n    track: {\n      h: \"1rem\"\n    }\n  }\n};\nvar defaultProps = {\n  size: \"md\",\n  colorScheme: \"blue\"\n};\nexport default {\n  parts,\n  sizes,\n  baseStyle,\n  defaultProps\n};","map":{"version":3,"sources":["../../../src/components/progress.ts"],"names":["parts","colorScheme","theme","hasStripe","stripeStyle","mode","generateStripe","bgColor","c","gradient","getColor","addStripe","isIndeterminate","bgImage","baseStyleLabel","lineHeight","fontSize","fontWeight","color","bg","transition","filledStyle","baseStyle","props","label","filledTrack","baseStyleFilledTrack","track","baseStyleTrack","sizes","xs","h","sm","md","lg","defaultProps","size"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAA,cAAA,EAAA,QAAA,EAAA,IAAA,QAAA,wBAAA;AAIA,IAAMA,KAAK,GAAG,CAAA,OAAA,EAAA,aAAA,EAAd,OAAc,CAAd;;AAEA,SAAA,WAAA,CAAA,KAAA,EAAkC;AAChC,MAAM;AAAEC,IAAAA,WAAW,EAAb,CAAA;AAAkBC,IAAAA,KAAK,EAAvB,CAAA;AAAA,IAAA,eAAA;AAA6CC,IAAAA;AAA7C,MAAN,KAAA;AAEA,MAAMC,WAAW,GAAGC,IAAI,CACtBC,cADsB,EAAA,EAEtBA,cAAc,CAAA,MAAA,EAFID,iBAEJ,CAFQ,CAAJA,CAApB,KAAoBA,CAApB;AAKA,MAAME,OAAO,GAAGF,IAAI,CAAIG,CAAJ,GAAA,MAAA,EAAgBA,CAAhB,GAAJH,MAAI,CAAJA,CAAhB,KAAgBA,CAAhB;AAEA,MAAMI,QAAQ,GAAA,+DAGVC,QAAQ,CAAA,CAAA,EAHE,OAGF,CAHE,GAAd,kCAAA;AAOA,MAAMC,SAAS,GAAG,CAAA,eAAA,IAAlB,SAAA;AAEA,SAAA,QAAA,CAAA,EAAA,EACMA,SAAS,IADf,WAAA,EAEMC,eAAe,GAAG;AAAEC,IAAAA,OAAO,EAAEJ;AAAX,GAAH,GAA2B;AAAEF,IAAAA;AAAF,GAFhD,CAAA;AAID;;AAED,IAAMO,cAAc,GAAG;AACrBC,EAAAA,UAAU,EADW,GAAA;AAErBC,EAAAA,QAAQ,EAFa,QAAA;AAGrBC,EAAAA,UAAU,EAHW,MAAA;AAIrBC,EAAAA,KAAK,EAAE;AAJc,CAAvB;;AAOA,SAAA,cAAA,CAAA,KAAA,EAAqC;AACnC,SAAO;AACLC,IAAAA,EAAE,EAAEd,IAAI,CAAA,UAAA,EAAJA,gBAAI,CAAJA,CAAAA,KAAAA;AADC,GAAP;AAGD;;AAED,SAAA,oBAAA,CAAA,KAAA,EAA2C;AACzC,SAAA,QAAA,CAAA;AACEe,IAAAA,UAAU,EAAE;AADd,GAAA,EAEKC,WAAW,CAFhB,KAEgB,CAFhB,CAAA;AAID;;AAED,IAAMC,SAAS,GAAIC,KAAD,KAAkB;AAClCC,EAAAA,KAAK,EAD6B,cAAA;AAElCC,EAAAA,WAAW,EAAEC,oBAAoB,CAFC,KAED,CAFC;AAGlCC,EAAAA,KAAK,EAAEC,cAAc,CAAA,KAAA;AAHa,CAAlB,CAAlB;;AAMA,IAAMC,KAAK,GAAG;AACZC,EAAAA,EAAE,EAAE;AACFH,IAAAA,KAAK,EAAE;AAAEI,MAAAA,CAAC,EAAE;AAAL;AADL,GADQ;AAIZC,EAAAA,EAAE,EAAE;AACFL,IAAAA,KAAK,EAAE;AAAEI,MAAAA,CAAC,EAAE;AAAL;AADL,GAJQ;AAOZE,EAAAA,EAAE,EAAE;AACFN,IAAAA,KAAK,EAAE;AAAEI,MAAAA,CAAC,EAAE;AAAL;AADL,GAPQ;AAUZG,EAAAA,EAAE,EAAE;AACFP,IAAAA,KAAK,EAAE;AAAEI,MAAAA,CAAC,EAAE;AAAL;AADL;AAVQ,CAAd;AAeA,IAAMI,YAAY,GAAG;AACnBC,EAAAA,IAAI,EADe,IAAA;AAEnBnC,EAAAA,WAAW,EAAE;AAFM,CAArB;AAKA,eAAe;AAAA,EAAA,KAAA;AAAA,EAAA,KAAA;AAAA,EAAA,SAAA;AAIbkC,EAAAA;AAJa,CAAf","sourcesContent":["import { generateStripe, getColor, mode } from \"@chakra-ui/theme-tools\"\n\ntype Dict = Record<string, any>\n\nconst parts = [\"track\", \"filledTrack\", \"panel\"]\n\nfunction filledStyle(props: Dict) {\n  const { colorScheme: c, theme: t, isIndeterminate, hasStripe } = props\n\n  const stripeStyle = mode(\n    generateStripe(),\n    generateStripe(\"1rem\", \"rgba(0,0,0,0.1)\"),\n  )(props)\n\n  const bgColor = mode(`${c}.500`, `${c}.200`)(props)\n\n  const gradient = `linear-gradient(\n    to right,\n    transparent 0%,\n    ${getColor(t, bgColor)} 50%,\n    transparent 100%\n  )`\n\n  const addStripe = !isIndeterminate && hasStripe\n\n  return {\n    ...(addStripe && stripeStyle),\n    ...(isIndeterminate ? { bgImage: gradient } : { bgColor }),\n  }\n}\n\nconst baseStyleLabel = {\n  lineHeight: \"1\",\n  fontSize: \"0.25em\",\n  fontWeight: \"bold\",\n  color: \"white\",\n}\n\nfunction baseStyleTrack(props: Dict) {\n  return {\n    bg: mode(`gray.100`, `whiteAlpha.300`)(props),\n  }\n}\n\nfunction baseStyleFilledTrack(props: Dict) {\n  return {\n    transition: \"all 0.3s\",\n    ...filledStyle(props),\n  }\n}\n\nconst baseStyle = (props: Dict) => ({\n  label: baseStyleLabel,\n  filledTrack: baseStyleFilledTrack(props),\n  track: baseStyleTrack(props),\n})\n\nconst sizes = {\n  xs: {\n    track: { h: \"0.25rem\" },\n  },\n  sm: {\n    track: { h: \"0.5rem\" },\n  },\n  md: {\n    track: { h: \"0.75rem\" },\n  },\n  lg: {\n    track: { h: \"1rem\" },\n  },\n}\n\nconst defaultProps = {\n  size: \"md\",\n  colorScheme: \"blue\",\n}\n\nexport default {\n  parts,\n  sizes,\n  baseStyle,\n  defaultProps,\n}\n"]},"metadata":{},"sourceType":"module"}