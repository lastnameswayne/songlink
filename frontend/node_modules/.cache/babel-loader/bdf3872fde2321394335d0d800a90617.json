{"ast":null,"code":"import { isNumber, isCustomBreakpoint } from \"@chakra-ui/utils\";\n\nfunction createMediaQueries(breakpoints) {\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   *\n   * reverse to begin with the largest\n   */\n  var keys = Object.keys(breakpoints).filter(isCustomBreakpoint).reverse();\n  /**\n   * create a min-max media query string\n   */\n\n  return keys.map((breakpoint, index) => {\n    var minWidth = breakpoints[breakpoint];\n    var next = keys[index - 1];\n    var maxWidth = next ? breakpoints[next] : undefined;\n    var query = createMediaQueryString(minWidth, maxWidth);\n    return {\n      breakpoint,\n      maxWidth,\n      minWidth,\n      query\n    };\n  });\n}\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\n\n\nfunction createMediaQueryString(minWidth, maxWidth) {\n  var hasMinWidth = parseInt(minWidth, 10) >= 0;\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\";\n  }\n\n  var query = \"(min-width: \" + toMediaString(minWidth) + \")\";\n\n  if (!maxWidth) {\n    return query;\n  }\n\n  if (query) {\n    query += \" and \";\n  }\n\n  query += \"(max-width: \" + toMediaString(subtract(maxWidth)) + \")\";\n  return query;\n}\n\nvar measurementRegex = /([0-9]+\\.?[0-9]*)/;\n\nvar calculateMeasurement = (value, modifier) => {\n  if (typeof value === \"number\") {\n    return \"\" + (value + modifier);\n  }\n\n  return value.replace(measurementRegex, match => \"\" + (parseFloat(match) + modifier));\n};\n/**\n * 0.01 and 0.1 are too small of a difference for `px` breakpoint values\n *\n * @see https://github.com/chakra-ui/chakra-ui/issues/2188#issuecomment-712774785\n */\n\n\nfunction subtract(value) {\n  return calculateMeasurement(value, value.endsWith(\"px\") ? -1 : -0.01);\n}\n/**\n * Convert media query value to string\n */\n\n\nfunction toMediaString(value) {\n  return isNumber(value) ? value + \"px\" : value;\n}\n\nexport default createMediaQueries;","map":{"version":3,"sources":["../../src/create-media-query.ts"],"names":["keys","Object","minWidth","breakpoints","next","index","maxWidth","query","createMediaQueryString","hasMinWidth","parseInt","toMediaString","subtract","measurementRegex","calculateMeasurement","value","match","parseFloat","isNumber"],"mappings":"AAAA,SAAA,QAAA,EAAA,kBAAA,QAAA,kBAAA;;AAEA,SAAA,kBAAA,CAAA,WAAA,EAAiE;AAC/D;AACF;AACA;AACA;AACA;AACE,MAAMA,IAAI,GAAGC,MAAM,CAANA,IAAAA,CAAAA,WAAAA,EAAAA,MAAAA,CAAAA,kBAAAA,EAAb,OAAaA,EAAb;AAEA;AACF;AACA;;AACE,SAAO,IAAI,CAAJ,GAAA,CAAS,CAAA,UAAA,EAAA,KAAA,KAAuB;AACrC,QAAMC,QAAQ,GAAGC,WAAW,CAA5B,UAA4B,CAA5B;AAEA,QAAMC,IAAI,GAAGJ,IAAI,CAACK,KAAK,GAAvB,CAAiB,CAAjB;AACA,QAAMC,QAAQ,GAAGF,IAAI,GAAGD,WAAW,CAAd,IAAc,CAAd,GAArB,SAAA;AAEA,QAAMI,KAAK,GAAGC,sBAAsB,CAAA,QAAA,EAApC,QAAoC,CAApC;AAEA,WAAO;AAAA,MAAA,UAAA;AAAA,MAAA,QAAA;AAAA,MAAA,QAAA;AAILD,MAAAA;AAJK,KAAP;AARF,GAAO,CAAP;AAeD;AAED;AACA;AACA;AACA;;;AACA,SAAA,sBAAA,CAAA,QAAA,EAAA,QAAA,EAAqE;AACnE,MAAME,WAAW,GAAGC,QAAQ,CAAA,QAAA,EAARA,EAAQ,CAARA,IAApB,CAAA;;AAEA,MAAI,CAAA,WAAA,IAAgB,CAApB,QAAA,EAA+B;AAC7B,WAAA,EAAA;AACD;;AAED,MAAIH,KAAK,GAAA,iBAAkBI,aAAa,CAA/B,QAA+B,CAA/B,GAAT,GAAA;;AAEA,MAAI,CAAJ,QAAA,EAAe;AACb,WAAA,KAAA;AACD;;AAED,MAAA,KAAA,EAAW;AACTJ,IAAAA,KAAK,IAALA,OAAAA;AACD;;AAEDA,EAAAA,KAAK,IAAA,iBAAmBI,aAAa,CAACC,QAAQ,CAAzC,QAAyC,CAAT,CAAhC,GAALL,GAAAA;AAEA,SAAA,KAAA;AACD;;AASD,IAAMM,gBAAgB,GAAtB,mBAAA;;AAEA,IAAMC,oBAAoB,GAAG,CAAA,KAAA,EAAA,QAAA,KAGhB;AACX,MAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B;AAC7B,WAAA,MAAUC,KAAK,GAAf,QAAA,CAAA;AACD;;AAED,SAAOA,KAAK,CAALA,OAAAA,CAAAA,gBAAAA,EAEJC,KAAD,IAAA,MAAcC,UAAU,CAAVA,KAAU,CAAVA,GAFhB,QAEE,CAFKF,CAAP;AARF,CAAA;AAcA;AACA;AACA;AACA;AACA;;;AACA,SAAA,QAAA,CAAA,KAAA,EAAiC;AAC/B,SAAOD,oBAAoB,CAAA,KAAA,EAAQC,KAAK,CAALA,QAAAA,CAAAA,IAAAA,IAAuB,CAAvBA,CAAAA,GAA4B,CAA/D,IAA2B,CAA3B;AACD;AAED;AACA;AACA;;;AACA,SAAA,aAAA,CAAA,KAAA,EAA8C;AAC5C,SAAOG,QAAQ,CAARA,KAAQ,CAARA,GAAqBH,KAArBG,GAAAA,IAAAA,GAAP,KAAA;AACD;;AAED,eAAA,kBAAA","sourcesContent":["import { isNumber, isCustomBreakpoint, StringOrNumber } from \"@chakra-ui/utils\"\n\nfunction createMediaQueries(breakpoints: string[]): MediaQuery[] {\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   *\n   * reverse to begin with the largest\n   */\n  const keys = Object.keys(breakpoints).filter(isCustomBreakpoint).reverse()\n\n  /**\n   * create a min-max media query string\n   */\n  return keys.map((breakpoint, index) => {\n    const minWidth = breakpoints[breakpoint]\n\n    const next = keys[index - 1]\n    const maxWidth = next ? breakpoints[next] : undefined\n\n    const query = createMediaQueryString(minWidth, maxWidth)\n\n    return {\n      breakpoint,\n      maxWidth,\n      minWidth,\n      query,\n    }\n  })\n}\n\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\nfunction createMediaQueryString(minWidth: string, maxWidth?: string) {\n  const hasMinWidth = parseInt(minWidth, 10) >= 0\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\"\n  }\n\n  let query = `(min-width: ${toMediaString(minWidth)})`\n\n  if (!maxWidth) {\n    return query\n  }\n\n  if (query) {\n    query += \" and \"\n  }\n\n  query += `(max-width: ${toMediaString(subtract(maxWidth))})`\n\n  return query\n}\n\ninterface MediaQuery {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n  query: string\n}\n\nconst measurementRegex = /(\\d+\\.?\\d*)/u\n\nconst calculateMeasurement = (\n  value: StringOrNumber,\n  modifier: number,\n): string => {\n  if (typeof value === \"number\") {\n    return `${value + modifier}`\n  }\n\n  return value.replace(\n    measurementRegex,\n    (match) => `${parseFloat(match) + modifier}`,\n  )\n}\n\n/**\n * 0.01 and 0.1 are too small of a difference for `px` breakpoint values\n *\n * @see https://github.com/chakra-ui/chakra-ui/issues/2188#issuecomment-712774785\n */\nfunction subtract(value: string) {\n  return calculateMeasurement(value, value.endsWith(\"px\") ? -1 : -0.01)\n}\n\n/**\n * Convert media query value to string\n */\nfunction toMediaString(value: StringOrNumber) {\n  return isNumber(value) ? `${value}px` : value\n}\n\nexport default createMediaQueries\n"]},"metadata":{},"sourceType":"module"}