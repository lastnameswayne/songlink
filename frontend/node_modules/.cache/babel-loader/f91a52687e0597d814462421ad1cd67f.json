{"ast":null,"code":"import { useEffect, useRef } from \"react\";\nimport { useLatestRef } from \"./use-latest-ref\";\n/**\n * Example, used in components like Dialogs and Popovers so they can close\n * when a user clicks outside them.\n */\n\nexport function useOutsideClick(props) {\n  var {\n    ref,\n    handler\n  } = props;\n  var savedHandler = useLatestRef(handler);\n  var stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false\n  });\n  var state = stateRef.current;\n  useEffect(() => {\n    var onPointerDown = e => {\n      if (isValidEvent(e, ref)) {\n        state.isPointerDown = true;\n      }\n    };\n\n    var onMouseUp = event => {\n      if (state.ignoreEmulatedMouseEvents) {\n        state.ignoreEmulatedMouseEvents = false;\n        return;\n      }\n\n      if (state.isPointerDown && handler && isValidEvent(event, ref)) {\n        state.isPointerDown = false;\n        savedHandler.current == null ? void 0 : savedHandler.current(event);\n      }\n    };\n\n    var onTouchEnd = event => {\n      state.ignoreEmulatedMouseEvents = true;\n\n      if (handler && state.isPointerDown && isValidEvent(event, ref)) {\n        state.isPointerDown = false;\n        savedHandler.current == null ? void 0 : savedHandler.current(event);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", onPointerDown, true);\n    document.addEventListener(\"mouseup\", onMouseUp, true);\n    document.addEventListener(\"touchstart\", onPointerDown, true);\n    document.addEventListener(\"touchend\", onTouchEnd, true);\n    return () => {\n      document.removeEventListener(\"mousedown\", onPointerDown, true);\n      document.removeEventListener(\"mouseup\", onMouseUp, true);\n      document.removeEventListener(\"touchstart\", onPointerDown, true);\n      document.removeEventListener(\"touchend\", onTouchEnd, true);\n    };\n  }, [handler, ref, savedHandler, state]);\n}\n\nfunction isValidEvent(event, ref) {\n  var target = event.target;\n  if (event.button > 0) return false; // if the event target is no longer in the document\n\n  if (target) {\n    var ownerDocument = target.ownerDocument;\n\n    if (!ownerDocument || !ownerDocument.body.contains(target)) {\n      return false;\n    }\n  }\n\n  return ref.current && !ref.current.contains(target);\n}","map":{"version":3,"sources":["../../src/use-outside-click.ts"],"names":["handler","savedHandler","useLatestRef","stateRef","useRef","isPointerDown","ignoreEmulatedMouseEvents","state","useEffect","onPointerDown","e","isValidEvent","onMouseUp","event","onTouchEnd","document","target","ownerDocument","ref"],"mappings":"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","sourcesContent":["import { RefObject, useEffect, useRef } from \"react\"\nimport { useLatestRef } from \"./use-latest-ref\"\n\ninterface UseOutsideClickOptions {\n  ref: RefObject<HTMLElement>\n  handler: (e: Event) => void\n}\n\n/**\n * Example, used in components like Dialogs and Popovers so they can close\n * when a user clicks outside them.\n */\nexport function useOutsideClick(props: UseOutsideClickOptions) {\n  const { ref, handler } = props\n  const savedHandler = useLatestRef(handler)\n\n  const stateRef = useRef({\n    isPointerDown: false,\n    ignoreEmulatedMouseEvents: false,\n  })\n\n  const state = stateRef.current\n\n  useEffect(() => {\n    const onPointerDown: any = (e: PointerEvent) => {\n      if (isValidEvent(e, ref)) {\n        state.isPointerDown = true\n      }\n    }\n\n    const onMouseUp: any = (event: MouseEvent) => {\n      if (state.ignoreEmulatedMouseEvents) {\n        state.ignoreEmulatedMouseEvents = false\n        return\n      }\n\n      if (state.isPointerDown && handler && isValidEvent(event, ref)) {\n        state.isPointerDown = false\n        savedHandler.current?.(event)\n      }\n    }\n\n    const onTouchEnd = (event: TouchEvent) => {\n      state.ignoreEmulatedMouseEvents = true\n      if (handler && state.isPointerDown && isValidEvent(event, ref)) {\n        state.isPointerDown = false\n        savedHandler.current?.(event)\n      }\n    }\n\n    document.addEventListener(\"mousedown\", onPointerDown, true)\n    document.addEventListener(\"mouseup\", onMouseUp, true)\n    document.addEventListener(\"touchstart\", onPointerDown, true)\n    document.addEventListener(\"touchend\", onTouchEnd, true)\n\n    return () => {\n      document.removeEventListener(\"mousedown\", onPointerDown, true)\n      document.removeEventListener(\"mouseup\", onMouseUp, true)\n      document.removeEventListener(\"touchstart\", onPointerDown, true)\n      document.removeEventListener(\"touchend\", onTouchEnd, true)\n    }\n  }, [handler, ref, savedHandler, state])\n}\n\nfunction isValidEvent(event: any, ref: React.RefObject<HTMLElement>) {\n  const target = event.target as HTMLElement\n  if (event.button > 0) return false\n  // if the event target is no longer in the document\n  if (target) {\n    const ownerDocument = target.ownerDocument\n    if (!ownerDocument || !ownerDocument.body.contains(target)) {\n      return false\n    }\n  }\n\n  return ref.current && !ref.current.contains(target)\n}\n"]},"metadata":{},"sourceType":"module"}