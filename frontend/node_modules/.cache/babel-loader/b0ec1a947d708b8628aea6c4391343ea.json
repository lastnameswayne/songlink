{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx, getValidChildren, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport var InputGroup = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Input\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    children,\n    className\n  } = _omitThemingProps,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\", \"className\"]);\n\n  var _className = cx(\"chakra-input__group\", className);\n\n  var groupStyles = {};\n  var validChildren = getValidChildren(children);\n  var input = styles.field;\n  validChildren.forEach(child => {\n    if (!styles) return;\n\n    if (input && child.type.id === \"InputLeftElement\") {\n      var _input$height;\n\n      groupStyles.paddingLeft = (_input$height = input.height) != null ? _input$height : input.h;\n    }\n\n    if (input && child.type.id === \"InputRightElement\") {\n      var _input$height2;\n\n      groupStyles.paddingRight = (_input$height2 = input.height) != null ? _input$height2 : input.h;\n    }\n\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderRightRadius = 0;\n    }\n\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderLeftRadius = 0;\n    }\n  });\n  var clones = validChildren.map(child => {\n    var _child$props, _child$props2, _ref, _ref2;\n\n    var {\n      pl,\n      paddingLeft,\n      pr,\n      paddingRight\n    } = child.props;\n    /**\n     * Make it possible to override the size and variant from `Input`\n     */\n\n    var theming = {\n      size: ((_child$props = child.props) == null ? void 0 : _child$props.size) || props.size,\n      variant: ((_child$props2 = child.props) == null ? void 0 : _child$props2.variant) || props.variant\n    };\n    return child.type.id !== \"Input\" ? /*#__PURE__*/React.cloneElement(child, theming) : /*#__PURE__*/React.cloneElement(child, _extends({}, theming, {\n      paddingLeft: (_ref = pl != null ? pl : paddingLeft) != null ? _ref : groupStyles == null ? void 0 : groupStyles.paddingLeft,\n      paddingRight: (_ref2 = pr != null ? pr : paddingRight) != null ? _ref2 : groupStyles == null ? void 0 : groupStyles.paddingRight,\n      borderLeftRadius: groupStyles == null ? void 0 : groupStyles.borderLeftRadius,\n      borderRightRadius: groupStyles == null ? void 0 : groupStyles.borderRightRadius\n    }));\n  });\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: _className,\n    ref: ref,\n    __css: {\n      width: \"100%\",\n      display: \"flex\",\n      position: \"relative\"\n    }\n  }, rest), /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, clones));\n});\n\nif (__DEV__) {\n  InputGroup.displayName = \"InputGroup\";\n}","map":{"version":3,"sources":["../../src/input-group.tsx"],"names":["InputGroup","forwardRef","styles","useMultiStyleConfig","className","rest","omitThemingProps","_className","cx","groupStyles","validChildren","getValidChildren","input","child","clones","paddingRight","theming","size","props","variant","React","paddingLeft","pl","pr","borderLeftRadius","borderRightRadius","width","display","position"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, getValidChildren, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface InputGroupProps extends HTMLChakraProps<\"div\">, ThemingProps {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Input\", props)\n  const { children, className, ...rest } = omitThemingProps(props)\n\n  const _className = cx(\"chakra-input__group\", className)\n  const groupStyles: InputGroupProps = {}\n\n  const validChildren = getValidChildren(children)\n\n  const input: any = styles.field\n\n  validChildren.forEach((child: any) => {\n    if (!styles) return\n\n    if (input && child.type.id === \"InputLeftElement\") {\n      groupStyles.paddingLeft = input.height ?? input.h\n    }\n\n    if (input && child.type.id === \"InputRightElement\") {\n      groupStyles.paddingRight = input.height ?? input.h\n    }\n\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderRightRadius = 0\n    }\n\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderLeftRadius = 0\n    }\n  })\n\n  const clones = validChildren.map((child: any) => {\n    const { pl, paddingLeft, pr, paddingRight } = child.props\n\n    /**\n     * Make it possible to override the size and variant from `Input`\n     */\n    const theming = {\n      size: child.props?.size || props.size,\n      variant: child.props?.variant || props.variant,\n    }\n\n    return child.type.id !== \"Input\"\n      ? React.cloneElement(child, theming)\n      : React.cloneElement(child, {\n          ...theming,\n          paddingLeft: pl ?? paddingLeft ?? groupStyles?.paddingLeft,\n          paddingRight: pr ?? paddingRight ?? groupStyles?.paddingRight,\n          borderLeftRadius: groupStyles?.borderLeftRadius,\n          borderRightRadius: groupStyles?.borderRightRadius,\n        })\n  })\n\n  return (\n    <chakra.div\n      className={_className}\n      ref={ref}\n      __css={{\n        width: \"100%\",\n        display: \"flex\",\n        position: \"relative\",\n      }}\n      {...rest}\n    >\n      <StylesProvider value={styles}>{clones}</StylesProvider>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  InputGroup.displayName = \"InputGroup\"\n}\n"]},"metadata":{},"sourceType":"module"}