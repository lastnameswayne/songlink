{"ast":null,"code":"import * as React from \"react\";\n/**\n * Checks if the key pressed is a printable character\n * and can be used for shortcut navigation\n */\n\nfunction isPrintableCharacter(event) {\n  var {\n    key\n  } = event;\n  return key.length === 1 || key.length > 1 && /[^a-zA-Z0-9]/.test(key);\n}\n/**\n * React hook that provides an enhanced keydown handler,\n * that's used for key navigation within menus, select dropdowns.\n */\n\n\nexport function useShortcut(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    timeout = 300,\n    preventDefault = () => true\n  } = props;\n  var [keys, setKeys] = React.useState([]);\n  var timeoutRef = React.useRef();\n\n  var flush = () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  };\n\n  var clearKeysAfterDelay = () => {\n    flush();\n    timeoutRef.current = setTimeout(() => {\n      setKeys([]);\n      timeoutRef.current = null;\n    }, timeout);\n  };\n\n  React.useEffect(() => flush, []);\n\n  function onKeyDown(fn) {\n    return event => {\n      if (event.key === \"Backspace\") {\n        var keysCopy = [...keys];\n        keysCopy.pop();\n        setKeys(keysCopy);\n        return;\n      }\n\n      if (isPrintableCharacter(event)) {\n        var _keysCopy = keys.concat(event.key);\n\n        if (preventDefault(event)) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        setKeys(_keysCopy);\n        fn(_keysCopy.join(\"\"));\n        clearKeysAfterDelay();\n      }\n    };\n  }\n\n  return onKeyDown;\n}","map":{"version":3,"sources":["../../src/use-shortcut.ts"],"names":["key","props","timeout","preventDefault","React","timeoutRef","flush","clearTimeout","clearKeysAfterDelay","setTimeout","setKeys","event","keysCopy","isPrintableCharacter","keys","fn"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA;AACA;AACA;AACA;;AACA,SAAA,oBAAA,CAAA,KAAA,EAA0D;AACxD,MAAM;AAAEA,IAAAA;AAAF,MAAN,KAAA;AACA,SAAOA,GAAG,CAAHA,MAAAA,KAAAA,CAAAA,IAAqBA,GAAG,CAAHA,MAAAA,GAAAA,CAAAA,IAAkB,eAAA,IAAA,CAA9C,GAA8C,CAA9C;AACD;AAOD;AACA;AACA;AACA;;;AACA,OAAO,SAAA,WAAA,CAAA,KAAA,EAAmD;AAAA,MAA9BC,KAA8B,KAAA,KAAA,CAAA,EAAA;AAA9BA,IAAAA,KAA8B,GAAJ,EAA1BA;AAA8B;;AACxD,MAAM;AAAEC,IAAAA,OAAO,GAAT,GAAA;AAAiBC,IAAAA,cAAc,GAAG,MAAM;AAAxC,MAAN,KAAA;AAEA,MAAM,CAAA,IAAA,EAAA,OAAA,IAAkBC,KAAK,CAALA,QAAAA,CAAxB,EAAwBA,CAAxB;AACA,MAAMC,UAAU,GAAGD,KAAK,CAAxB,MAAmBA,EAAnB;;AAEA,MAAME,KAAK,GAAG,MAAM;AAClB,QAAID,UAAU,CAAd,OAAA,EAAwB;AACtBE,MAAAA,YAAY,CAACF,UAAU,CAAvBE,OAAY,CAAZA;AACAF,MAAAA,UAAU,CAAVA,OAAAA,GAAAA,IAAAA;AACD;AAJH,GAAA;;AAOA,MAAMG,mBAAmB,GAAG,MAAM;AAChCF,IAAAA,KAAK;AACLD,IAAAA,UAAU,CAAVA,OAAAA,GAAqBI,UAAU,CAAC,MAAM;AACpCC,MAAAA,OAAO,CAAPA,EAAO,CAAPA;AACAL,MAAAA,UAAU,CAAVA,OAAAA,GAAAA,IAAAA;AAF6B,KAAA,EAA/BA,OAA+B,CAA/BA;AAFF,GAAA;;AAQAD,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAhBA,KAAAA,EAAAA,EAAAA;;AAIA,WAAA,SAAA,CAAA,EAAA,EAAiC;AAC/B,WAAQO,KAAD,IAAgC;AACrC,UAAIA,KAAK,CAALA,GAAAA,KAAJ,WAAA,EAA+B;AAC7B,YAAMC,QAAQ,GAAG,CAAC,GAAlB,IAAiB,CAAjB;AACAA,QAAAA,QAAQ,CAARA,GAAAA;AACAF,QAAAA,OAAO,CAAPA,QAAO,CAAPA;AACA;AACD;;AAED,UAAIG,oBAAoB,CAAxB,KAAwB,CAAxB,EAAiC;AAC/B,YAAMD,SAAQ,GAAGE,IAAI,CAAJA,MAAAA,CAAYH,KAAK,CAAlC,GAAiBG,CAAjB;;AAEA,YAAIX,cAAc,CAAlB,KAAkB,CAAlB,EAA2B;AACzBQ,UAAAA,KAAK,CAALA,cAAAA;AACAA,UAAAA,KAAK,CAALA,eAAAA;AACD;;AAEDD,QAAAA,OAAO,CAAPA,SAAO,CAAPA;AACAK,QAAAA,EAAE,CAACH,SAAQ,CAARA,IAAAA,CAAHG,EAAGH,CAAD,CAAFG;AAEAP,QAAAA,mBAAmB;AACpB;AApBH,KAAA;AAsBD;;AAED,SAAA,SAAA;AACD","sourcesContent":["import * as React from \"react\"\n\n/**\n * Checks if the key pressed is a printable character\n * and can be used for shortcut navigation\n */\nfunction isPrintableCharacter(event: React.KeyboardEvent) {\n  const { key } = event\n  return key.length === 1 || (key.length > 1 && /[^a-zA-Z0-9]/.test(key))\n}\n\nexport interface UseShortcutProps {\n  timeout?: number\n  preventDefault?: (event: React.KeyboardEvent) => boolean\n}\n\n/**\n * React hook that provides an enhanced keydown handler,\n * that's used for key navigation within menus, select dropdowns.\n */\nexport function useShortcut(props: UseShortcutProps = {}) {\n  const { timeout = 300, preventDefault = () => true } = props\n\n  const [keys, setKeys] = React.useState<string[]>([])\n  const timeoutRef = React.useRef<any>()\n\n  const flush = () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current)\n      timeoutRef.current = null\n    }\n  }\n\n  const clearKeysAfterDelay = () => {\n    flush()\n    timeoutRef.current = setTimeout(() => {\n      setKeys([])\n      timeoutRef.current = null\n    }, timeout)\n  }\n\n  React.useEffect(() => flush, [])\n\n  type Callback = (keysSoFar: string) => void\n\n  function onKeyDown(fn: Callback) {\n    return (event: React.KeyboardEvent) => {\n      if (event.key === \"Backspace\") {\n        const keysCopy = [...keys]\n        keysCopy.pop()\n        setKeys(keysCopy)\n        return\n      }\n\n      if (isPrintableCharacter(event)) {\n        const keysCopy = keys.concat(event.key)\n\n        if (preventDefault(event)) {\n          event.preventDefault()\n          event.stopPropagation()\n        }\n\n        setKeys(keysCopy)\n        fn(keysCopy.join(\"\"))\n\n        clearKeysAfterDelay()\n      }\n    }\n  }\n\n  return onKeyDown\n}\n"]},"metadata":{},"sourceType":"module"}