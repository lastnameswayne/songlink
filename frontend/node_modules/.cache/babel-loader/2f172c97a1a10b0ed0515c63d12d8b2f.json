{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useControllableProp, useId } from \"@chakra-ui/hooks\";\nimport { isInputEvent, mergeRefs } from \"@chakra-ui/utils\";\nimport { useCallback, useRef, useState } from \"react\";\n/**\n * React hook to manage a group of radio inputs\n */\n\nexport function useRadioGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isNative\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"onChange\", \"value\", \"defaultValue\", \"name\", \"isNative\"]);\n\n  var [valueState, setValue] = useState(defaultValue || \"\");\n  var [isControlled, value] = useControllableProp(valueProp, valueState);\n  var ref = useRef(null);\n  var focus = useCallback(() => {\n    var rootNode = ref.current;\n    if (!rootNode) return;\n    var query = \"input:not(:disabled):checked\";\n    var firstEnabledAndCheckedInput = rootNode.querySelector(query);\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus();\n      return;\n    }\n\n    query = \"input:not(:disabled)\";\n    var firstEnabledInput = rootNode.querySelector(query);\n    firstEnabledInput == null ? void 0 : firstEnabledInput.focus();\n  }, []);\n  /**\n   * All radio options must use the same name\n   */\n\n  var fallbackName = useId(undefined, \"radio\");\n  var name = nameProp || fallbackName;\n  var onChange = useCallback(eventOrValue => {\n    var nextValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(nextValue);\n  }, [onChangeProp, isControlled]);\n\n  var getRootProps = function getRootProps(props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\"\n    });\n  };\n\n  var getRadioProps = function getRadioProps(props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return _extends({}, props, {\n      ref,\n      name,\n      [checkedKey]: props.value === value,\n      onChange\n    });\n  };\n\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    htmlProps\n  };\n}","map":{"version":3,"sources":["../../src/use-radio-group.ts"],"names":["props","onChange","value","name","isNative","htmlProps","useState","defaultValue","useControllableProp","ref","useRef","focus","useCallback","rootNode","query","firstEnabledAndCheckedInput","firstEnabledInput","fallbackName","useId","nameProp","eventOrValue","nextValue","isInputEvent","setValue","onChangeProp","getRootProps","forwardedRef","mergeRefs","role","getRadioProps","checkedKey"],"mappings":"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","sourcesContent":["import { useControllableProp, useId } from \"@chakra-ui/hooks\"\nimport {\n  isInputEvent,\n  mergeRefs,\n  PropGetter,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport {\n  ChangeEvent,\n  useCallback,\n  useRef,\n  useState,\n  InputHTMLAttributes,\n} from \"react\"\n\ntype EventOrValue = ChangeEvent<HTMLInputElement> | StringOrNumber\n\nexport interface UseRadioGroupProps {\n  /**\n   * The value of the radio to be `checked`\n   * (in controlled mode)\n   */\n  value?: StringOrNumber\n  /**\n   * The value of the radio to be `checked`\n   * initially (in uncontrolled mode)\n   */\n  defaultValue?: StringOrNumber\n  /**\n   * Function called once a radio is checked\n   * @param nextValue the value of the checked radio\n   */\n  onChange?(nextValue: StringOrNumber): void\n  /**\n   * The `name` attribute forwarded to each `radio` element\n   */\n  name?: string\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   */\n  isNative?: boolean\n}\n\n/**\n * React hook to manage a group of radio inputs\n */\nexport function useRadioGroup(props: UseRadioGroupProps = {}) {\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isNative,\n    ...htmlProps\n  } = props\n\n  const [valueState, setValue] = useState<StringOrNumber>(defaultValue || \"\")\n\n  const [isControlled, value] = useControllableProp(valueProp, valueState)\n\n  const ref = useRef<any>(null)\n\n  const focus = useCallback(() => {\n    const rootNode = ref.current\n    if (!rootNode) return\n\n    let query = `input:not(:disabled):checked`\n\n    const firstEnabledAndCheckedInput = rootNode.querySelector(\n      query,\n    ) as HTMLElement\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus()\n      return\n    }\n\n    query = `input:not(:disabled)`\n\n    const firstEnabledInput = rootNode.querySelector(query) as HTMLElement\n    firstEnabledInput?.focus()\n  }, [])\n\n  /**\n   * All radio options must use the same name\n   */\n  const fallbackName = useId(undefined, `radio`)\n  const name = nameProp || fallbackName\n\n  const onChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      const nextValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp?.(nextValue)\n    },\n    [onChangeProp, isControlled],\n  )\n\n  const getRootProps: PropGetter = (props = {}, forwardedRef = null) => ({\n    ...props,\n    ref: mergeRefs(forwardedRef, ref),\n    role: \"radiogroup\",\n  })\n\n  type RadioPropGetter = PropGetter<\n    HTMLInputElement,\n    { onChange?: (e: EventOrValue) => void; value?: StringOrNumber } & Omit<\n      InputHTMLAttributes<HTMLInputElement>,\n      \"onChange\" | \"size\" | \"value\"\n    >\n  >\n\n  const getRadioProps: RadioPropGetter = (props = {}, ref = null) => {\n    const checkedKey = isNative ? \"checked\" : \"isChecked\"\n    return {\n      ...props,\n      ref,\n      name,\n      [checkedKey]: props.value === value,\n      onChange,\n    }\n  }\n\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    htmlProps,\n  }\n}\n\nexport type UseRadioGroupReturn = ReturnType<typeof useRadioGroup>\n"]},"metadata":{},"sourceType":"module"}