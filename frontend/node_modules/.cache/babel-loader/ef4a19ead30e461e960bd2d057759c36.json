{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { ariaAttr, callAllHandlers, omit } from \"@chakra-ui/utils\";\nimport { useFormControlContext } from \"./form-control\";\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n */\n\nexport function useFormControl(props) {\n  var _props$id;\n\n  var field = useFormControlContext();\n  var describedBy = []; // Error message must be described first in all scenarios.\n\n  if (field != null && field.hasFeedbackText) describedBy.push(field.feedbackId);\n  if (field != null && field.hasHelpText) describedBy.push(field.helpTextId);\n  var ariaDescribedBy = describedBy.join(\" \");\n  var cleanProps = omit(props, [\"isInvalid\", \"isDisabled\", \"isReadOnly\", \"isRequired\"]);\n  return _extends({}, cleanProps, {\n    id: (_props$id = props.id) != null ? _props$id : field == null ? void 0 : field.id,\n    disabled: props.disabled || props.isDisabled || (field == null ? void 0 : field.isDisabled),\n    readOnly: props.readOnly || props.isReadOnly || (field == null ? void 0 : field.isReadOnly),\n    required: props.required || props.isRequired || (field == null ? void 0 : field.isRequired),\n    \"aria-invalid\": ariaAttr(props.isInvalid || (field == null ? void 0 : field.isInvalid)),\n    \"aria-required\": ariaAttr(props.isRequired || (field == null ? void 0 : field.isRequired)),\n    \"aria-readonly\": ariaAttr(props.isReadOnly || (field == null ? void 0 : field.isReadOnly)),\n    \"aria-describedby\": ariaDescribedBy || undefined,\n    onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, props.onFocus),\n    onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, props.onBlur)\n  });\n}","map":{"version":3,"sources":["../../src/use-form-control.ts"],"names":["field","useFormControlContext","describedBy","ariaDescribedBy","cleanProps","omit","id","props","disabled","readOnly","required","ariaAttr","onFocus","callAllHandlers","onBlur"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAA,QAAA,EAAA,eAAA,EAAA,IAAA,QAAA,kBAAA;AAEA,SAAA,qBAAA,QAAA,gBAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,cAAA,CAAA,KAAA,EAEL;AAAA,MAAA,SAAA;;AACA,MAAMA,KAAK,GAAGC,qBAAd,EAAA;AACA,MAAMC,WAAqB,GAF3B,EAEA,CAFA,CAIA;;AACA,MAAIF,KAAJ,IAAA,IAAIA,IAAAA,KAAK,CAAT,eAAA,EAA4BE,WAAW,CAAXA,IAAAA,CAAiBF,KAAK,CAAtBE,UAAAA;AAC5B,MAAIF,KAAJ,IAAA,IAAIA,IAAAA,KAAK,CAAT,WAAA,EAAwBE,WAAW,CAAXA,IAAAA,CAAiBF,KAAK,CAAtBE,UAAAA;AACxB,MAAMC,eAAe,GAAGD,WAAW,CAAXA,IAAAA,CAAxB,GAAwBA,CAAxB;AAEA,MAAME,UAAU,GAAGC,IAAI,CAAA,KAAA,EAAQ,CAAA,WAAA,EAAA,YAAA,EAAA,YAAA,EAA/B,YAA+B,CAAR,CAAvB;AAOA,SAAA,QAAA,CAAA,EAAA,EAAA,UAAA,EAAA;AAEEC,IAAAA,EAAE,EAAA,CAAA,SAAA,GAAEC,KAAK,CAAP,EAAA,KAAA,IAAA,GAAA,SAAA,GAAcP,KAAd,IAAA,IAAcA,GAAd,KAAA,CAAcA,GAAAA,KAAK,CAFvB,EAAA;AAGEQ,IAAAA,QAAQ,EAAED,KAAK,CAALA,QAAAA,IAAkBA,KAAK,CAAvBA,UAAAA,KAAsCP,KAAtCO,IAAAA,IAAsCP,GAAtCO,KAAAA,CAAsCP,GAAAA,KAAK,CAHvD,UAGYO,CAHZ;AAIEE,IAAAA,QAAQ,EAAEF,KAAK,CAALA,QAAAA,IAAkBA,KAAK,CAAvBA,UAAAA,KAAsCP,KAAtCO,IAAAA,IAAsCP,GAAtCO,KAAAA,CAAsCP,GAAAA,KAAK,CAJvD,UAIYO,CAJZ;AAKEG,IAAAA,QAAQ,EAAEH,KAAK,CAALA,QAAAA,IAAkBA,KAAK,CAAvBA,UAAAA,KAAsCP,KAAtCO,IAAAA,IAAsCP,GAAtCO,KAAAA,CAAsCP,GAAAA,KAAK,CALvD,UAKYO,CALZ;AAME,oBAAgBI,QAAQ,CAACJ,KAAK,CAALA,SAAAA,KAAmBP,KAAnBO,IAAAA,IAAmBP,GAAnBO,KAAAA,CAAmBP,GAAAA,KAAK,CANnD,SAM2BO,CAAD,CAN1B;AAOE,qBAAiBI,QAAQ,CAACJ,KAAK,CAALA,UAAAA,KAAoBP,KAApBO,IAAAA,IAAoBP,GAApBO,KAAAA,CAAoBP,GAAAA,KAAK,CAPrD,UAO4BO,CAAD,CAP3B;AAQE,qBAAiBI,QAAQ,CAACJ,KAAK,CAALA,UAAAA,KAAoBP,KAApBO,IAAAA,IAAoBP,GAApBO,KAAAA,CAAoBP,GAAAA,KAAK,CARrD,UAQ4BO,CAAD,CAR3B;AASE,wBAAoBJ,eAAe,IATrC,SAAA;AAUES,IAAAA,OAAO,EAAEC,eAAe,CAACb,KAAD,IAAA,IAACA,GAAD,KAAA,CAACA,GAAAA,KAAK,CAAN,OAAA,EAAiBO,KAAK,CAVhD,OAU0B,CAV1B;AAWEO,IAAAA,MAAM,EAAED,eAAe,CAACb,KAAD,IAAA,IAACA,GAAD,KAAA,CAACA,GAAAA,KAAK,CAAN,MAAA,EAAgBO,KAAK,CAArB,MAAA;AAXzB,GAAA,CAAA;AAaD","sourcesContent":["import { ariaAttr, callAllHandlers, omit } from \"@chakra-ui/utils\"\nimport { FocusEventHandler } from \"react\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: FocusEventHandler<T>\n  onBlur?: FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n  const describedBy: string[] = []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText) describedBy.push(field.feedbackId)\n  if (field?.hasHelpText) describedBy.push(field.helpTextId)\n  const ariaDescribedBy = describedBy.join(\" \")\n\n  const cleanProps = omit(props, [\n    \"isInvalid\",\n    \"isDisabled\",\n    \"isReadOnly\",\n    \"isRequired\",\n  ])\n\n  return {\n    ...cleanProps,\n    id: props.id ?? field?.id,\n    disabled: props.disabled || props.isDisabled || field?.isDisabled,\n    readOnly: props.readOnly || props.isReadOnly || field?.isReadOnly,\n    required: props.required || props.isRequired || field?.isRequired,\n    \"aria-invalid\": ariaAttr(props.isInvalid || field?.isInvalid),\n    \"aria-required\": ariaAttr(props.isRequired || field?.isRequired),\n    \"aria-readonly\": ariaAttr(props.isReadOnly || field?.isReadOnly),\n    \"aria-describedby\": ariaDescribedBy || undefined,\n    onFocus: callAllHandlers(field?.onFocus, props.onFocus),\n    onBlur: callAllHandlers(field?.onBlur, props.onBlur),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}