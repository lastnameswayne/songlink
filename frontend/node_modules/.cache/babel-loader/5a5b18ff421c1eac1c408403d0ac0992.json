{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { filterUndefined, memoizedGet as get, mergeWith, runIfFn, omit } from \"@chakra-ui/utils\";\nimport { useMemo, useRef } from \"react\";\nimport isEqual from \"react-fast-compare\";\nimport { useChakra } from \"./hooks\";\nexport function useStyleConfig(themeKey, props, opts) {\n  var _styleConfig$defaultP, _opts2;\n\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  var {\n    styleConfig: styleConfigProp\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"styleConfig\"]);\n\n  var {\n    theme,\n    colorMode\n  } = useChakra();\n  var themeStyleConfig = get(theme, \"components.\" + themeKey);\n  var styleConfig = styleConfigProp || themeStyleConfig;\n  var mergedProps = mergeWith({\n    theme,\n    colorMode\n  }, (_styleConfig$defaultP = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _styleConfig$defaultP : {}, filterUndefined(omit(rest, [\"children\"])));\n  /**\n   * Store the computed styles in a `ref` to avoid unneeded re-computation\n   */\n\n  var stylesRef = useRef({});\n  return useMemo(() => {\n    if (styleConfig) {\n      var _styleConfig$baseStyl, _styleConfig$variants, _styleConfig$variants2, _styleConfig$sizes$me, _styleConfig$sizes, _opts;\n\n      var baseStyles = runIfFn((_styleConfig$baseStyl = styleConfig.baseStyle) != null ? _styleConfig$baseStyl : {}, mergedProps);\n      var variants = runIfFn((_styleConfig$variants = (_styleConfig$variants2 = styleConfig.variants) == null ? void 0 : _styleConfig$variants2[mergedProps.variant]) != null ? _styleConfig$variants : {}, mergedProps);\n      var sizes = runIfFn((_styleConfig$sizes$me = (_styleConfig$sizes = styleConfig.sizes) == null ? void 0 : _styleConfig$sizes[mergedProps.size]) != null ? _styleConfig$sizes$me : {}, mergedProps);\n      var styles = mergeWith({}, baseStyles, sizes, variants);\n\n      if ((_opts = opts) != null && _opts.isMultiPart && styleConfig.parts) {\n        styleConfig.parts.forEach(part => {\n          var _styles$part;\n\n          styles[part] = (_styles$part = styles[part]) != null ? _styles$part : {};\n        });\n      }\n\n      var isStyleEqual = isEqual(stylesRef.current, styles);\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles;\n      }\n    }\n\n    return stylesRef.current;\n  }, [styleConfig, mergedProps, (_opts2 = opts) == null ? void 0 : _opts2.isMultiPart]);\n}\nexport function useMultiStyleConfig(themeKey, props) {\n  return useStyleConfig(themeKey, props, {\n    isMultiPart: true\n  });\n}","map":{"version":3,"sources":["../../src/use-style-config.ts"],"names":["memoizedGet","props","opts","styleConfig","styleConfigProp","rest","colorMode","useChakra","themeStyleConfig","get","mergedProps","mergeWith","filterUndefined","omit","stylesRef","useRef","useMemo","baseStyles","runIfFn","variants","sizes","styles","part","isStyleEqual","isEqual","useStyleConfig","isMultiPart"],"mappings":"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","sourcesContent":["import { SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  filterUndefined,\n  memoizedGet as get,\n  mergeWith,\n  runIfFn,\n  omit,\n} from \"@chakra-ui/utils\"\nimport { useMemo, useRef } from \"react\"\nimport isEqual from \"react-fast-compare\"\nimport { useChakra } from \"./hooks\"\nimport { ThemingProps } from \"./system.types\"\n\nexport function useStyleConfig(\n  themeKey: string,\n  props: ThemingProps,\n  opts: { isMultiPart: true },\n): Record<string, SystemStyleObject>\n\nexport function useStyleConfig(\n  themeKey: string,\n  props?: ThemingProps,\n  opts?: { isMultiPart?: boolean },\n): SystemStyleObject\n\nexport function useStyleConfig(themeKey: any, props: any = {}, opts: any = {}) {\n  const { styleConfig: styleConfigProp, ...rest } = props\n\n  const { theme, colorMode } = useChakra()\n  const themeStyleConfig = get(theme, `components.${themeKey}`)\n  const styleConfig = styleConfigProp || themeStyleConfig\n\n  const mergedProps = mergeWith(\n    { theme, colorMode },\n    styleConfig?.defaultProps ?? {},\n    filterUndefined(omit(rest, [\"children\"])),\n  )\n\n  /**\n   * Store the computed styles in a `ref` to avoid unneeded re-computation\n   */\n  type StylesRef = SystemStyleObject | Record<string, SystemStyleObject>\n  const stylesRef = useRef<StylesRef>({})\n\n  return useMemo(() => {\n    if (styleConfig) {\n      const baseStyles = runIfFn(styleConfig.baseStyle ?? {}, mergedProps)\n\n      const variants = runIfFn(\n        styleConfig.variants?.[mergedProps.variant] ?? {},\n        mergedProps,\n      )\n\n      const sizes = runIfFn(\n        styleConfig.sizes?.[mergedProps.size] ?? {},\n        mergedProps,\n      )\n\n      const styles = mergeWith({}, baseStyles, sizes, variants)\n\n      if (opts?.isMultiPart && styleConfig.parts) {\n        styleConfig.parts.forEach((part: string) => {\n          styles[part] = styles[part] ?? {}\n        })\n      }\n\n      const isStyleEqual = isEqual(stylesRef.current, styles)\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles\n      }\n    }\n\n    return stylesRef.current\n  }, [styleConfig, mergedProps, opts?.isMultiPart])\n}\n\nexport function useMultiStyleConfig(themeKey: string, props: any) {\n  return useStyleConfig(themeKey, props, { isMultiPart: true })\n}\n"]},"metadata":{},"sourceType":"module"}