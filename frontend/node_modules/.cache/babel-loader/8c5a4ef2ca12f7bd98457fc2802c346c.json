{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\";\nimport { motion } from \"framer-motion\";\nimport * as React from \"react\";\nimport { MenuProvider, useMenu, useMenuButton, useMenuContext, useMenuItem, useMenuList, useMenuOption, useMenuOptionGroup, useMenuPositioner } from \"./use-menu\";\n/**\n * Menu provides context, state, and focus management\n * to its sub-components. It doesn't render any DOM node.\n */\n\nexport var Menu = props => {\n  var {\n    children\n  } = props;\n  var styles = useMultiStyleConfig(\"Menu\", props);\n  var ownProps = omitThemingProps(props);\n  var ctx = useMenu(ownProps);\n  var context = React.useMemo(() => ctx, [ctx]);\n  var {\n    isOpen,\n    onClose,\n    forceUpdate\n  } = context;\n  return /*#__PURE__*/React.createElement(MenuProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, runIfFn(children, {\n    isOpen,\n    onClose,\n    forceUpdate\n  })));\n};\n\nif (__DEV__) {\n  Menu.displayName = \"Menu\";\n}\n\nvar StyledMenuButton = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({\n    ref: ref\n  }, props, {\n    __css: _extends({\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      outline: 0,\n      transition: \"all 250ms\"\n    }, styles.button)\n  }));\n});\n/**\n * The trigger for the menu list. Must be a direct child of `Menu`.\n */\n\nexport var MenuButton = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    as: As\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"children\", \"as\"]);\n\n  var buttonProps = useMenuButton(rest, ref);\n  var ButtonComp = As || StyledMenuButton;\n  return /*#__PURE__*/React.createElement(ButtonComp, _extends({}, buttonProps, {\n    className: cx(\"chakra-menu__menu-button\", props.className)\n  }), /*#__PURE__*/React.createElement(chakra.span, {\n    __css: {\n      pointerEvents: \"none\",\n      flex: \"1 1 auto\"\n    }\n  }, props.children));\n});\n\nif (__DEV__) {\n  MenuButton.displayName = \"MenuButton\";\n}\n\nvar motionVariants = {\n  enter: {\n    visibility: \"visible\",\n    opacity: 1,\n    scale: 1,\n    transition: {\n      duration: 0.2,\n      ease: [0.4, 0, 0.2, 1]\n    }\n  },\n  exit: {\n    transitionEnd: {\n      visibility: \"hidden\"\n    },\n    opacity: 0,\n    scale: 0.8,\n    transition: {\n      duration: 0.1,\n      easings: \"easeOut\"\n    }\n  }\n};\nvar Motion = chakra(motion.div);\nexport var MenuList = /*#__PURE__*/forwardRef((props, ref) => {\n  var _styles$list;\n\n  var {\n    isOpen,\n    onTransitionEnd\n  } = useMenuContext();\n  var listProps = useMenuList(props, ref);\n  var positionerProps = useMenuPositioner();\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, positionerProps, {\n    __css: {\n      zIndex: (_styles$list = styles.list) == null ? void 0 : _styles$list.zIndex\n    }\n  }), /*#__PURE__*/React.createElement(Motion, _extends({}, listProps, {\n    /**\n     * We could call this on either `onAnimationComplete` or `onUpdate`.\n     * It seems the re-focusing works better with the `onUpdate`\n     */\n    onUpdate: onTransitionEnd,\n    className: cx(\"chakra-menu__menu-list\", listProps.className),\n    variants: motionVariants,\n    initial: false,\n    animate: isOpen ? \"enter\" : \"exit\",\n    __css: _extends({\n      outline: 0\n    }, styles.list)\n  })));\n});\n\nif (__DEV__) {\n  MenuList.displayName = \"MenuList\";\n}\n\nvar StyledMenuItem = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    type\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"type\"]);\n\n  var styles = useStyles();\n  /**\n   * Given another component, use its type if present\n   * Else, use no type to avoid invalid html, e.g. <a type=\"button\" />\n   * Else, fall back to \"button\"\n   */\n\n  var btnType = rest.as ? type != null ? type : undefined : \"button\";\n\n  var buttonStyles = _extends({\n    textDecoration: \"none\",\n    color: \"inherit\",\n    userSelect: \"none\",\n    display: \"flex\",\n    width: \"100%\",\n    alignItems: \"center\",\n    textAlign: \"left\",\n    flex: \"0 0 auto\",\n    outline: 0\n  }, styles.item);\n\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({\n    ref: ref,\n    type: btnType\n  }, rest, {\n    __css: buttonStyles\n  }));\n});\nexport var MenuItem = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    icon,\n    iconSpacing = \"0.75rem\",\n    command,\n    children\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"icon\", \"iconSpacing\", \"command\", \"children\"]);\n\n  var menuItemProps = useMenuItem(rest, ref);\n  var shouldWrap = icon || command;\n\n  var _children = shouldWrap ? /*#__PURE__*/React.createElement(chakra.span, {\n    pointerEvents: \"none\",\n    flex: \"1\"\n  }, children) : children;\n\n  return /*#__PURE__*/React.createElement(StyledMenuItem, _extends({}, menuItemProps, {\n    className: cx(\"chakra-menu__menuitem\", menuItemProps.className)\n  }), icon && /*#__PURE__*/React.createElement(MenuIcon, {\n    fontSize: \"0.8em\",\n    mr: iconSpacing\n  }, icon), _children, command && /*#__PURE__*/React.createElement(MenuCommand, null, command));\n});\n\nif (__DEV__) {\n  MenuItem.displayName = \"MenuItem\";\n}\n\nvar CheckIcon = props => /*#__PURE__*/React.createElement(\"svg\", _extends({\n  viewBox: \"0 0 14 14\",\n  width: \"1em\",\n  height: \"1em\"\n}, props), /*#__PURE__*/React.createElement(\"polygon\", {\n  fill: \"currentColor\",\n  points: \"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039\"\n}));\n\nexport var MenuItemOption = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    icon,\n    iconSpacing = \"0.75rem\"\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"icon\", \"iconSpacing\"]);\n\n  var optionProps = useMenuOption(rest, ref);\n  return /*#__PURE__*/React.createElement(StyledMenuItem, _extends({}, optionProps, {\n    className: cx(\"chakra-menu__menuitem-option\", rest.className)\n  }), /*#__PURE__*/React.createElement(MenuIcon, {\n    fontSize: \"0.8em\",\n    mr: iconSpacing,\n    opacity: props.isChecked ? 1 : 0\n  }, icon || /*#__PURE__*/React.createElement(CheckIcon, null)), /*#__PURE__*/React.createElement(chakra.span, {\n    flex: \"1\"\n  }, optionProps.children));\n});\nMenuItemOption.id = \"MenuItemOption\";\n\nif (__DEV__) {\n  MenuItemOption.displayName = \"MenuItemOption\";\n}\n\nexport var MenuOptionGroup = props => {\n  var {\n    className,\n    title\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"title\"]);\n\n  var ownProps = useMenuOptionGroup(rest);\n  return /*#__PURE__*/React.createElement(MenuGroup, _extends({\n    title: title,\n    className: cx(\"chakra-menu__option-group\", className)\n  }, ownProps));\n};\n\nif (__DEV__) {\n  MenuOptionGroup.displayName = \"MenuOptionGroup\";\n}\n\nexport var MenuGroup = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    title,\n    children,\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"title\", \"children\", \"className\"]);\n\n  var _className = cx(\"chakra-menu__group__title\", className);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, {\n    ref: ref,\n    className: \"chakra-menu__group\",\n    role: \"group\"\n  }, title && /*#__PURE__*/React.createElement(chakra.p, _extends({\n    className: _className\n  }, rest, {\n    __css: styles.groupTitle\n  }), title), children);\n});\n\nif (__DEV__) {\n  MenuGroup.displayName = \"MenuGroup\";\n}\n\nexport var MenuCommand = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    ref: ref\n  }, props, {\n    __css: styles.command,\n    className: \"chakra-menu__command\"\n  }));\n});\n\nif (__DEV__) {\n  MenuCommand.displayName = \"MenuCommand\";\n}\n\nexport var MenuIcon = props => {\n  var {\n    className,\n    children\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"children\"]);\n\n  var child = React.Children.only(children);\n  var clone = /*#__PURE__*/React.isValidElement(child) ? /*#__PURE__*/React.cloneElement(child, {\n    focusable: \"false\",\n    \"aria-hidden\": true,\n    className: cx(\"chakra-menu__icon\", child.props.className)\n  }) : null;\n\n  var _className = cx(\"chakra-menu__icon-wrapper\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    className: _className\n  }, rest, {\n    __css: {\n      flexShrink: 0\n    }\n  }), clone);\n};\n\nif (__DEV__) {\n  MenuIcon.displayName = \"MenuIcon\";\n}\n\nexport var MenuDivider = props => {\n  var {\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.hr, _extends({\n    role: \"separator\",\n    \"aria-orientation\": \"horizontal\",\n    className: cx(\"chakra-menu__divider\", className)\n  }, rest, {\n    __css: styles.divider\n  }));\n};\n\nif (__DEV__) {\n  MenuDivider.displayName = \"MenuDivider\";\n}","map":{"version":3,"sources":["../../src/menu.tsx"],"names":["Menu","props","children","styles","useMultiStyleConfig","ownProps","omitThemingProps","ctx","useMenu","context","React","forceUpdate","runIfFn","StyledMenuButton","forwardRef","useStyles","ref","display","appearance","alignItems","outline","transition","MenuButton","as","As","rest","buttonProps","useMenuButton","ButtonComp","cx","pointerEvents","flex","motionVariants","enter","visibility","opacity","scale","duration","ease","exit","transitionEnd","easings","Motion","chakra","motion","MenuList","onTransitionEnd","useMenuContext","listProps","useMenuList","positionerProps","useMenuPositioner","zIndex","isOpen","StyledMenuItem","type","btnType","buttonStyles","textDecoration","color","userSelect","width","textAlign","MenuItem","iconSpacing","menuItemProps","useMenuItem","shouldWrap","icon","_children","command","CheckIcon","MenuItemOption","optionProps","useMenuOption","MenuOptionGroup","title","useMenuOptionGroup","MenuGroup","className","_className","groupTitle","MenuCommand","MenuIcon","child","clone","focusable","flexShrink","MenuDivider","divider"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  PropsOf,\n  StylesProvider,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, MaybeRenderProp, runIfFn, __DEV__ } from \"@chakra-ui/utils\"\nimport { motion, Variants } from \"framer-motion\"\nimport * as React from \"react\"\nimport {\n  MenuProvider,\n  useMenu,\n  useMenuButton,\n  useMenuContext,\n  useMenuItem,\n  UseMenuItemProps,\n  useMenuList,\n  useMenuOption,\n  useMenuOptionGroup,\n  UseMenuOptionGroupProps,\n  UseMenuOptionOptions,\n  useMenuPositioner,\n  UseMenuProps,\n} from \"./use-menu\"\n\nexport interface MenuProps extends UseMenuProps, ThemingProps {\n  children: MaybeRenderProp<{\n    isOpen: boolean\n    onClose: () => void\n    forceUpdate: (() => void) | null\n  }>\n}\n\n/**\n * Menu provides context, state, and focus management\n * to its sub-components. It doesn't render any DOM node.\n */\nexport const Menu: React.FC<MenuProps> = (props) => {\n  const { children } = props\n\n  const styles = useMultiStyleConfig(\"Menu\", props)\n  const ownProps = omitThemingProps(props)\n\n  const ctx = useMenu(ownProps)\n  const context = React.useMemo(() => ctx, [ctx])\n\n  const { isOpen, onClose, forceUpdate } = context\n\n  return (\n    <MenuProvider value={context}>\n      <StylesProvider value={styles}>\n        {runIfFn(children, { isOpen, onClose, forceUpdate })}\n      </StylesProvider>\n    </MenuProvider>\n  )\n}\n\nif (__DEV__) {\n  Menu.displayName = \"Menu\"\n}\n\nexport interface MenuButtonProps extends HTMLChakraProps<\"button\"> {}\n\nconst StyledMenuButton = forwardRef<MenuButtonProps, \"button\">((props, ref) => {\n  const styles = useStyles()\n  return (\n    <chakra.button\n      ref={ref}\n      {...props}\n      __css={{\n        display: \"inline-flex\",\n        appearance: \"none\",\n        alignItems: \"center\",\n        outline: 0,\n        transition: \"all 250ms\",\n        ...styles.button,\n      }}\n    />\n  )\n})\n\n/**\n * The trigger for the menu list. Must be a direct child of `Menu`.\n */\nexport const MenuButton = forwardRef<MenuButtonProps, \"button\">(\n  (props, ref) => {\n    const { children, as: As, ...rest } = props\n\n    const buttonProps = useMenuButton(rest, ref)\n\n    const ButtonComp = As || StyledMenuButton\n\n    return (\n      <ButtonComp\n        {...buttonProps}\n        className={cx(\"chakra-menu__menu-button\", props.className)}\n      >\n        <chakra.span\n          __css={{\n            pointerEvents: \"none\",\n            flex: \"1 1 auto\",\n          }}\n        >\n          {props.children}\n        </chakra.span>\n      </ButtonComp>\n    )\n  },\n)\n\nif (__DEV__) {\n  MenuButton.displayName = \"MenuButton\"\n}\n\nexport interface MenuListProps extends HTMLChakraProps<\"div\"> {}\n\nconst motionVariants: Variants = {\n  enter: {\n    visibility: \"visible\",\n    opacity: 1,\n    scale: 1,\n    transition: {\n      duration: 0.2,\n      ease: [0.4, 0, 0.2, 1],\n    },\n  },\n  exit: {\n    transitionEnd: {\n      visibility: \"hidden\",\n    },\n    opacity: 0,\n    scale: 0.8,\n    transition: {\n      duration: 0.1,\n      easings: \"easeOut\",\n    },\n  },\n}\n\nconst Motion = chakra(motion.div)\n\nexport const MenuList = forwardRef<MenuListProps, \"div\">((props, ref) => {\n  const { isOpen, onTransitionEnd } = useMenuContext()\n\n  const listProps = useMenuList(props, ref)\n  const positionerProps = useMenuPositioner()\n\n  const styles = useStyles()\n\n  return (\n    <chakra.div {...positionerProps} __css={{ zIndex: styles.list?.zIndex }}>\n      <Motion\n        {...listProps}\n        /**\n         * We could call this on either `onAnimationComplete` or `onUpdate`.\n         * It seems the re-focusing works better with the `onUpdate`\n         */\n        onUpdate={onTransitionEnd}\n        className={cx(\"chakra-menu__menu-list\", listProps.className)}\n        variants={motionVariants}\n        initial={false}\n        animate={isOpen ? \"enter\" : \"exit\"}\n        __css={{\n          outline: 0,\n          ...styles.list,\n        }}\n      />\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  MenuList.displayName = \"MenuList\"\n}\n\nexport interface StyledMenuItemProps extends HTMLChakraProps<\"button\"> {}\n\nconst StyledMenuItem = forwardRef<StyledMenuItemProps, \"button\">(\n  (props, ref) => {\n    const { type, ...rest } = props\n    const styles = useStyles()\n\n    /**\n     * Given another component, use its type if present\n     * Else, use no type to avoid invalid html, e.g. <a type=\"button\" />\n     * Else, fall back to \"button\"\n     */\n    const btnType = rest.as ? type ?? undefined : \"button\"\n\n    const buttonStyles: SystemStyleObject = {\n      textDecoration: \"none\",\n      color: \"inherit\",\n      userSelect: \"none\",\n      display: \"flex\",\n      width: \"100%\",\n      alignItems: \"center\",\n      textAlign: \"left\",\n      flex: \"0 0 auto\",\n      outline: 0,\n      ...styles.item,\n    }\n\n    return (\n      <chakra.button ref={ref} type={btnType} {...rest} __css={buttonStyles} />\n    )\n  },\n)\n\ninterface MenuItemOptions\n  extends Pick<UseMenuItemProps, \"isDisabled\" | \"isFocusable\"> {\n  /**\n   * The icon to render before the menu item's label.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * The spacing between the icon and menu item's label\n   * @type SystemProps[\"mr\"]\n   */\n  iconSpacing?: SystemProps[\"mr\"]\n  /**\n   * Right-aligned label text content, useful for displaying hotkeys.\n   */\n  command?: string\n}\n\nexport interface MenuItemProps\n  extends HTMLChakraProps<\"button\">,\n    MenuItemOptions {}\n\nexport const MenuItem = forwardRef<MenuItemProps, \"button\">((props, ref) => {\n  const { icon, iconSpacing = \"0.75rem\", command, children, ...rest } = props\n\n  const menuItemProps = useMenuItem(rest, ref) as MenuItemProps\n\n  const shouldWrap = icon || command\n\n  const _children = shouldWrap ? (\n    <chakra.span pointerEvents=\"none\" flex=\"1\">\n      {children}\n    </chakra.span>\n  ) : (\n    children\n  )\n\n  return (\n    <StyledMenuItem\n      {...menuItemProps}\n      className={cx(\"chakra-menu__menuitem\", menuItemProps.className)}\n    >\n      {icon && (\n        <MenuIcon fontSize=\"0.8em\" mr={iconSpacing}>\n          {icon}\n        </MenuIcon>\n      )}\n      {_children}\n      {command && <MenuCommand>{command}</MenuCommand>}\n    </StyledMenuItem>\n  )\n})\n\nif (__DEV__) {\n  MenuItem.displayName = \"MenuItem\"\n}\n\nconst CheckIcon: React.FC<PropsOf<\"svg\">> = (props) => (\n  <svg viewBox=\"0 0 14 14\" width=\"1em\" height=\"1em\" {...props}>\n    <polygon\n      fill=\"currentColor\"\n      points=\"5.5 11.9993304 14 3.49933039 12.5 2 5.5 8.99933039 1.5 4.9968652 0 6.49933039\"\n    />\n  </svg>\n)\n\nexport interface MenuItemOptionProps\n  extends UseMenuOptionOptions,\n    Omit<MenuItemProps, keyof UseMenuOptionOptions> {\n  /**\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * @type SystemProps[\"mr\"]\n   */\n  iconSpacing?: SystemProps[\"mr\"]\n}\n\nexport const MenuItemOption = forwardRef<MenuItemOptionProps, \"button\">(\n  (props, ref) => {\n    const { icon, iconSpacing = \"0.75rem\", ...rest } = props\n\n    const optionProps = useMenuOption(rest, ref) as StyledMenuItemProps\n\n    return (\n      <StyledMenuItem\n        {...optionProps}\n        className={cx(\"chakra-menu__menuitem-option\", rest.className)}\n      >\n        <MenuIcon\n          fontSize=\"0.8em\"\n          mr={iconSpacing}\n          opacity={props.isChecked ? 1 : 0}\n        >\n          {icon || <CheckIcon />}\n        </MenuIcon>\n        <chakra.span flex=\"1\">{optionProps.children}</chakra.span>\n      </StyledMenuItem>\n    )\n  },\n)\n\nMenuItemOption.id = \"MenuItemOption\"\n\nif (__DEV__) {\n  MenuItemOption.displayName = \"MenuItemOption\"\n}\n\nexport interface MenuOptionGroupProps\n  extends UseMenuOptionGroupProps,\n    Omit<MenuGroupProps, \"value\" | \"defaultValue\" | \"onChange\"> {}\n\nexport const MenuOptionGroup: React.FC<MenuOptionGroupProps> = (props) => {\n  const { className, title, ...rest } = props\n  const ownProps = useMenuOptionGroup(rest)\n  return (\n    <MenuGroup\n      title={title}\n      className={cx(\"chakra-menu__option-group\", className)}\n      {...ownProps}\n    />\n  )\n}\n\nif (__DEV__) {\n  MenuOptionGroup.displayName = \"MenuOptionGroup\"\n}\n\nexport interface MenuGroupProps extends HTMLChakraProps<\"div\"> {}\n\nexport const MenuGroup = forwardRef<MenuGroupProps, \"div\">((props, ref) => {\n  const { title, children, className, ...rest } = props\n\n  const _className = cx(\"chakra-menu__group__title\", className)\n  const styles = useStyles()\n\n  return (\n    <chakra.div ref={ref} className=\"chakra-menu__group\" role=\"group\">\n      {title && (\n        <chakra.p className={_className} {...rest} __css={styles.groupTitle}>\n          {title}\n        </chakra.p>\n      )}\n      {children}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  MenuGroup.displayName = \"MenuGroup\"\n}\n\nexport interface MenuCommandProps extends HTMLChakraProps<\"span\"> {}\n\nexport const MenuCommand = forwardRef<MenuCommandProps, \"span\">(\n  (props, ref) => {\n    const styles = useStyles()\n    return (\n      <chakra.span\n        ref={ref}\n        {...props}\n        __css={styles.command}\n        className=\"chakra-menu__command\"\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  MenuCommand.displayName = \"MenuCommand\"\n}\n\nexport const MenuIcon: React.FC<HTMLChakraProps<\"span\">> = (props) => {\n  const { className, children, ...rest } = props\n\n  const child = React.Children.only(children)\n\n  const clone = React.isValidElement(child)\n    ? React.cloneElement(child, {\n        focusable: \"false\",\n        \"aria-hidden\": true,\n        className: cx(\"chakra-menu__icon\", child.props.className),\n      })\n    : null\n\n  const _className = cx(\"chakra-menu__icon-wrapper\", className)\n\n  return (\n    <chakra.span\n      className={_className}\n      {...rest}\n      __css={{\n        flexShrink: 0,\n      }}\n    >\n      {clone}\n    </chakra.span>\n  )\n}\n\nif (__DEV__) {\n  MenuIcon.displayName = \"MenuIcon\"\n}\n\nexport interface MenuDividerProps extends HTMLChakraProps<\"hr\"> {}\n\nexport const MenuDivider: React.FC<MenuDividerProps> = (props) => {\n  const { className, ...rest } = props\n  const styles = useStyles()\n  return (\n    <chakra.hr\n      role=\"separator\"\n      aria-orientation=\"horizontal\"\n      className={cx(\"chakra-menu__divider\", className)}\n      {...rest}\n      __css={styles.divider}\n    />\n  )\n}\n\nif (__DEV__) {\n  MenuDivider.displayName = \"MenuDivider\"\n}\n"]},"metadata":{},"sourceType":"module"}