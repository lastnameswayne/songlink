{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { Icon } from \"@chakra-ui/icon\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig, StylesProvider, useStyles } from \"@chakra-ui/system\";\nimport { getValidChildren, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/**\n * List is used to display list items, it renders a `<ul>` by default.\n *\n * @see Docs https://chakra-ui.com/docs/data-display/list\n */\n\nexport var List = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"List\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    children,\n    styleType = \"none\",\n    stylePosition,\n    spacing\n  } = _omitThemingProps,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\", \"styleType\", \"stylePosition\", \"spacing\"]);\n\n  var validChildren = getValidChildren(children);\n  var selector = \"& > *:not(style) ~ *:not(style)\";\n  var spacingStyle = spacing ? {\n    [selector]: {\n      mt: spacing\n    }\n  } : {};\n  return /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.ul, _extends({\n    ref: ref,\n    listStyleType: styleType,\n    listStylePosition: stylePosition\n    /**\n     * We added this role to fix the Safari accessibility issue with list-style-type: none\n     * @see https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html\n     */\n    ,\n    role: \"list\",\n    __css: _extends({}, styles.container, spacingStyle)\n  }, rest), validChildren));\n});\n\nif (__DEV__) {\n  List.displayName = \"List\";\n}\n\nexport var OrderedList = /*#__PURE__*/forwardRef((props, ref) => {\n  var rest = _objectWithoutPropertiesLoose(props, [\"as\"]);\n\n  return /*#__PURE__*/React.createElement(List, _extends({\n    ref: ref,\n    as: \"ol\",\n    styleType: \"decimal\",\n    marginLeft: \"1em\"\n  }, rest));\n});\n\nif (__DEV__) {\n  OrderedList.displayName = \"OrderedList\";\n}\n\nexport var UnorderedList = /*#__PURE__*/forwardRef((props, ref) => {\n  var rest = _objectWithoutPropertiesLoose(props, [\"as\"]);\n\n  return /*#__PURE__*/React.createElement(List, _extends({\n    ref: ref,\n    as: \"ul\",\n    styleType: \"initial\",\n    marginLeft: \"1em\"\n  }, rest));\n});\n\nif (__DEV__) {\n  UnorderedList.displayName = \"UnorderedList\";\n}\n/**\n * ListItem\n *\n * Used to render a list item\n */\n\n\nexport var ListItem = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.li, _extends({\n    ref: ref\n  }, props, {\n    __css: styles.item\n  }));\n});\n\nif (__DEV__) {\n  ListItem.displayName = \"ListItem\";\n}\n/**\n * ListIcon\n *\n * Used to render an icon beside the list item text\n */\n\n\nexport var ListIcon = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(Icon, _extends({\n    ref: ref,\n    role: \"presentation\"\n  }, props, {\n    __css: styles.icon\n  }));\n});\n\nif (__DEV__) {\n  ListIcon.displayName = \"ListIcon\";\n}","map":{"version":3,"sources":["../../src/list.tsx"],"names":["List","forwardRef","styles","useMultiStyleConfig","styleType","spacing","rest","omitThemingProps","validChildren","getValidChildren","selector","spacingStyle","mt","stylePosition","OrderedList","UnorderedList","ListItem","useStyles","ref","item","ListIcon","icon"],"mappings":"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","sourcesContent":["import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport {\n  chakra,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  StylesProvider,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { getValidChildren, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface ListOptions {\n  /**\n   * Short hand prop for `listStyleType`\n   * @type SystemProps[\"listStyleType\"]\n   */\n  styleType?: SystemProps[\"listStyleType\"]\n  /**\n   * Short hand prop for `listStylePosition`\n   * @type SystemProps[\"listStylePosition\"]\n   */\n  stylePosition?: SystemProps[\"listStylePosition\"]\n  /**\n   * The space between each list item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n}\n\nexport interface ListProps\n  extends HTMLChakraProps<\"ul\">,\n    ThemingProps,\n    ListOptions {}\n\n/**\n * List is used to display list items, it renders a `<ul>` by default.\n *\n * @see Docs https://chakra-ui.com/docs/data-display/list\n */\nexport const List = forwardRef<ListProps, \"ul\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"List\", props)\n  const {\n    children,\n    styleType = \"none\",\n    stylePosition,\n    spacing,\n    ...rest\n  } = omitThemingProps(props)\n\n  const validChildren = getValidChildren(children)\n\n  const selector = \"& > *:not(style) ~ *:not(style)\"\n\n  const spacingStyle = spacing ? { [selector]: { mt: spacing } } : {}\n\n  return (\n    <StylesProvider value={styles}>\n      <chakra.ul\n        ref={ref}\n        listStyleType={styleType}\n        listStylePosition={stylePosition}\n        /**\n         * We added this role to fix the Safari accessibility issue with list-style-type: none\n         * @see https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html\n         */\n        role=\"list\"\n        __css={{ ...styles.container, ...spacingStyle }}\n        {...rest}\n      >\n        {validChildren}\n      </chakra.ul>\n    </StylesProvider>\n  )\n})\n\nif (__DEV__) {\n  List.displayName = \"List\"\n}\n\nexport const OrderedList = forwardRef<ListProps, \"ol\">((props, ref) => {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ol\" styleType=\"decimal\" marginLeft=\"1em\" {...rest} />\n  )\n})\n\nif (__DEV__) {\n  OrderedList.displayName = \"OrderedList\"\n}\n\nexport const UnorderedList = forwardRef<ListProps, \"ul\">((props, ref) => {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ul\" styleType=\"initial\" marginLeft=\"1em\" {...rest} />\n  )\n})\n\nif (__DEV__) {\n  UnorderedList.displayName = \"UnorderedList\"\n}\n\nexport interface ListItemProps extends HTMLChakraProps<\"li\"> {}\n\n/**\n * ListItem\n *\n * Used to render a list item\n */\nexport const ListItem = forwardRef<ListItemProps, \"li\">((props, ref) => {\n  const styles = useStyles()\n\n  return <chakra.li ref={ref} {...props} __css={styles.item} />\n})\n\nif (__DEV__) {\n  ListItem.displayName = \"ListItem\"\n}\n\n/**\n * ListIcon\n *\n * Used to render an icon beside the list item text\n */\nexport const ListIcon = forwardRef<IconProps, \"svg\">((props, ref) => {\n  const styles = useStyles()\n\n  return <Icon ref={ref} role=\"presentation\" {...props} __css={styles.icon} />\n})\n\nif (__DEV__) {\n  ListIcon.displayName = \"ListIcon\"\n}\n"]},"metadata":{},"sourceType":"module"}