{"ast":null,"code":"import { isString, isNumber } from \"@chakra-ui/utils\";\nimport unit from \"./get-unit\";\n\nvar startsWith = (string, target) => string.slice(0, 0 + target.length) === target;\n\nexport function positiveOrNegative(value, scale) {\n  if (!scale || value == null) return value;\n  var result;\n  var valueString = value.toString();\n\n  if (startsWith(valueString, \"-\")) {\n    var raw = scale[valueString.slice(1)];\n\n    if (isString(raw)) {\n      result = \"-\" + raw;\n    } else if (isNumber(raw)) {\n      result = raw * -1;\n    } else {\n      result = value;\n    }\n  } else {\n    var _scale$value;\n\n    result = (_scale$value = scale[value]) != null ? _scale$value : value;\n  }\n\n  var computedValue = result || value;\n  var hasUnit = unit(computedValue);\n\n  if (!hasUnit && !Number.isNaN(Number(computedValue))) {\n    computedValue = Number(computedValue);\n  }\n\n  return computedValue;\n}","map":{"version":3,"sources":["../../../src/utils/positive-or-negative.ts"],"names":["startsWith","string","target","value","valueString","raw","scale","isString","result","isNumber","computedValue","hasUnit","unit","Number"],"mappings":"AAAA,SAAA,QAAA,EAAA,QAAA,QAAA,kBAAA;AACA,OAAA,IAAA,MAAA,YAAA;;AAEA,IAAMA,UAAU,GAAG,CAAA,MAAA,EAAA,MAAA,KACjBC,MAAM,CAANA,KAAAA,CAAAA,CAAAA,EAAgB,IAAIC,MAAM,CAA1BD,MAAAA,MADF,MAAA;;AAGA,OAAO,SAAA,kBAAA,CAAA,KAAA,EAAA,KAAA,EAGL;AACA,MAAI,CAAA,KAAA,IAAUE,KAAK,IAAnB,IAAA,EAA6B,OAAA,KAAA;AAE7B,MAAA,MAAA;AAEA,MAAMC,WAAW,GAAGD,KAAK,CAAzB,QAAoBA,EAApB;;AAEA,MAAIH,UAAU,CAAA,WAAA,EAAd,GAAc,CAAd,EAAkC;AAChC,QAAMK,GAAG,GAAGC,KAAK,CAACF,WAAW,CAAXA,KAAAA,CAAlB,CAAkBA,CAAD,CAAjB;;AACA,QAAIG,QAAQ,CAAZ,GAAY,CAAZ,EAAmB;AACjBC,MAAAA,MAAM,GAAA,MAANA,GAAAA;AADF,KAAA,MAEO,IAAIC,QAAQ,CAAZ,GAAY,CAAZ,EAAmB;AACxBD,MAAAA,MAAM,GAAGH,GAAG,GAAG,CAAfG,CAAAA;AADK,KAAA,MAEA;AACLA,MAAAA,MAAM,GAANA,KAAAA;AACD;AARH,GAAA,MASO;AAAA,QAAA,YAAA;;AACLA,IAAAA,MAAM,GAAA,CAAA,YAAA,GAAGF,KAAK,CAAR,KAAQ,CAAR,KAAA,IAAA,GAAA,YAAA,GAANE,KAAAA;AACD;;AAED,MAAIE,aAAa,GAAGF,MAAM,IAA1B,KAAA;AACA,MAAMG,OAAO,GAAGC,IAAI,CAApB,aAAoB,CAApB;;AAEA,MAAI,CAAA,OAAA,IAAY,CAACC,MAAM,CAANA,KAAAA,CAAaA,MAAM,CAApC,aAAoC,CAAnBA,CAAjB,EAAsD;AACpDH,IAAAA,aAAa,GAAGG,MAAM,CAAtBH,aAAsB,CAAtBA;AACD;;AAED,SAAA,aAAA;AACD","sourcesContent":["import { StringOrNumber, isString, isNumber } from \"@chakra-ui/utils\"\nimport unit from \"./get-unit\"\n\nconst startsWith = (string: string, target: string) =>\n  string.slice(0, 0 + target.length) === target\n\nexport function positiveOrNegative(\n  value: StringOrNumber | undefined,\n  scale: any,\n) {\n  if (!scale || value == null) return value\n\n  let result: any\n\n  const valueString = value.toString()\n\n  if (startsWith(valueString, \"-\")) {\n    const raw = scale[valueString.slice(1)]\n    if (isString(raw)) {\n      result = `-${raw}`\n    } else if (isNumber(raw)) {\n      result = raw * -1\n    } else {\n      result = value\n    }\n  } else {\n    result = scale[value] ?? value\n  }\n\n  let computedValue = result || value\n  const hasUnit = unit(computedValue)\n\n  if (!hasUnit && !Number.isNaN(Number(computedValue))) {\n    computedValue = Number(computedValue)\n  }\n\n  return computedValue\n}\n"]},"metadata":{},"sourceType":"module"}