{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { Alert, AlertDescription, AlertIcon, AlertTitle } from \"@chakra-ui/alert\";\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { chakra, ColorModeContext, ThemeProvider, useChakra } from \"@chakra-ui/system\";\nimport defaultTheme from \"@chakra-ui/theme\";\nimport { isFunction, noop } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { toast } from \"./toast.class\";\n\nvar Toast = props => {\n  var {\n    status,\n    variant,\n    id,\n    title,\n    isClosable,\n    onClose,\n    description\n  } = props;\n  return /*#__PURE__*/React.createElement(Alert, {\n    status: status,\n    variant: variant,\n    id: id,\n    alignItems: \"start\",\n    borderRadius: \"md\",\n    boxShadow: \"lg\",\n    paddingRight: 8,\n    textAlign: \"left\",\n    width: \"auto\"\n  }, /*#__PURE__*/React.createElement(AlertIcon, null), /*#__PURE__*/React.createElement(chakra.div, {\n    flex: \"1\"\n  }, title && /*#__PURE__*/React.createElement(AlertTitle, null, title), description && /*#__PURE__*/React.createElement(AlertDescription, {\n    display: \"block\"\n  }, description)), isClosable && /*#__PURE__*/React.createElement(CloseButton, {\n    size: \"sm\",\n    onClick: onClose,\n    position: \"absolute\",\n    right: 1,\n    top: 1\n  }));\n};\n\nvar defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\"\n};\nexport var defaultStandaloneParam = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: noop,\n  setColorMode: noop,\n  defaultOptions: defaults\n};\n/**\n * Create a toast from outside of React Components\n */\n\nexport function createStandaloneToast(_temp) {\n  var {\n    theme = defaultStandaloneParam.theme,\n    colorMode = defaultStandaloneParam.colorMode,\n    toggleColorMode = defaultStandaloneParam.toggleColorMode,\n    setColorMode = defaultStandaloneParam.setColorMode,\n    defaultOptions = defaultStandaloneParam.defaultOptions\n  } = _temp === void 0 ? defaultStandaloneParam : _temp;\n\n  var renderWithProviders = (props, options) => /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme\n  }, /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n    value: {\n      colorMode,\n      setColorMode,\n      toggleColorMode\n    }\n  }, isFunction(options.render) ? options.render(props) : /*#__PURE__*/React.createElement(Toast, _extends({}, props, options))));\n\n  var toastImpl = options => {\n    var opts = _extends({}, defaultOptions, options);\n\n    var Message = props => renderWithProviders(props, opts);\n\n    return toast.notify(Message, opts);\n  };\n\n  toastImpl.close = toast.close;\n  toastImpl.closeAll = toast.closeAll; // toasts can only be updated if they have a valid id\n\n  toastImpl.update = (id, options) => {\n    if (!id) return;\n\n    var opts = _extends({}, defaultOptions, options);\n\n    toast.update(id, _extends({}, opts, {\n      message: props => renderWithProviders(props, opts)\n    }));\n  };\n\n  toastImpl.isActive = toast.isActive;\n  return toastImpl;\n}\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\n\nexport function useToast(options) {\n  var {\n    theme,\n    setColorMode,\n    toggleColorMode,\n    colorMode\n  } = useChakra();\n  return React.useMemo(() => createStandaloneToast({\n    theme,\n    colorMode,\n    setColorMode,\n    toggleColorMode,\n    defaultOptions: options\n  }), [theme, setColorMode, toggleColorMode, colorMode, options]);\n}\nexport default useToast;","map":{"version":3,"sources":["../../src/use-toast.tsx"],"names":["Toast","props","description","title","isClosable","defaults","duration","position","variant","defaultStandaloneParam","theme","colorMode","toggleColorMode","setColorMode","defaultOptions","renderWithProviders","isFunction","options","toastImpl","opts","Message","toast","message","useChakra","createStandaloneToast"],"mappings":"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","sourcesContent":["import type { AlertStatus } from \"@chakra-ui/alert\"\nimport {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n} from \"@chakra-ui/alert\"\nimport { CloseButton } from \"@chakra-ui/close-button\"\nimport {\n  chakra,\n  ColorMode,\n  ColorModeContext,\n  ThemeProvider,\n  useChakra,\n} from \"@chakra-ui/system\"\nimport defaultTheme from \"@chakra-ui/theme\"\nimport { isFunction, noop } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { toast } from \"./toast.class\"\nimport { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\n\nexport interface UseToastOptions {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastOptions[\"position\"]\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   */\n  isClosable?: boolean\n  /**\n   * The alert component `variant` to use\n   */\n  variant?: string\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n}\n\nexport type IToast = UseToastOptions\n\nconst Toast: React.FC<any> = (props) => {\n  const { status, variant, id, title, isClosable, onClose, description } = props\n\n  return (\n    <Alert\n      status={status}\n      variant={variant}\n      id={id}\n      alignItems=\"start\"\n      borderRadius=\"md\"\n      boxShadow=\"lg\"\n      paddingRight={8}\n      textAlign=\"left\"\n      width=\"auto\"\n    >\n      <AlertIcon />\n      <chakra.div flex=\"1\">\n        {title && <AlertTitle>{title}</AlertTitle>}\n        {description && (\n          <AlertDescription display=\"block\">{description}</AlertDescription>\n        )}\n      </chakra.div>\n      {isClosable && (\n        <CloseButton\n          size=\"sm\"\n          onClick={onClose}\n          position=\"absolute\"\n          right={1}\n          top={1}\n        />\n      )}\n    </Alert>\n  )\n}\n\nconst defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\",\n} as const\n\nexport type CreateStandAloneToastParam = Partial<\n  {\n    setColorMode: (value: ColorMode) => void\n  } & ReturnType<typeof useChakra> & { defaultOptions: UseToastOptions }\n>\n\nexport const defaultStandaloneParam: Required<CreateStandAloneToastParam> = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: noop,\n  setColorMode: noop,\n  defaultOptions: defaults,\n}\n/**\n * Create a toast from outside of React Components\n */\nexport function createStandaloneToast({\n  theme = defaultStandaloneParam.theme,\n  colorMode = defaultStandaloneParam.colorMode,\n  toggleColorMode = defaultStandaloneParam.toggleColorMode,\n  setColorMode = defaultStandaloneParam.setColorMode,\n  defaultOptions = defaultStandaloneParam.defaultOptions,\n}: CreateStandAloneToastParam = defaultStandaloneParam) {\n  const renderWithProviders = (\n    props: React.PropsWithChildren<RenderProps>,\n    options: UseToastOptions,\n  ) => (\n    <ThemeProvider theme={theme}>\n      <ColorModeContext.Provider\n        value={{ colorMode, setColorMode, toggleColorMode }}\n      >\n        {isFunction(options.render) ? (\n          options.render(props)\n        ) : (\n          <Toast {...props} {...options} />\n        )}\n      </ColorModeContext.Provider>\n    </ThemeProvider>\n  )\n\n  const toastImpl = (options?: UseToastOptions) => {\n    const opts = { ...defaultOptions, ...options }\n\n    const Message: React.FC<RenderProps> = (props) =>\n      renderWithProviders(props, opts)\n\n    return toast.notify(Message, opts)\n  }\n\n  toastImpl.close = toast.close\n  toastImpl.closeAll = toast.closeAll\n\n  // toasts can only be updated if they have a valid id\n  toastImpl.update = (id: ToastId, options: Omit<UseToastOptions, \"id\">) => {\n    if (!id) return\n\n    const opts = { ...defaultOptions, ...options }\n\n    toast.update(id, {\n      ...opts,\n      message: (props) => renderWithProviders(props, opts),\n    })\n  }\n\n  toastImpl.isActive = toast.isActive\n\n  return toastImpl\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions) {\n  const { theme, setColorMode, toggleColorMode, colorMode } = useChakra()\n  return React.useMemo(\n    () =>\n      createStandaloneToast({\n        theme,\n        colorMode,\n        setColorMode,\n        toggleColorMode,\n        defaultOptions: options,\n      }),\n    [theme, setColorMode, toggleColorMode, colorMode, options],\n  )\n}\n\nexport default useToast\n"]},"metadata":{},"sourceType":"module"}