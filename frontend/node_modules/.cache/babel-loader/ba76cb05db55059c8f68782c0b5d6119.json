{"ast":null,"code":"import { memoizedGet as get } from \"@chakra-ui/utils\";\nimport merge from \"lodash.mergewith\";\nimport { sort } from \"../utils\";\nimport { createMediaQuery, parseResponsiveArray, parseResponsiveObject } from \"./parse-responsive\";\nvar defaultBreakpoints = [40, 52, 64].map(n => n + \"em\");\nexport function createParser(config) {\n  var cache = new Map();\n\n  var parse = props => {\n    var _props$theme, _props$theme$config;\n\n    var styles = {};\n    var shouldSort = false;\n    var isCacheDisabled = (_props$theme = props.theme) == null ? void 0 : (_props$theme$config = _props$theme.config) == null ? void 0 : _props$theme$config.disableStyledSystemCache;\n\n    for (var prop in props) {\n      var _props$theme2;\n\n      if (!config[prop]) continue;\n      var styleFunction = config[prop];\n      var value = props[prop];\n      var theme = (_props$theme2 = props.theme) != null ? _props$theme2 : {};\n      var scale = get(theme, styleFunction.scale, styleFunction.defaults);\n\n      if (typeof value === \"object\") {\n        var bps = !isCacheDisabled && cache.get(\"breakpoints\") || get(theme, \"breakpoints\", defaultBreakpoints);\n        cache.set(\"breakpoints\", bps);\n\n        if (Array.isArray(value)) {\n          var _bps = !isCacheDisabled && cache.get(\"media\") || [null, ...cache.get(\"breakpoints\").map(createMediaQuery)];\n\n          cache.set(\"media\", _bps);\n          var style = parseResponsiveArray({\n            mediaQueries: cache.get(\"media\"),\n            styleFunction,\n            scale,\n            value,\n            props\n          });\n          styles = merge(styles, style);\n          continue;\n        }\n\n        if (value !== null) {\n          var _style = parseResponsiveObject({\n            breakpoints: cache.get(\"breakpoints\"),\n            styleFunction,\n            scale,\n            value,\n            props\n          });\n\n          styles = merge(styles, _style);\n          shouldSort = true;\n        }\n\n        continue;\n      }\n\n      styles = merge({}, styles, styleFunction(value, scale, props));\n    } // sort object-based responsive styles\n\n\n    if (shouldSort) {\n      styles = sort(styles);\n    }\n\n    return styles;\n  };\n\n  parse.config = config;\n  parse.propNames = Object.keys(config);\n  parse.cache = cache;\n  var keys = Object.keys(config).filter(key => key !== \"config\");\n\n  if (keys.length > 1) {\n    keys.forEach(key => {\n      parse[key] = createParser({\n        [key]: config[key]\n      });\n    });\n  }\n\n  return parse;\n}","map":{"version":3,"sources":["../../../src/core/create-parser.ts"],"names":["memoizedGet","defaultBreakpoints","n","cache","parse","props","styles","shouldSort","isCacheDisabled","config","styleFunction","value","theme","scale","get","bps","Array","style","parseResponsiveArray","mediaQueries","merge","parseResponsiveObject","breakpoints","sort","Object","keys","key","createParser"],"mappings":"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","sourcesContent":["import { Dict, memoizedGet as get } from \"@chakra-ui/utils\"\nimport merge from \"lodash.mergewith\"\nimport { sort } from \"../utils\"\nimport {\n  createMediaQuery,\n  parseResponsiveArray,\n  parseResponsiveObject,\n} from \"./parse-responsive\"\nimport { PropConfig } from \"./types\"\n\nconst defaultBreakpoints = [40, 52, 64].map((n) => `${n}em`)\n\nexport function createParser(config: PropConfig) {\n  const cache = new Map<string, any>()\n\n  const parse = (props: Dict) => {\n    let styles: Dict = {}\n    let shouldSort = false\n    const isCacheDisabled = props.theme?.config?.disableStyledSystemCache\n\n    for (const prop in props) {\n      if (!config[prop]) continue\n\n      const styleFunction = config[prop]\n      const value = props[prop]\n      const theme = props.theme ?? {}\n\n      const scale = get(theme, styleFunction.scale, styleFunction.defaults)\n\n      if (typeof value === \"object\") {\n        const bps =\n          (!isCacheDisabled && cache.get(\"breakpoints\")) ||\n          get(theme, \"breakpoints\", defaultBreakpoints)\n\n        cache.set(\"breakpoints\", bps)\n\n        if (Array.isArray(value)) {\n          const bps = (!isCacheDisabled && cache.get(\"media\")) || [\n            null,\n            ...cache.get(\"breakpoints\").map(createMediaQuery),\n          ]\n\n          cache.set(\"media\", bps)\n\n          const style = parseResponsiveArray({\n            mediaQueries: cache.get(\"media\"),\n            styleFunction,\n            scale,\n            value,\n            props,\n          })\n\n          styles = merge(styles, style)\n          continue\n        }\n\n        if (value !== null) {\n          const style = parseResponsiveObject({\n            breakpoints: cache.get(\"breakpoints\"),\n            styleFunction,\n            scale,\n            value,\n            props,\n          })\n          styles = merge(styles, style)\n          shouldSort = true\n        }\n        continue\n      }\n      styles = merge({}, styles, styleFunction(value, scale, props))\n    }\n\n    // sort object-based responsive styles\n    if (shouldSort) {\n      styles = sort(styles)\n    }\n\n    return styles\n  }\n\n  parse.config = config\n  parse.propNames = Object.keys(config)\n  parse.cache = cache\n\n  const keys = Object.keys(config).filter((key) => key !== \"config\")\n\n  if (keys.length > 1) {\n    keys.forEach((key) => {\n      parse[key] = createParser({ [key]: config[key] })\n    })\n  }\n\n  return parse\n}\n"]},"metadata":{},"sourceType":"module"}