{"ast":null,"code":"/**\n * Given an array of toasts for a specific position.\n * It returns the toast that matches the `id` passed\n */\nexport var findById = (arr, id) => arr.find(toast => toast.id === id);\n/**\n * Given the toast manager state, finds the toast that matches\n * the id and return its position and index\n */\n\nexport function findToast(toasts, id) {\n  var position = getToastPosition(toasts, id);\n  var index = position ? toasts[position].findIndex(toast => toast.id === id) : -1;\n  return {\n    position,\n    index\n  };\n}\n/**\n * Given the toast manager state, finds the position of the toast that\n * matches the `id`\n */\n\nexport var getToastPosition = (toasts, id) => {\n  var _Object$values$flat$f;\n\n  return (_Object$values$flat$f = Object.values(toasts).flat().find(toast => toast.id === id)) == null ? void 0 : _Object$values$flat$f.position;\n};\n/**\n * Given the toast manager state, checks if a specific toast is\n * still in the state, which means it is still visible on screen.\n */\n\nexport var isVisible = (toasts, id) => !!getToastPosition(toasts, id);\n/**\n * Get's the styles to be applied to a toast's container\n * based on its position in the manager\n */\n\nexport function getToastStyle(position) {\n  var isRighty = position.includes(\"right\");\n  var isLefty = position.includes(\"left\");\n  var alignItems = \"center\";\n  if (isRighty) alignItems = \"flex-end\";\n  if (isLefty) alignItems = \"flex-start\";\n  return {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems\n  };\n}","map":{"version":3,"sources":["../../src/toast.utils.ts"],"names":["findById","arr","toast","position","getToastPosition","index","toasts","Object","isVisible","isRighty","isLefty","alignItems","display","flexDirection"],"mappings":"AAEA;AACA;AACA;AACA;AACA,OAAO,IAAMA,QAAQ,GAAG,CAAA,GAAA,EAAA,EAAA,KACtBC,GAAG,CAAHA,IAAAA,CAAUC,KAAD,IAAWA,KAAK,CAALA,EAAAA,KADf,EACLD,CADK;AAGP;AACA;AACA;AACA;;AACA,OAAO,SAAA,SAAA,CAAA,MAAA,EAAA,EAAA,EAAoD;AACzD,MAAME,QAAQ,GAAGC,gBAAgB,CAAA,MAAA,EAAjC,EAAiC,CAAjC;AAEA,MAAMC,KAAK,GAAGF,QAAQ,GAClBG,MAAM,CAANA,QAAM,CAANA,CAAAA,SAAAA,CAA4BJ,KAAD,IAAWA,KAAK,CAALA,EAAAA,KADpB,EAClBI,CADkB,GAElB,CAFJ,CAAA;AAIA,SAAO;AAAA,IAAA,QAAA;AAELD,IAAAA;AAFK,GAAP;AAID;AAED;AACA;AACA;AACA;;AACA,OAAO,IAAMD,gBAAgB,GAAG,CAAA,MAAA,EAAA,EAAA,KAAA;AAAA,MAAA,qBAAA;;AAAA,SAAA,CAAA,qBAAA,GAC9BG,MAAM,CAANA,MAAAA,CAAAA,MAAAA,EAAAA,IAAAA,GAAAA,IAAAA,CAESL,KAAD,IAAWA,KAAK,CAALA,EAAAA,KAHW,EAC9BK,CAD8B,KAAA,IAAA,GAAA,KAAA,CAAA,GAC9BA,qBAAAA,CAD8B,QAAA;AAAzB,CAAA;AAKP;AACA;AACA;AACA;;AACA,OAAO,IAAMC,SAAS,GAAG,CAAA,MAAA,EAAA,EAAA,KACvB,CAAC,CAACJ,gBAAgB,CAAA,MAAA,EADb,EACa,CADb;AAGP;AACA;AACA;AACA;;AACA,OAAO,SAAA,aAAA,CAAA,QAAA,EAAqE;AAC1E,MAAMK,QAAQ,GAAGN,QAAQ,CAARA,QAAAA,CAAjB,OAAiBA,CAAjB;AACA,MAAMO,OAAO,GAAGP,QAAQ,CAARA,QAAAA,CAAhB,MAAgBA,CAAhB;AAEA,MAAIQ,UAAU,GAAd,QAAA;AACA,MAAA,QAAA,EAAcA,UAAU,GAAVA,UAAAA;AACd,MAAA,OAAA,EAAaA,UAAU,GAAVA,YAAAA;AAEb,SAAO;AACLC,IAAAA,OAAO,EADF,MAAA;AAELC,IAAAA,aAAa,EAFR,QAAA;AAGLF,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["import { ToastPosition, ToastOptions, ToastState, ToastId } from \"./toast.types\"\n\n/**\n * Given an array of toasts for a specific position.\n * It returns the toast that matches the `id` passed\n */\nexport const findById = (arr: ToastOptions[], id: ToastId) =>\n  arr.find((toast) => toast.id === id)\n\n/**\n * Given the toast manager state, finds the toast that matches\n * the id and return its position and index\n */\nexport function findToast(toasts: ToastState, id: ToastId) {\n  const position = getToastPosition(toasts, id)\n\n  const index = position\n    ? toasts[position].findIndex((toast) => toast.id === id)\n    : -1\n\n  return {\n    position,\n    index,\n  }\n}\n\n/**\n * Given the toast manager state, finds the position of the toast that\n * matches the `id`\n */\nexport const getToastPosition = (toasts: ToastState, id: ToastId) =>\n  Object.values(toasts)\n    .flat()\n    .find((toast) => toast.id === id)?.position\n\n/**\n * Given the toast manager state, checks if a specific toast is\n * still in the state, which means it is still visible on screen.\n */\nexport const isVisible = (toasts: ToastState, id: ToastId) =>\n  !!getToastPosition(toasts, id)\n\n/**\n * Get's the styles to be applied to a toast's container\n * based on its position in the manager\n */\nexport function getToastStyle(position: ToastPosition): React.CSSProperties {\n  const isRighty = position.includes(\"right\")\n  const isLefty = position.includes(\"left\")\n\n  let alignItems = \"center\"\n  if (isRighty) alignItems = \"flex-end\"\n  if (isLefty) alignItems = \"flex-start\"\n\n  return {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}