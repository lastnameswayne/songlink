{"ast":null,"code":"import * as React from \"react\";\nimport { createContext, __DEV__ } from \"@chakra-ui/utils\";\nimport { useSafeLayoutEffect, useForceUpdate } from \"@chakra-ui/hooks\";\nvar [PortalManagerContextProvider, usePortalManager] = createContext({\n  strict: false,\n  name: \"PortalManagerContext\"\n});\nexport { usePortalManager };\n/**\n * PortalManager\n *\n * Used to manage multiple portals within an application.\n * It must be render only once, at the root of your application.\n *\n * Inspired by BaseWeb's LayerManager component\n */\n\nexport var PortalManager = props => {\n  var {\n    children,\n    zIndex\n  } = props;\n  /**\n   * The element that wraps the stacked layers\n   */\n\n  var ref = React.useRef(null);\n  var forceUpdate = useForceUpdate();\n  /**\n   * force an update on mount so the Provider works correctly\n   */\n\n  useSafeLayoutEffect(() => {\n    forceUpdate();\n  }, []);\n  /**\n   * let's detect if use has mutiple instances of this component\n   */\n\n  var parentManager = usePortalManager();\n  var context = {\n    node: (parentManager == null ? void 0 : parentManager.node) || ref.current,\n    zIndex\n  };\n  return /*#__PURE__*/React.createElement(PortalManagerContextProvider, {\n    value: context\n  }, children, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chakra-portal-manager\",\n    ref: ref\n  }));\n};\n\nif (__DEV__) {\n  PortalManager.displayName = \"PortalManager\";\n}","map":{"version":3,"sources":["../../src/portal-manager.tsx"],"names":["createContext","strict","name","PortalManager","props","zIndex","ref","React","forceUpdate","useForceUpdate","useSafeLayoutEffect","parentManager","usePortalManager","context","node"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,aAAA,EAAA,OAAA,QAAA,kBAAA;AACA,SAAA,mBAAA,EAAA,cAAA,QAAA,kBAAA;AAOA,IAAM,CAAA,4BAAA,EAAA,gBAAA,IAAmDA,aAAa,CAEpE;AACAC,EAAAA,MAAM,EADN,KAAA;AAEAC,EAAAA,IAAI,EAAE;AAFN,CAFoE,CAAtE;AAOA,SAAA,gBAAA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,aAA2C,GAAIC,KAAD,IAAW;AACpE,MAAM;AAAA,IAAA,QAAA;AAAYC,IAAAA;AAAZ,MAAN,KAAA;AAEA;AACF;AACA;;AACE,MAAMC,GAAG,GAAGC,KAAK,CAALA,MAAAA,CAAZ,IAAYA,CAAZ;AAEA,MAAMC,WAAW,GAAGC,cAApB,EAAA;AAEA;AACF;AACA;;AACEC,EAAAA,mBAAmB,CAAC,MAAM;AACxBF,IAAAA,WAAW;AADM,GAAA,EAAnBE,EAAmB,CAAnBA;AAIA;AACF;AACA;;AACE,MAAMC,aAAa,GAAGC,gBAAtB,EAAA;AAEA,MAAMC,OAAO,GAAG;AACdC,IAAAA,IAAI,EAAE,CAAA,aAAa,IAAb,IAAA,GAAA,KAAA,CAAA,GAAA,aAAa,CAAb,IAAA,KAAuBR,GAAG,CADlB,OAAA;AAEdD,IAAAA;AAFc,GAAhB;AAKA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,4BAAA,EAAA;AAA8B,IAAA,KAAK,EAAEQ;AAArC,GAAA,EAAA,QAAA,EAAA,aAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAd,uBAAA;AAAuC,IAAA,GAAG,EAAEP;AAA5C,GAAA,CAFF,CADF;AA3BK,CAAA;;AAmCP,IAAA,OAAA,EAAa;AACXH,EAAAA,aAAa,CAAbA,WAAAA,GAAAA,eAAAA;AACD","sourcesContent":["import * as React from \"react\"\nimport { createContext, __DEV__ } from \"@chakra-ui/utils\"\nimport { useSafeLayoutEffect, useForceUpdate } from \"@chakra-ui/hooks\"\n\ninterface PortalManagerContext {\n  node: HTMLElement\n  zIndex?: number\n}\n\nconst [PortalManagerContextProvider, usePortalManager] = createContext<\n  PortalManagerContext\n>({\n  strict: false,\n  name: \"PortalManagerContext\",\n})\n\nexport { usePortalManager }\n\nexport interface PortalManagerProps {\n  /**\n   * Child elements of the Portal manager\n   * Ideally, it should be at the top-level\n   * of your application\n   */\n  children?: React.ReactNode\n  /**\n   * [Z-Index war] If your has multiple elements\n   * with z-index clashing, you might need to\n   * apply a z-index to the Portal manager\n   */\n  zIndex?: number\n}\n\n/**\n * PortalManager\n *\n * Used to manage multiple portals within an application.\n * It must be render only once, at the root of your application.\n *\n * Inspired by BaseWeb's LayerManager component\n */\nexport const PortalManager: React.FC<PortalManagerProps> = (props) => {\n  const { children, zIndex } = props\n\n  /**\n   * The element that wraps the stacked layers\n   */\n  const ref = React.useRef<HTMLDivElement>(null)\n\n  const forceUpdate = useForceUpdate()\n\n  /**\n   * force an update on mount so the Provider works correctly\n   */\n  useSafeLayoutEffect(() => {\n    forceUpdate()\n  }, [])\n\n  /**\n   * let's detect if use has mutiple instances of this component\n   */\n  const parentManager = usePortalManager()\n\n  const context = {\n    node: parentManager?.node || ref.current,\n    zIndex,\n  }\n\n  return (\n    <PortalManagerContextProvider value={context}>\n      {children}\n      <div className=\"chakra-portal-manager\" ref={ref} />\n    </PortalManagerContextProvider>\n  )\n}\n\nif (__DEV__) {\n  PortalManager.displayName = \"PortalManager\"\n}\n"]},"metadata":{},"sourceType":"module"}