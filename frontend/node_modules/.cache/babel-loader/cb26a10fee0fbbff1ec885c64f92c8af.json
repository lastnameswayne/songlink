{"ast":null,"code":"import defaultTheme from \"@chakra-ui/theme\";\nimport { isFunction, mergeWith } from \"@chakra-ui/utils\";\n/**\n * Function to override or customize the Chakra UI theme conveniently\n * @param overrides - Your custom theme object overrides\n * @param baseTheme - theme to customize\n */\n\nexport function extendTheme(overrides, baseTheme) {\n  if (baseTheme === void 0) {\n    baseTheme = defaultTheme;\n  }\n\n  function customizer(source, override) {\n    if (isFunction(source)) {\n      return function () {\n        var sourceValue = source(...arguments);\n        var overrideValue = isFunction(override) ? override(...arguments) : override;\n        return mergeWith({}, sourceValue, overrideValue, customizer);\n      };\n    } // fallback to default behaviour\n\n\n    return undefined;\n  }\n\n  return mergeWith({}, baseTheme, overrides, customizer);\n}","map":{"version":3,"sources":["../../src/extend-theme.ts"],"names":["baseTheme","defaultTheme","isFunction","sourceValue","source","overrideValue","override","mergeWith"],"mappings":"AAAA,OAAA,YAAA,MAAA,kBAAA;AACA,SAAA,UAAA,EAAA,SAAA,QAAA,kBAAA;AAwBA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,WAAA,CAAA,SAAA,EAAA,SAAA,EAGL;AAAA,MADAA,SACA,KAAA,KAAA,CAAA,EAAA;AADAA,IAAAA,SACA,GADiBC,YAAjBD;AACA;;AACA,WAAA,UAAA,CAAA,MAAA,EAAA,QAAA,EAAwD;AACtD,QAAIE,UAAU,CAAd,MAAc,CAAd,EAAwB;AACtB,aAAO,YAAwB;AAC7B,YAAMC,WAAW,GAAGC,MAAM,CAAC,GAA3B,SAA0B,CAA1B;AAEA,YAAMC,aAAa,GAAGH,UAAU,CAAVA,QAAU,CAAVA,GAClBI,QAAQ,CAAC,GADSJ,SACV,CADUA,GAAtB,QAAA;AAIA,eAAOK,SAAS,CAAA,EAAA,EAAA,WAAA,EAAA,aAAA,EAAhB,UAAgB,CAAhB;AAPF,OAAA;AAFoD,KAAA,CAatD;;;AACA,WAAA,SAAA;AACD;;AAED,SAAOA,SAAS,CAAA,EAAA,EAAA,SAAA,EAAA,SAAA,EAAhB,UAAgB,CAAhB;AACD","sourcesContent":["import defaultTheme, { Theme } from \"@chakra-ui/theme\"\nimport { isFunction, mergeWith } from \"@chakra-ui/utils\"\nimport { ColorHues } from \"@chakra-ui/theme/dist/types/foundations/colors\"\n\ntype ThemeExtensionTypeHints = {\n  colors: Record<string, Partial<ColorHues> | Record<string, string> | string> // typehints for color definitions\n}\n\n/**\n * Represents a loose but specific type for the theme override.\n * It provides autocomplete hints for extending the theme, but leaves room\n * for adding properties.\n */\ntype DeepThemeExtension<ThemeObject, TypeHints> = {\n  [Key in keyof ThemeObject]?:\n    | Omit<DeepThemeExtension<ThemeObject[Key], TypeHints>, keyof TypeHints> // recursive type clone\n    | (ThemeObject[Key] extends (...args: any[]) => any\n        ? Partial<ReturnType<ThemeObject[Key]>>\n        : Partial<ThemeObject[Key]>) // allow function or object\n} &\n  Partial<TypeHints> &\n  Record<string, any> // escape hatch\n\nexport type ThemeOverride = DeepThemeExtension<Theme, ThemeExtensionTypeHints>\n\n/**\n * Function to override or customize the Chakra UI theme conveniently\n * @param overrides - Your custom theme object overrides\n * @param baseTheme - theme to customize\n */\nexport function extendTheme<T extends ThemeOverride>(\n  overrides: T,\n  baseTheme: any = defaultTheme,\n) {\n  function customizer(source: unknown, override: unknown) {\n    if (isFunction(source)) {\n      return (...args: unknown[]) => {\n        const sourceValue = source(...args)\n\n        const overrideValue = isFunction(override)\n          ? override(...args)\n          : override\n\n        return mergeWith({}, sourceValue, overrideValue, customizer)\n      }\n    }\n\n    // fallback to default behaviour\n    return undefined\n  }\n\n  return mergeWith({}, baseTheme, overrides, customizer)\n}\n"]},"metadata":{},"sourceType":"module"}