{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useRadioGroup } from \"./use-radio-group\";\nvar [RadioGroupProvider, useRadioGroupContext] = createContext({\n  name: \"RadioGroupContext\",\n  strict: false\n});\nexport { useRadioGroupContext };\n/**\n * Used for multiple radios which are bound in one group,\n * and it indicates which option is selected.\n *\n * @see Docs https://chakra-ui.com/docs/form/radio\n */\n\nexport var RadioGroup = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    colorScheme,\n    size,\n    variant,\n    children,\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"colorScheme\", \"size\", \"variant\", \"children\", \"className\"]);\n\n  var {\n    value,\n    onChange,\n    getRootProps,\n    name,\n    htmlProps\n  } = useRadioGroup(rest);\n  var group = React.useMemo(() => ({\n    name,\n    size,\n    onChange,\n    colorScheme,\n    value,\n    variant\n  }), [size, name, onChange, colorScheme, value, variant]);\n  var groupProps = getRootProps(htmlProps, ref);\n\n  var _className = cx(\"chakra-radio-group\", className);\n\n  return /*#__PURE__*/React.createElement(RadioGroupProvider, {\n    value: group\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({}, groupProps, {\n    className: _className\n  }), children));\n});\n\nif (__DEV__) {\n  RadioGroup.displayName = \"RadioGroup\";\n}","map":{"version":3,"sources":["../../src/radio-group.tsx"],"names":["createContext","name","strict","RadioGroup","forwardRef","className","rest","htmlProps","useRadioGroup","group","variant","groupProps","getRootProps","_className","cx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,EAAA,UAAA,QAAA,mBAAA;AAMA,SAAA,aAAA,EAAA,EAAA,EAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,aAAA,QAAA,mBAAA;AAUA,IAAM,CAAA,kBAAA,EAAA,oBAAA,IAA6CA,aAAa,CAE9D;AACAC,EAAAA,IAAI,EADJ,mBAAA;AAEAC,EAAAA,MAAM,EAAE;AAFR,CAF8D,CAAhE;AAOA,SAAA,oBAAA;AAeA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,UAAU,GAAA,aAAGC,UAAU,CAAyB,CAAA,KAAA,EAAA,GAAA,KAAgB;AAC3E,MAAM;AAAA,IAAA,WAAA;AAAA,IAAA,IAAA;AAAA,IAAA,OAAA;AAAA,IAAA,QAAA;AAAwCC,IAAAA;AAAxC,MAAN,KAAA;AAAA,MAA4DC,IAA5D,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,aAAA,EAAA,MAAA,EAAA,SAAA,EAAA,UAAA,EAAA,WAAA,CAAA,CAAA;;AAEA,MAAM;AAAA,IAAA,KAAA;AAAA,IAAA,QAAA;AAAA,IAAA,YAAA;AAAA,IAAA,IAAA;AAAuCC,IAAAA;AAAvC,MAAqDC,aAAa,CAAxE,IAAwE,CAAxE;AAEA,MAAMC,KAAK,GAAG,KAAK,CAAL,OAAA,CACZ,OAAO;AAAA,IAAA,IAAA;AAAA,IAAA,IAAA;AAAA,IAAA,QAAA;AAAA,IAAA,WAAA;AAAA,IAAA,KAAA;AAMLC,IAAAA;AANK,GAAP,CADY,EASZ,CAAA,IAAA,EAAA,IAAA,EAAA,QAAA,EAAA,WAAA,EAAA,KAAA,EATF,OASE,CATY,CAAd;AAYA,MAAMC,UAAU,GAAGC,YAAY,CAAA,SAAA,EAA/B,GAA+B,CAA/B;;AACA,MAAMC,UAAU,GAAGC,EAAE,CAAA,oBAAA,EAArB,SAAqB,CAArB;;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,kBAAA,EAAA;AAAoB,IAAA,KAAK,EAAEL;AAA3B,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,GAAA,EAAA,QAAA,CAAA,EAAA,EAAA,UAAA,EAAA;AAA4B,IAAA,SAAS,EAAEI;AAAvC,GAAA,CAAA,EAFJ,QAEI,CADF,CADF;AApBK,CAA6B,CAA7B;;AA6BP,IAAA,OAAA,EAAa;AACXV,EAAAA,UAAU,CAAVA,WAAAA,GAAAA,YAAAA;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  useRadioGroup,\n  UseRadioGroupProps,\n  UseRadioGroupReturn,\n} from \"./use-radio-group\"\n\nexport interface RadioGroupContext\n  extends Pick<UseRadioGroupReturn, \"onChange\" | \"value\" | \"name\">,\n    Omit<ThemingProps, \"orientation\"> {}\n\nconst [RadioGroupProvider, useRadioGroupContext] = createContext<\n  RadioGroupContext\n>({\n  name: \"RadioGroupContext\",\n  strict: false,\n})\n\nexport { useRadioGroupContext }\n\ntype Omitted =\n  | \"onChange\"\n  | \"value\"\n  | \"defaultValue\"\n  | \"defaultChecked\"\n  | \"children\"\nexport interface RadioGroupProps\n  extends UseRadioGroupProps,\n    Omit<HTMLChakraProps<\"div\">, Omitted>,\n    Omit<ThemingProps, \"orientation\"> {\n  children: React.ReactNode\n}\n\n/**\n * Used for multiple radios which are bound in one group,\n * and it indicates which option is selected.\n *\n * @see Docs https://chakra-ui.com/docs/form/radio\n */\nexport const RadioGroup = forwardRef<RadioGroupProps, \"div\">((props, ref) => {\n  const { colorScheme, size, variant, children, className, ...rest } = props\n\n  const { value, onChange, getRootProps, name, htmlProps } = useRadioGroup(rest)\n\n  const group = React.useMemo(\n    () => ({\n      name,\n      size,\n      onChange,\n      colorScheme,\n      value,\n      variant,\n    }),\n    [size, name, onChange, colorScheme, value, variant],\n  )\n\n  const groupProps = getRootProps(htmlProps, ref)\n  const _className = cx(\"chakra-radio-group\", className)\n\n  return (\n    <RadioGroupProvider value={group}>\n      <chakra.div {...groupProps} className={_className}>\n        {children}\n      </chakra.div>\n    </RadioGroupProvider>\n  )\n})\n\nif (__DEV__) {\n  RadioGroup.displayName = \"RadioGroup\"\n}\n"]},"metadata":{},"sourceType":"module"}