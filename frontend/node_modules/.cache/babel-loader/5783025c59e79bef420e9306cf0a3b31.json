{"ast":null,"code":"import { createParser, system } from \"../core\";\nimport { t } from \"../utils\";\nvar config = {\n  width: t.sizesT(\"width\"),\n  inlineSize: t.sizesT(\"inlineSize\"),\n  height: t.sizes(\"height\"),\n  blockSize: t.sizes(\"blockSize\"),\n  boxSize: t.sizes([\"width\", \"height\"]),\n  minWidth: t.sizes(\"minWidth\"),\n  minInlineSize: t.sizes(\"minInlineSize\"),\n  minHeight: t.sizes(\"minHeight\"),\n  minBlockSize: t.sizes(\"minBlockSize\"),\n  maxWidth: t.sizes(\"maxWidth\"),\n  maxInlineSize: t.sizes(\"maxInlineSize\"),\n  maxHeight: t.sizes(\"maxHeight\"),\n  maxBlockSize: t.sizes(\"maxBlockSize\"),\n  d: t.prop(\"display\"),\n  overflow: true,\n  overflowX: true,\n  overflowY: true,\n  display: true,\n  verticalAlign: true,\n  boxSizing: true\n};\nconfig.w = config.width;\nconfig.h = config.height;\nconfig.minW = config.minWidth;\nconfig.maxW = config.maxWidth;\nconfig.minH = config.minHeight;\nconfig.maxH = config.maxHeight;\n/**\n * Types for layout related CSS properties\n */\n\nexport var layout = system(config);\nexport var layoutParser = createParser(config);","map":{"version":3,"sources":["../../../src/config/layout.ts"],"names":["config","width","t","inlineSize","height","blockSize","boxSize","minWidth","minInlineSize","minHeight","minBlockSize","maxWidth","maxInlineSize","maxHeight","maxBlockSize","d","overflow","overflowX","overflowY","display","verticalAlign","boxSizing","layout","system","layoutParser","createParser"],"mappings":"AACA,SAAA,YAAA,EAAA,MAAA,QAAA,SAAA;AACA,SAAA,CAAA,QAAA,UAAA;AAEA,IAAMA,MAAc,GAAG;AACrBC,EAAAA,KAAK,EAAEC,CAAC,CAADA,MAAAA,CADc,OACdA,CADc;AAErBC,EAAAA,UAAU,EAAED,CAAC,CAADA,MAAAA,CAFS,YAETA,CAFS;AAGrBE,EAAAA,MAAM,EAAEF,CAAC,CAADA,KAAAA,CAHa,QAGbA,CAHa;AAIrBG,EAAAA,SAAS,EAAEH,CAAC,CAADA,KAAAA,CAJU,WAIVA,CAJU;AAKrBI,EAAAA,OAAO,EAAEJ,CAAC,CAADA,KAAAA,CAAQ,CAAA,OAAA,EALI,QAKJ,CAARA,CALY;AAMrBK,EAAAA,QAAQ,EAAEL,CAAC,CAADA,KAAAA,CANW,UAMXA,CANW;AAOrBM,EAAAA,aAAa,EAAEN,CAAC,CAADA,KAAAA,CAPM,eAONA,CAPM;AAQrBO,EAAAA,SAAS,EAAEP,CAAC,CAADA,KAAAA,CARU,WAQVA,CARU;AASrBQ,EAAAA,YAAY,EAAER,CAAC,CAADA,KAAAA,CATO,cASPA,CATO;AAUrBS,EAAAA,QAAQ,EAAET,CAAC,CAADA,KAAAA,CAVW,UAUXA,CAVW;AAWrBU,EAAAA,aAAa,EAAEV,CAAC,CAADA,KAAAA,CAXM,eAWNA,CAXM;AAYrBW,EAAAA,SAAS,EAAEX,CAAC,CAADA,KAAAA,CAZU,WAYVA,CAZU;AAarBY,EAAAA,YAAY,EAAEZ,CAAC,CAADA,KAAAA,CAbO,cAaPA,CAbO;AAcrBa,EAAAA,CAAC,EAAEb,CAAC,CAADA,IAAAA,CAdkB,SAclBA,CAdkB;AAerBc,EAAAA,QAAQ,EAfa,IAAA;AAgBrBC,EAAAA,SAAS,EAhBY,IAAA;AAiBrBC,EAAAA,SAAS,EAjBY,IAAA;AAkBrBC,EAAAA,OAAO,EAlBc,IAAA;AAmBrBC,EAAAA,aAAa,EAnBQ,IAAA;AAoBrBC,EAAAA,SAAS,EAAE;AApBU,CAAvB;AAuBArB,MAAM,CAANA,CAAAA,GAAWA,MAAM,CAAjBA,KAAAA;AACAA,MAAM,CAANA,CAAAA,GAAWA,MAAM,CAAjBA,MAAAA;AACAA,MAAM,CAANA,IAAAA,GAAcA,MAAM,CAApBA,QAAAA;AACAA,MAAM,CAANA,IAAAA,GAAcA,MAAM,CAApBA,QAAAA;AACAA,MAAM,CAANA,IAAAA,GAAcA,MAAM,CAApBA,SAAAA;AACAA,MAAM,CAANA,IAAAA,GAAcA,MAAM,CAApBA,SAAAA;AAEA;AACA;AACA;;AA0FA,OAAO,IAAMsB,MAAM,GAAGC,MAAM,CAArB,MAAqB,CAArB;AACP,OAAO,IAAMC,YAAY,GAAGC,YAAY,CAAjC,MAAiC,CAAjC","sourcesContent":["import * as CSS from \"csstype\"\nimport { Config, createParser, system } from \"../core\"\nimport { Length, ResponsiveValue, t } from \"../utils\"\n\nconst config: Config = {\n  width: t.sizesT(\"width\"),\n  inlineSize: t.sizesT(\"inlineSize\"),\n  height: t.sizes(\"height\"),\n  blockSize: t.sizes(\"blockSize\"),\n  boxSize: t.sizes([\"width\", \"height\"]),\n  minWidth: t.sizes(\"minWidth\"),\n  minInlineSize: t.sizes(\"minInlineSize\"),\n  minHeight: t.sizes(\"minHeight\"),\n  minBlockSize: t.sizes(\"minBlockSize\"),\n  maxWidth: t.sizes(\"maxWidth\"),\n  maxInlineSize: t.sizes(\"maxInlineSize\"),\n  maxHeight: t.sizes(\"maxHeight\"),\n  maxBlockSize: t.sizes(\"maxBlockSize\"),\n  d: t.prop(\"display\"),\n  overflow: true,\n  overflowX: true,\n  overflowY: true,\n  display: true,\n  verticalAlign: true,\n  boxSizing: true,\n}\n\nconfig.w = config.width\nconfig.h = config.height\nconfig.minW = config.minWidth\nconfig.maxW = config.maxWidth\nconfig.minH = config.minHeight\nconfig.maxH = config.maxHeight\n\n/**\n * Types for layout related CSS properties\n */\nexport interface LayoutProps {\n  /**\n   * The CSS `display` property\n   */\n  display?: ResponsiveValue<CSS.Property.Display>\n  /**\n   * The CSS `display` property\n   */\n  d?: ResponsiveValue<CSS.Property.Display>\n  /**\n   * The CSS `width` property\n   */\n  width?: ResponsiveValue<CSS.Property.Width<Length>>\n  /**\n   * The CSS `width` property\n   */\n  w?: ResponsiveValue<CSS.Property.Width<Length>>\n  inlineSize?: ResponsiveValue<CSS.Property.InlineSize<Length>>\n  /**\n   * The CSS `width` and `height` property\n   */\n  boxSize?: ResponsiveValue<CSS.Property.Width<Length>>\n  /**\n   * The CSS `max-width` property\n   */\n  maxWidth?: ResponsiveValue<CSS.Property.MaxWidth<Length>>\n  /**\n   * The CSS `max-width` property\n   */\n  maxW?: ResponsiveValue<CSS.Property.MaxWidth<Length>>\n  maxInlineSize?: ResponsiveValue<CSS.Property.MaxInlineSize<Length>>\n  /**\n   * The CSS `min-width` property\n   */\n  minWidth?: ResponsiveValue<CSS.Property.MinWidth<Length>>\n  /**\n   * The CSS `min-width` property\n   */\n  minW?: ResponsiveValue<CSS.Property.MinWidth<Length>>\n  minInlineSize?: ResponsiveValue<CSS.Property.MinInlineSize<Length>>\n  /**\n   * The CSS `height` property\n   */\n  height?: ResponsiveValue<CSS.Property.Height<Length>>\n  /**\n   * The CSS `height` property\n   */\n  h?: ResponsiveValue<CSS.Property.Height<Length>>\n  blockSize?: ResponsiveValue<CSS.Property.BlockSize<Length>>\n  /**\n   * The CSS `max-height` property\n   */\n  maxHeight?: ResponsiveValue<CSS.Property.MaxHeight<Length>>\n  /**\n   * The CSS `max-height` property\n   */\n  maxH?: ResponsiveValue<CSS.Property.MaxHeight<Length>>\n  maxBlockSize?: ResponsiveValue<CSS.Property.MaxBlockSize<Length>>\n  /**\n   * The CSS `min-height` property\n   */\n  minHeight?: ResponsiveValue<CSS.Property.MinHeight<Length>>\n  /**\n   * The CSS `min-height` property\n   */\n  minH?: ResponsiveValue<CSS.Property.MinHeight<Length>>\n  minBlockSize?: ResponsiveValue<CSS.Property.MinBlockSize<Length>>\n  /**\n   * The CSS `vertical-align` property\n   */\n  verticalAlign?: ResponsiveValue<CSS.Property.VerticalAlign<Length>>\n  /**\n   * The CSS `overflow` property\n   */\n  overflow?: ResponsiveValue<CSS.Property.Overflow>\n  /**\n   * The CSS `overflow-x` property\n   */\n  overflowX?: ResponsiveValue<CSS.Property.OverflowX>\n  /**\n   * The CSS `overflow-y` property\n   */\n  overflowY?: ResponsiveValue<CSS.Property.OverflowY>\n  /**\n   * The CSS `box-sizing` property\n   */\n  boxSizing?: CSS.Property.BoxSizing\n}\n\nexport const layout = system(config)\nexport const layoutParser = createParser(config)\n"]},"metadata":{},"sourceType":"module"}