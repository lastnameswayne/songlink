{"ast":null,"code":"import { useTheme } from \"@chakra-ui/system\";\nimport { arrayToObjectNotation, fromEntries, isArray, isCustomBreakpoint } from \"@chakra-ui/utils\";\nimport { getClosestValue } from \"./media-query.utils\";\nimport { useBreakpoint } from \"./use-breakpoint\";\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\n\nexport function useBreakpointValue(values) {\n  var breakpoint = useBreakpoint();\n  var theme = useTheme();\n  if (!breakpoint) return undefined;\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   */\n\n  var breakpoints = Object.keys(theme.breakpoints).filter(isCustomBreakpoint);\n  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(_ref => {\n    var [key, value] = _ref;\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}","map":{"version":3,"sources":["../../src/use-breakpoint-value.ts"],"names":["breakpoint","useBreakpoint","theme","useTheme","breakpoints","Object","obj","fromEntries","arrayToObjectNotation","getClosestValue"],"mappings":"AAAA,SAAA,QAAA,QAAA,mBAAA;AACA,SAAA,qBAAA,EAAA,WAAA,EAAA,OAAA,EAAA,kBAAA,QAAA,kBAAA;AAMA,SAAA,eAAA,QAAA,qBAAA;AACA,SAAA,aAAA,QAAA,kBAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,kBAAA,CAAA,MAAA,EAEU;AACf,MAAMA,UAAU,GAAGC,aAAnB,EAAA;AACA,MAAMC,KAAK,GAAGC,QAAd,EAAA;AAEA,MAAI,CAAJ,UAAA,EAAiB,OAAA,SAAA;AAEjB;AACF;AACA;;AACE,MAAMC,WAAW,GAAGC,MAAM,CAANA,IAAAA,CAAYH,KAAK,CAAjBG,WAAAA,EAAAA,MAAAA,CAApB,kBAAoBA,CAApB;AAEA,MAAMC,GAAG,GAAG,OAAO,CAAP,MAAO,CAAP,GACRC,WAAW,CACT,MAAM,CAAN,OAAA,CACEC,qBAAqB,CAAA,MAAA,EADvB,WACuB,CADvB,EAAA,GAAA,CAEM,IAAA,IAAA;AAAA,QAAC,CAAA,GAAA,EAAD,KAAC,IAAD,IAAA;AAAA,WAAkB,CAAA,GAAA,EAAlB,KAAkB,CAAlB;AAJA,GAEN,CADS,CADH,GAAZ,MAAA;AAQA,SAAOC,eAAe,CAAA,GAAA,EAAA,UAAA,EAAtB,WAAsB,CAAtB;AACD","sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport {\n  arrayToObjectNotation,\n  fromEntries,\n  isArray,\n  isCustomBreakpoint,\n} from \"@chakra-ui/utils\"\nimport { getClosestValue } from \"./media-query.utils\"\nimport { useBreakpoint } from \"./use-breakpoint\"\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\nexport function useBreakpointValue<T = any>(\n  values: Record<string, T> | T[],\n): T | undefined {\n  const breakpoint = useBreakpoint()\n  const theme = useTheme()\n\n  if (!breakpoint) return undefined\n\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   */\n  const breakpoints = Object.keys(theme.breakpoints).filter(isCustomBreakpoint)\n\n  const obj = isArray(values)\n    ? fromEntries<Record<string, T>>(\n        Object.entries(\n          arrayToObjectNotation(values, breakpoints),\n        ).map(([key, value]) => [key, value]),\n      )\n    : values\n\n  return getClosestValue(obj, breakpoint, breakpoints)\n}\n"]},"metadata":{},"sourceType":"module"}