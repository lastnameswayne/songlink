{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useBoolean, useControllableProp } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, dataAttr, mergeRefs, pick, warn } from \"@chakra-ui/utils\";\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { useCallback, useRef, useState } from \"react\";\nimport { useFormControl } from \"@chakra-ui/form-control\";\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\n\nexport function useRadio(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isInvalid,\n    name,\n    value\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIsChecked\", \"defaultChecked\", \"isChecked\", \"isFocusable\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"onChange\", \"isInvalid\", \"name\", \"value\", \"id\"]);\n\n  var [isFocused, setFocused] = useBoolean();\n  var [isHovered, setHovering] = useBoolean();\n  var [isActive, setActive] = useBoolean();\n  var ref = useRef(null);\n  var [isCheckedState, setChecked] = useState(Boolean(defaultChecked));\n  var [isControlled, isChecked] = useControllableProp(isCheckedProp, isCheckedState);\n  warn({\n    condition: !!defaultIsChecked,\n    message: 'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' + 'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.'\n  });\n  var handleChange = useCallback(event => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!isControlled) {\n      setChecked(event.target.checked);\n    }\n\n    onChange == null ? void 0 : onChange(event);\n  }, [isControlled, isDisabled, isReadOnly, onChange]);\n  var onKeyDown = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.on();\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.off();\n    }\n  }, [setActive]);\n  var getCheckboxProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off)\n    });\n  }, [isActive, isHovered, isDisabled, isInvalid, isChecked, isFocused, isReadOnly, setActive.on, setActive.off, setHovering.on, setHovering.off]);\n  var inputProps = useFormControl(props);\n  var getInputProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    var ownProps = pick(inputProps, [\"id\", \"disabled\", \"readOnly\", \"required\", \"aria-invalid\", \"aria-required\", \"aria-readonly\", \"aria-describedby\", \"onFocus\", \"onBlur\"]);\n    var trulyDisabled = ownProps.disabled && !isFocusable;\n    return _extends({}, props, ownProps, {\n      ref: mergeRefs(forwardedRef, ref),\n      type: \"radio\",\n      name,\n      value,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(ownProps.onBlur, props.onBlur, setFocused.off),\n      onFocus: callAllHandlers(ownProps.onFocus, props.onFocus, setFocused.on),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      checked: isChecked,\n      disabled: trulyDisabled,\n      \"aria-disabled\": ariaAttr(trulyDisabled),\n      style: visuallyHiddenStyle\n    });\n  }, [inputProps, isFocusable, name, value, handleChange, setFocused.off, setFocused.on, onKeyDown, onKeyUp, isChecked]);\n\n  var getLabelProps = function getLabelProps(props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref,\n      onMouseDown: callAllHandlers(props.onMouseDown, stop),\n      onTouchStart: callAllHandlers(props.onTouchStart, stop),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  };\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isDisabled,\n      isReadOnly,\n      isRequired\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps\n  };\n}\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\n\nfunction stop(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}","map":{"version":3,"sources":["../../src/use-radio.ts"],"names":["props","defaultChecked","isChecked","value","htmlProps","useBoolean","ref","useRef","useState","Boolean","useControllableProp","warn","condition","message","handleChange","useCallback","event","isReadOnly","setChecked","onChange","onKeyDown","setActive","onKeyUp","getCheckboxProps","dataAttr","onMouseDown","callAllHandlers","onMouseUp","onMouseEnter","setHovering","onMouseLeave","inputProps","useFormControl","getInputProps","forwardedRef","ownProps","pick","trulyDisabled","mergeRefs","type","onBlur","setFocused","onFocus","checked","disabled","ariaAttr","style","visuallyHiddenStyle","getLabelProps","onTouchStart","state","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,UAAA,EAAA,mBAAA,QAAA,kBAAA;AACA,SAAA,QAAA,EAAA,eAAA,EAAA,QAAA,EAAA,SAAA,EAAA,IAAA,EAAA,IAAA,QAAA,kBAAA;AASA,SAAA,mBAAA,QAAA,4BAAA;AACA,SAAA,WAAA,EAAA,MAAA,EAAA,QAAA,QAAA,OAAA;AAOA,SAAA,cAAA,QAAA,yBAAA;AAEA;AACA;AACA;AACA;;AA2DA,OAAO,SAAA,QAAA,CAAA,KAAA,EAA6C;AAAA,MAA3BA,KAA2B,KAAA,KAAA,CAAA,EAAA;AAA3BA,IAAAA,KAA2B,GAAJ,EAAvBA;AAA2B;;AAClD,MAAM;AAAA,IAAA,gBAAA;AAEJC,IAAAA,cAAc,GAFV,gBAAA;AAGJC,IAAAA,SAAS,EAHL,aAAA;AAAA,IAAA,WAAA;AAAA,IAAA,UAAA;AAAA,IAAA,UAAA;AAAA,IAAA,UAAA;AAAA,IAAA,QAAA;AAAA,IAAA,SAAA;AAAA,IAAA,IAAA;AAWJC,IAAAA;AAXI,MAAN,KAAA;AAAA,MAaKC,SAbL,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,kBAAA,EAAA,gBAAA,EAAA,WAAA,EAAA,aAAA,EAAA,YAAA,EAAA,YAAA,EAAA,YAAA,EAAA,UAAA,EAAA,WAAA,EAAA,MAAA,EAAA,OAAA,EAAA,IAAA,CAAA,CAAA;;AAgBA,MAAM,CAAA,SAAA,EAAA,UAAA,IAA0BC,UAAhC,EAAA;AACA,MAAM,CAAA,SAAA,EAAA,WAAA,IAA2BA,UAAjC,EAAA;AACA,MAAM,CAAA,QAAA,EAAA,SAAA,IAAwBA,UAA9B,EAAA;AAEA,MAAMC,GAAG,GAAGC,MAAM,CAAlB,IAAkB,CAAlB;AAEA,MAAM,CAAA,cAAA,EAAA,UAAA,IAA+BC,QAAQ,CAACC,OAAO,CAArD,cAAqD,CAAR,CAA7C;AAEA,MAAM,CAAA,YAAA,EAAA,SAAA,IAA4BC,mBAAmB,CAAA,aAAA,EAArD,cAAqD,CAArD;AAKAC,EAAAA,IAAI,CAAC;AACHC,IAAAA,SAAS,EAAE,CAAC,CADT,gBAAA;AAEHC,IAAAA,OAAO,EACL,8FACA;AAJC,GAAD,CAAJF;AAOA,MAAMG,YAAY,GAAGC,WAAW,CAC7BC,KAAD,IAA0C;AACxC,QAAIC,UAAU,IAAd,UAAA,EAA8B;AAC5BD,MAAAA,KAAK,CAALA,cAAAA;AACA;AACD;;AAED,QAAI,CAAJ,YAAA,EAAmB;AACjBE,MAAAA,UAAU,CAACF,KAAK,CAALA,MAAAA,CAAXE,OAAU,CAAVA;AACD;;AAEDC,IAAAA,QAAQ,IAARA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAQ,CAARA,KAAQ,CAARA;AAX4B,GAAA,EAa9B,CAAA,YAAA,EAAA,UAAA,EAAA,UAAA,EAbF,QAaE,CAb8B,CAAhC;AAgBA,MAAMC,SAAS,GAAGL,WAAW,CAC1BC,KAAD,IAAgC;AAC9B,QAAIA,KAAK,CAALA,GAAAA,KAAJ,GAAA,EAAuB;AACrBK,MAAAA,SAAS,CAATA,EAAAA;AACD;AAJwB,GAAA,EAM3B,CANF,SAME,CAN2B,CAA7B;AASA,MAAMC,OAAO,GAAGP,WAAW,CACxBC,KAAD,IAAgC;AAC9B,QAAIA,KAAK,CAALA,GAAAA,KAAJ,GAAA,EAAuB;AACrBK,MAAAA,SAAS,CAATA,GAAAA;AACD;AAJsB,GAAA,EAMzB,CANF,SAME,CANyB,CAA3B;AASA,MAAME,gBAA4B,GAAGR,WAAW,CAC9C,UAAA,KAAA,EAAA,GAAA,EAAA;AAAA,QAACf,KAAD,KAAA,KAAA,CAAA,EAAA;AAACA,MAAAA,KAAD,GAAA,EAACA;AAAD;;AAAA,QAAaM,GAAb,KAAA,KAAA,CAAA,EAAA;AAAaA,MAAAA,GAAb,GAAA,IAAaA;AAAb;;AAAA,WAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAA,MAAA,GAAA;AAGE,qBAAekB,QAAQ,CAHzB,QAGyB,CAHzB;AAIE,oBAAcA,QAAQ,CAJxB,SAIwB,CAJxB;AAKE,uBAAiBA,QAAQ,CAL3B,UAK2B,CAL3B;AAME,sBAAgBA,QAAQ,CAN1B,SAM0B,CAN1B;AAOE,sBAAgBA,QAAQ,CAP1B,SAO0B,CAP1B;AAQE,oBAAcA,QAAQ,CARxB,SAQwB,CARxB;AASE,uBAAiBA,QAAQ,CAT3B,UAS2B,CAT3B;AAUE,qBAVF,IAAA;AAWEC,MAAAA,WAAW,EAAEC,eAAe,CAAC1B,KAAK,CAAN,WAAA,EAAoBqB,SAAS,CAX3D,EAW8B,CAX9B;AAYEM,MAAAA,SAAS,EAAED,eAAe,CAAC1B,KAAK,CAAN,SAAA,EAAkBqB,SAAS,CAZvD,GAY4B,CAZ5B;AAaEO,MAAAA,YAAY,EAAEF,eAAe,CAAC1B,KAAK,CAAN,YAAA,EAAqB6B,WAAW,CAb/D,EAa+B,CAb/B;AAcEC,MAAAA,YAAY,EAAEJ,eAAe,CAAC1B,KAAK,CAAN,YAAA,EAAqB6B,WAAW,CAAhC,GAAA;AAd/B,KAAA,CAAA;AAD8C,GAAA,EAiB9C,CAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAA,SAAA,EAAA,SAAA,EAAA,SAAA,EAAA,UAAA,EAQER,SAAS,CARX,EAAA,EASEA,SAAS,CATX,GAAA,EAUEQ,WAAW,CAVb,EAAA,EAWEA,WAAW,CA5Bf,GAiBE,CAjB8C,CAAhD;AAgCA,MAAME,UAAU,GAAGC,cAAc,CAAjC,KAAiC,CAAjC;AAEA,MAAMC,aAA2C,GAAGlB,WAAW,CAC7D,UAAA,KAAA,EAAA,YAAA,EAAqC;AAAA,QAApCf,KAAoC,KAAA,KAAA,CAAA,EAAA;AAApCA,MAAAA,KAAoC,GAA5B,EAARA;AAAoC;;AAAA,QAAxBkC,YAAwB,KAAA,KAAA,CAAA,EAAA;AAAxBA,MAAAA,YAAwB,GAAT,IAAfA;AAAwB;;AACnC,QAAMC,QAAQ,GAAGC,IAAI,CAAA,UAAA,EAAa,CAAA,IAAA,EAAA,UAAA,EAAA,UAAA,EAAA,UAAA,EAAA,cAAA,EAAA,eAAA,EAAA,eAAA,EAAA,kBAAA,EAAA,SAAA,EAAlC,QAAkC,CAAb,CAArB;AAaA,QAAMC,aAAa,GAAGF,QAAQ,CAARA,QAAAA,IAAqB,CAA3C,WAAA;AAEA,WAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA,QAAA,EAAA;AAGE7B,MAAAA,GAAG,EAAEgC,SAAS,CAAA,YAAA,EAHhB,GAGgB,CAHhB;AAIEC,MAAAA,IAAI,EAJN,OAAA;AAAA,MAAA,IAAA;AAAA,MAAA,KAAA;AAOEpB,MAAAA,QAAQ,EAAEO,eAAe,CAAC1B,KAAK,CAAN,QAAA,EAP3B,YAO2B,CAP3B;AAQEwC,MAAAA,MAAM,EAAEd,eAAe,CAACS,QAAQ,CAAT,MAAA,EAAkBnC,KAAK,CAAvB,MAAA,EAAgCyC,UAAU,CARnE,GAQyB,CARzB;AASEC,MAAAA,OAAO,EAAEhB,eAAe,CACtBS,QAAQ,CADc,OAAA,EAEtBnC,KAAK,CAFiB,OAAA,EAGtByC,UAAU,CAZd,EAS0B,CAT1B;AAcErB,MAAAA,SAAS,EAAEM,eAAe,CAAC1B,KAAK,CAAN,SAAA,EAd5B,SAc4B,CAd5B;AAeEsB,MAAAA,OAAO,EAAEI,eAAe,CAAC1B,KAAK,CAAN,OAAA,EAf1B,OAe0B,CAf1B;AAgBE2C,MAAAA,OAAO,EAhBT,SAAA;AAiBEC,MAAAA,QAAQ,EAjBV,aAAA;AAkBE,uBAAiBC,QAAQ,CAlB3B,aAkB2B,CAlB3B;AAmBEC,MAAAA,KAAK,EAAEC;AAnBT,KAAA,CAAA;AAjB2D,GAAA,EAuC7D,CAAA,UAAA,EAAA,WAAA,EAAA,IAAA,EAAA,KAAA,EAAA,YAAA,EAMEN,UAAU,CANZ,GAAA,EAOEA,UAAU,CAPZ,EAAA,EAAA,SAAA,EAAA,OAAA,EAvCF,SAuCE,CAvC6D,CAA/D;;AAqDA,MAAMO,aAAyB,GAAG,SAA5BA,aAA4B,CAAA,KAAA,EAAA,GAAA,EAAA;AAAA,QAAChD,KAAD,KAAA,KAAA,CAAA,EAAA;AAACA,MAAAA,KAAD,GAAA,EAACA;AAAD;;AAAA,QAAaM,GAAb,KAAA,KAAA,CAAA,EAAA;AAAaA,MAAAA,GAAb,GAAA,IAAaA;AAAb;;AAAA,WAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAAA,MAAA,GAAA;AAGhCmB,MAAAA,WAAW,EAAEC,eAAe,CAAC1B,KAAK,CAAN,WAAA,EAHI,IAGJ,CAHI;AAIhCiD,MAAAA,YAAY,EAAEvB,eAAe,CAAC1B,KAAK,CAAN,YAAA,EAJG,IAIH,CAJG;AAKhC,uBAAiBwB,QAAQ,CALO,UAKP,CALO;AAMhC,sBAAgBA,QAAQ,CANQ,SAMR,CANQ;AAOhC,sBAAgBA,QAAQ,CAAA,SAAA;AAPQ,KAAA,CAAA;AAAlC,GAAA;;AAUA,SAAO;AACL0B,IAAAA,KAAK,EAAE;AAAA,MAAA,SAAA;AAAA,MAAA,SAAA;AAAA,MAAA,SAAA;AAAA,MAAA,QAAA;AAAA,MAAA,SAAA;AAAA,MAAA,UAAA;AAAA,MAAA,UAAA;AAQLC,MAAAA;AARK,KADF;AAAA,IAAA,gBAAA;AAAA,IAAA,aAAA;AAAA,IAAA,aAAA;AAcL/C,IAAAA;AAdK,GAAP;AAgBD;AAED;AACA;AACA;;AACA,SAAA,IAAA,CAAA,KAAA,EAAqC;AACnCY,EAAAA,KAAK,CAALA,cAAAA;AACAA,EAAAA,KAAK,CAALA,eAAAA;AACD","sourcesContent":["import { useBoolean, useControllableProp } from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  dataAttr,\n  mergeRefs,\n  pick,\n  PropGetter,\n  warn,\n} from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport {\n  ChangeEvent,\n  SyntheticEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\nimport { useFormControl } from \"@chakra-ui/form-control\"\n\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\nexport interface UseRadioProps {\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * The name of the input field in a radio\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the radio button.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * If `true`, the radio will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   *\n   * @deprecated Please use `defaultChecked` which mirrors the default prop\n   * name for radio elements.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * If `true`, the radio will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is true, the radio will remain\n   * focusable but not interactive.\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the radio will be read-only\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This also sets `aria-invalid` to `true`.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the radio button will be required. This also sets `aria-required` to `true`.\n   */\n  isRequired?: boolean\n  /**\n   * Function called when checked state of the `input` changes\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nexport function useRadio(props: UseRadioProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isInvalid,\n    name,\n    value,\n    id,\n    ...htmlProps\n  } = props\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovering] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [isCheckedState, setChecked] = useState(Boolean(defaultChecked))\n\n  const [isControlled, isChecked] = useControllableProp(\n    isCheckedProp,\n    isCheckedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        setChecked(event.target.checked)\n      }\n\n      onChange?.(event)\n    },\n    [isControlled, isDisabled, isReadOnly, onChange],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off),\n    }),\n    [\n      isActive,\n      isHovered,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      isFocused,\n      isReadOnly,\n      setActive.on,\n      setActive.off,\n      setHovering.on,\n      setHovering.off,\n    ],\n  )\n\n  const inputProps = useFormControl<HTMLInputElement>(props)\n\n  const getInputProps: PropGetter<HTMLInputElement> = useCallback(\n    (props = {}, forwardedRef = null) => {\n      const ownProps = pick(inputProps, [\n        \"id\",\n        \"disabled\",\n        \"readOnly\",\n        \"required\",\n        \"aria-invalid\",\n        \"aria-required\",\n        \"aria-readonly\",\n        \"aria-describedby\",\n        \"onFocus\",\n        \"onBlur\",\n      ])\n\n      const trulyDisabled = ownProps.disabled && !isFocusable\n\n      return {\n        ...props,\n        ...ownProps,\n        ref: mergeRefs(forwardedRef, ref),\n        type: \"radio\",\n        name,\n        value,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(ownProps.onBlur, props.onBlur, setFocused.off),\n        onFocus: callAllHandlers(\n          ownProps.onFocus,\n          props.onFocus,\n          setFocused.on,\n        ),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        checked: isChecked,\n        disabled: trulyDisabled,\n        \"aria-disabled\": ariaAttr(trulyDisabled),\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      inputProps,\n      isFocusable,\n      name,\n      value,\n      handleChange,\n      setFocused.off,\n      setFocused.on,\n      onKeyDown,\n      onKeyUp,\n      isChecked,\n    ],\n  )\n\n  const getLabelProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref,\n    onMouseDown: callAllHandlers(props.onMouseDown, stop),\n    onTouchStart: callAllHandlers(props.onTouchStart, stop),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stop(event: SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseRadioReturn = ReturnType<typeof useRadio>\n"]},"metadata":{},"sourceType":"module"}