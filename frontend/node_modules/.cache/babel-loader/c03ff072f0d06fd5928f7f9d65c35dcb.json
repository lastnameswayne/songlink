{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { callAllHandlers } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useControllableProp } from \"./use-controllable\";\nimport { useId } from \"./use-id\";\nexport function useDisclosure(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp\n  } = props;\n  var [isOpenState, setIsOpen] = React.useState(props.defaultIsOpen || false);\n  var [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState);\n  var id = useId(idProp, \"disclosure\");\n  var onClose = React.useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n\n    onCloseProp == null ? void 0 : onCloseProp();\n  }, [isControlled, onCloseProp]);\n  var onOpen = React.useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n\n    onOpenProp == null ? void 0 : onOpenProp();\n  }, [isControlled, onOpenProp]);\n  var onToggle = React.useCallback(() => {\n    var action = isOpen ? onClose : onOpen;\n    action();\n  }, [isOpen, onOpen, onClose]);\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: function getButtonProps(props) {\n      if (props === void 0) {\n        props = {};\n      }\n\n      return _extends({}, props, {\n        \"aria-expanded\": \"true\",\n        \"aria-controls\": id,\n        onClick: callAllHandlers(props.onClick, onToggle)\n      });\n    },\n    getDisclosureProps: function getDisclosureProps(props) {\n      if (props === void 0) {\n        props = {};\n      }\n\n      return _extends({}, props, {\n        hidden: !isOpen,\n        id\n      });\n    }\n  };\n}","map":{"version":3,"sources":["../../src/use-disclosure.ts"],"names":["props","onClose","onOpen","isOpen","id","idProp","React","useControllableProp","useId","setIsOpen","onCloseProp","onOpenProp","onToggle","action","getButtonProps","onClick","callAllHandlers","getDisclosureProps","hidden"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAA,eAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,mBAAA,QAAA,oBAAA;AACA,SAAA,KAAA,QAAA,UAAA;AAUA,OAAO,SAAA,aAAA,CAAA,KAAA,EAAuD;AAAA,MAAhCA,KAAgC,KAAA,KAAA,CAAA,EAAA;AAAhCA,IAAAA,KAAgC,GAAJ,EAA5BA;AAAgC;;AAC5D,MAAM;AACJC,IAAAA,OAAO,EADH,WAAA;AAEJC,IAAAA,MAAM,EAFF,UAAA;AAGJC,IAAAA,MAAM,EAHF,UAAA;AAIJC,IAAAA,EAAE,EAAEC;AAJA,MAAN,KAAA;AAOA,MAAM,CAAA,WAAA,EAAA,SAAA,IAA2BC,KAAK,CAALA,QAAAA,CAAeN,KAAK,CAALA,aAAAA,IAAhD,KAAiCM,CAAjC;AACA,MAAM,CAAA,YAAA,EAAA,MAAA,IAAyBC,mBAAmB,CAAA,UAAA,EAAlD,WAAkD,CAAlD;AAEA,MAAMH,EAAE,GAAGI,KAAK,CAAA,MAAA,EAAhB,YAAgB,CAAhB;AAEA,MAAMP,OAAO,GAAG,KAAK,CAAL,WAAA,CAAkB,MAAM;AACtC,QAAI,CAAJ,YAAA,EAAmB;AACjBQ,MAAAA,SAAS,CAATA,KAAS,CAATA;AACD;;AACDC,IAAAA,WAAW,IAAXA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,WAAW,EAAXA;AAJc,GAAA,EAKb,CAAA,YAAA,EALH,WAKG,CALa,CAAhB;AAOA,MAAMR,MAAM,GAAG,KAAK,CAAL,WAAA,CAAkB,MAAM;AACrC,QAAI,CAAJ,YAAA,EAAmB;AACjBO,MAAAA,SAAS,CAATA,IAAS,CAATA;AACD;;AACDE,IAAAA,UAAU,IAAVA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,UAAU,EAAVA;AAJa,GAAA,EAKZ,CAAA,YAAA,EALH,UAKG,CALY,CAAf;AAOA,MAAMC,QAAQ,GAAG,KAAK,CAAL,WAAA,CAAkB,MAAM;AACvC,QAAMC,MAAM,GAAGV,MAAM,GAAA,OAAA,GAArB,MAAA;AACAU,IAAAA,MAAM;AAFS,GAAA,EAGd,CAAA,MAAA,EAAA,MAAA,EAHH,OAGG,CAHc,CAAjB;AAKA,SAAO;AACLV,IAAAA,MAAM,EAAE,CAAC,CADJ,MAAA;AAAA,IAAA,MAAA;AAAA,IAAA,OAAA;AAAA,IAAA,QAAA;AAAA,IAAA,YAAA;AAMLW,IAAAA,cAAc,EAAE,SAAA,cAAA,CAAA,KAAA,EAAA;AAAA,UAACd,KAAD,KAAA,KAAA,CAAA,EAAA;AAACA,QAAAA,KAAD,GAAA,EAACA;AAAD;;AAAA,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEd,yBAFc,MAAA;AAGd,yBAHc,EAAA;AAIde,QAAAA,OAAO,EAAEC,eAAe,CAAChB,KAAK,CAAN,OAAA,EAAA,QAAA;AAJV,OAAA,CAAA;AANX,KAAA;AAYLiB,IAAAA,kBAAkB,EAAE,SAAA,kBAAA,CAAA,KAAA,EAAA;AAAA,UAACjB,KAAD,KAAA,KAAA,CAAA,EAAA;AAACA,QAAAA,KAAD,GAAA,EAACA;AAAD;;AAAA,aAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAElBkB,QAAAA,MAAM,EAAE,CAFU,MAAA;AAGlBd,QAAAA;AAHkB,OAAA,CAAA;AAAA;AAZf,GAAP;AAkBD","sourcesContent":["import { callAllHandlers } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useControllableProp } from \"./use-controllable\"\nimport { useId } from \"./use-id\"\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n  id?: string\n}\n\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp,\n  } = props\n\n  const [isOpenState, setIsOpen] = React.useState(props.defaultIsOpen || false)\n  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState)\n\n  const id = useId(idProp, \"disclosure\")\n\n  const onClose = React.useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false)\n    }\n    onCloseProp?.()\n  }, [isControlled, onCloseProp])\n\n  const onOpen = React.useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true)\n    }\n    onOpenProp?.()\n  }, [isControlled, onOpenProp])\n\n  const onToggle = React.useCallback(() => {\n    const action = isOpen ? onClose : onOpen\n    action()\n  }, [isOpen, onOpen, onClose])\n\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: (props: any = {}) => ({\n      ...props,\n      \"aria-expanded\": \"true\",\n      \"aria-controls\": id,\n      onClick: callAllHandlers(props.onClick, onToggle),\n    }),\n    getDisclosureProps: (props: any = {}) => ({\n      ...props,\n      hidden: !isOpen,\n      id,\n    }),\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n"]},"metadata":{},"sourceType":"module"}