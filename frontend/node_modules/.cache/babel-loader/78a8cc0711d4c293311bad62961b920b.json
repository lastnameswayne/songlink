{"ast":null,"code":"import merge from \"lodash.mergewith\";\nimport { createParser } from \"./create-parser\";\nimport { createStyleFunction } from \"./create-style-function\";\nexport function system(configs) {\n  var config = {};\n  Object.keys(configs).forEach(key => {\n    var propConfig = configs[key];\n\n    if (propConfig === true) {\n      config[key] = createStyleFunction({\n        property: key,\n        scale: key\n      });\n      return;\n    }\n\n    if (typeof propConfig === \"function\") {\n      config[key] = propConfig;\n      return;\n    }\n\n    config[key] = createStyleFunction(propConfig);\n  });\n  return createParser(config);\n}\nexport function compose() {\n  var config = {};\n\n  for (var _len = arguments.length, parsers = new Array(_len), _key = 0; _key < _len; _key++) {\n    parsers[_key] = arguments[_key];\n  }\n\n  parsers.forEach(parser => {\n    if (!parser || !parser.config) return;\n    config = merge({}, config, parser.config);\n  });\n  var parser = createParser(config);\n  return parser;\n}","map":{"version":3,"sources":["../../../src/core/create-system.ts"],"names":["config","Object","key","propConfig","configs","createStyleFunction","property","scale","createParser","parsers","parser","merge"],"mappings":"AACA,OAAA,KAAA,MAAA,kBAAA;AACA,SAAA,YAAA,QAAA,iBAAA;AACA,SAAA,mBAAA,QAAA,yBAAA;AAGA,OAAO,SAAA,MAAA,CAAA,OAAA,EAAmE;AACxE,MAAMA,MAAc,GAApB,EAAA;AAEAC,EAAAA,MAAM,CAANA,IAAAA,CAAAA,OAAAA,EAAAA,OAAAA,CAA8BC,GAAD,IAAS;AACpC,QAAMC,UAAU,GAAGC,OAAO,CAA1B,GAA0B,CAA1B;;AAEA,QAAID,UAAU,KAAd,IAAA,EAAyB;AACvBH,MAAAA,MAAM,CAANA,GAAM,CAANA,GAAcK,mBAAmB,CAAC;AAChCC,QAAAA,QAAQ,EADwB,GAAA;AAEhCC,QAAAA,KAAK,EAAEL;AAFyB,OAAD,CAAjCF;AAIA;AACD;;AAED,QAAI,OAAA,UAAA,KAAJ,UAAA,EAAsC;AACpCA,MAAAA,MAAM,CAANA,GAAM,CAANA,GAAAA,UAAAA;AACA;AACD;;AAEDA,IAAAA,MAAM,CAANA,GAAM,CAANA,GAAcK,mBAAmB,CAAjCL,UAAiC,CAAjCA;AAhBFC,GAAAA;AAmBA,SAAOO,YAAY,CAAnB,MAAmB,CAAnB;AACD;AAED,OAAO,SAAA,OAAA,GAA+C;AACpD,MAAIR,MAAc,GAAlB,EAAA;;AADoD,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAA3BS,OAA2B,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAA3BA,IAAAA,OAA2B,CAAA,IAAA,CAA3BA,GAA2B,SAAA,CAAA,IAAA,CAA3BA;AAA2B;;AAEpDA,EAAAA,OAAO,CAAPA,OAAAA,CAAiBC,MAAD,IAAY;AAC1B,QAAI,CAAA,MAAA,IAAW,CAACA,MAAM,CAAtB,MAAA,EAA+B;AAC/BV,IAAAA,MAAM,GAAGW,KAAK,CAAA,EAAA,EAAA,MAAA,EAAaD,MAAM,CAAjCV,MAAc,CAAdA;AAFFS,GAAAA;AAIA,MAAMC,MAAM,GAAGF,YAAY,CAA3B,MAA2B,CAA3B;AACA,SAAA,MAAA;AACD","sourcesContent":["import { Properties } from \"csstype\"\nimport merge from \"lodash.mergewith\"\nimport { createParser } from \"./create-parser\"\nimport { createStyleFunction } from \"./create-style-function\"\nimport { Config, Parser, PropConfig } from \"./types\"\n\nexport function system<T extends PropConfig | Config>(configs: T): Parser {\n  const config: Config = {}\n\n  Object.keys(configs).forEach((key) => {\n    const propConfig = configs[key]\n\n    if (propConfig === true) {\n      config[key] = createStyleFunction({\n        property: key as keyof Properties,\n        scale: key,\n      })\n      return\n    }\n\n    if (typeof propConfig === \"function\") {\n      config[key] = propConfig\n      return\n    }\n\n    config[key] = createStyleFunction(propConfig)\n  })\n\n  return createParser(config)\n}\n\nexport function compose(...parsers: Parser[]): Parser {\n  let config: Config = {}\n  parsers.forEach((parser) => {\n    if (!parser || !parser.config) return\n    config = merge({}, config, parser.config)\n  })\n  const parser = createParser(config)\n  return parser\n}\n"]},"metadata":{},"sourceType":"module"}