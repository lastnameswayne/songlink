{"ast":null,"code":"import * as React from \"react\";\nimport { getBox } from \"@chakra-ui/utils\";\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\";\n/**\n * Reack hook to measure a component's dimensions\n *\n * @param ref ref of the component to measure\n * @param observe if `true`, resize and scroll observers will be turned on\n */\n\nexport function useDimensions(ref, observe) {\n  var [dimensions, setDimensions] = React.useState(null);\n  var rafId = React.useRef();\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return undefined;\n    var node = ref.current;\n\n    function measure() {\n      rafId.current = requestAnimationFrame(() => {\n        var boxModel = getBox(node);\n        setDimensions(boxModel);\n      });\n    }\n\n    measure();\n\n    if (observe) {\n      window.addEventListener(\"resize\", measure);\n      window.addEventListener(\"scroll\", measure);\n    }\n\n    return () => {\n      if (observe) {\n        window.removeEventListener(\"resize\", measure);\n        window.removeEventListener(\"scroll\", measure);\n      }\n\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current);\n      }\n    };\n  }, [ref, observe]);\n  return dimensions;\n}","map":{"version":3,"sources":["../../src/use-dimensions.ts"],"names":["React","rafId","useSafeLayoutEffect","ref","node","requestAnimationFrame","boxModel","getBox","setDimensions","measure","window","cancelAnimationFrame"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,MAAA,QAAA,kBAAA;AACA,SAAA,mBAAA,QAAA,0BAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,aAAA,CAAA,GAAA,EAAA,OAAA,EAGL;AACA,MAAM,CAAA,UAAA,EAAA,aAAA,IAA8BA,KAAK,CAALA,QAAAA,CAApC,IAAoCA,CAApC;AACA,MAAMC,KAAK,GAAGD,KAAK,CAAnB,MAAcA,EAAd;AAEAE,EAAAA,mBAAmB,CAAC,MAAM;AACxB,QAAI,CAACC,GAAG,CAAR,OAAA,EAAkB,OAAA,SAAA;AAElB,QAAMC,IAAI,GAAGD,GAAG,CAAhB,OAAA;;AAEA,aAAA,OAAA,GAAmB;AACjBF,MAAAA,KAAK,CAALA,OAAAA,GAAgBI,qBAAqB,CAAC,MAAM;AAC1C,YAAMC,QAAQ,GAAGC,MAAM,CAAvB,IAAuB,CAAvB;AACAC,QAAAA,aAAa,CAAbA,QAAa,CAAbA;AAFFP,OAAqC,CAArCA;AAID;;AAEDQ,IAAAA,OAAO;;AAEP,QAAA,OAAA,EAAa;AACXC,MAAAA,MAAM,CAANA,gBAAAA,CAAAA,QAAAA,EAAAA,OAAAA;AACAA,MAAAA,MAAM,CAANA,gBAAAA,CAAAA,QAAAA,EAAAA,OAAAA;AACD;;AAED,WAAO,MAAM;AACX,UAAA,OAAA,EAAa;AACXA,QAAAA,MAAM,CAANA,mBAAAA,CAAAA,QAAAA,EAAAA,OAAAA;AACAA,QAAAA,MAAM,CAANA,mBAAAA,CAAAA,QAAAA,EAAAA,OAAAA;AACD;;AAED,UAAIT,KAAK,CAAT,OAAA,EAAmB;AACjBU,QAAAA,oBAAoB,CAACV,KAAK,CAA1BU,OAAoB,CAApBA;AACD;AARH,KAAA;AAnBiB,GAAA,EA6BhB,CAAA,GAAA,EA7BHT,OA6BG,CA7BgB,CAAnBA;AA+BA,SAAA,UAAA;AACD","sourcesContent":["import * as React from \"react\"\nimport { getBox, BoxModel } from \"@chakra-ui/utils\"\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\"\n\n/**\n * Reack hook to measure a component's dimensions\n *\n * @param ref ref of the component to measure\n * @param observe if `true`, resize and scroll observers will be turned on\n */\nexport function useDimensions(\n  ref: React.RefObject<HTMLElement>,\n  observe?: boolean,\n) {\n  const [dimensions, setDimensions] = React.useState<BoxModel | null>(null)\n  const rafId = React.useRef<number>()\n\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return undefined\n\n    const node = ref.current\n\n    function measure() {\n      rafId.current = requestAnimationFrame(() => {\n        const boxModel = getBox(node)\n        setDimensions(boxModel)\n      })\n    }\n\n    measure()\n\n    if (observe) {\n      window.addEventListener(\"resize\", measure)\n      window.addEventListener(\"scroll\", measure)\n    }\n\n    return () => {\n      if (observe) {\n        window.removeEventListener(\"resize\", measure)\n        window.removeEventListener(\"scroll\", measure)\n      }\n\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current)\n      }\n    }\n  }, [ref, observe])\n\n  return dimensions\n}\n"]},"metadata":{},"sourceType":"module"}