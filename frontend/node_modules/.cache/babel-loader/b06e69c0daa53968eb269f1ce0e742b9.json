{"ast":null,"code":"import { useId as useUID } from \"@reach/auto-id\";\n\nfunction generatePrefix(prefix, id) {\n  return prefix + \"-\" + id;\n}\n/**\n * Reack hook to generate unique id\n *\n * @param idProp the external id passed from the user\n * @param prefix prefix to append before the id\n */\n\n\nexport function useId(idProp, prefix) {\n  var uuid = useUID();\n  var id = idProp != null ? idProp : uuid;\n  var result = prefix ? generatePrefix(prefix, id) : id;\n  return result;\n}\n/**\n * Reack hook to generate ids for use in compound components\n *\n * @param idProp the external id passed from the user\n * @param prefixes array of prefixes to use\n *\n * @example\n *\n * ```js\n * const [buttonId, menuId] = useIds(\"52\", \"button\", \"menu\")\n *\n * // buttonId will be `button-52`\n * // menuId will be `menu-52`\n * ```\n */\n\nexport function useIds(idProp) {\n  var id = useId(idProp);\n\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n\n  var ids = prefixes.map(prefix => generatePrefix(prefix, id));\n  return ids;\n}","map":{"version":3,"sources":["../../src/use-id.ts"],"names":["useId","prefix","uuid","useUID","id","idProp","result","generatePrefix","prefixes","ids"],"mappings":"AAAA,SAASA,KAAK,IAAd,MAAA,QAAA,gBAAA;;AAEA,SAAA,cAAA,CAAA,MAAA,EAAA,EAAA,EAAoD;AAClD,SAAUC,MAAV,GAAA,GAAUA,GAAV,EAAA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAAA,KAAA,CAAA,MAAA,EAAA,MAAA,EAAiD;AACtD,MAAMC,IAAI,GAAGC,MAAb,EAAA;AACA,MAAMC,EAAE,GAAGC,MAAH,IAAA,IAAGA,GAAH,MAAGA,GAAX,IAAA;AACA,MAAMC,MAAM,GAAGL,MAAM,GAAGM,cAAc,CAAA,MAAA,EAAjB,EAAiB,CAAjB,GAArB,EAAA;AACA,SAAA,MAAA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,MAAA,CAAA,MAAA,EAAwD;AAC7D,MAAMH,EAAE,GAAGJ,KAAK,CAAhB,MAAgB,CAAhB;;AAD6D,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAApBQ,QAAoB,GAAA,IAAA,KAAA,CAAA,IAAA,GAAA,CAAA,GAAA,IAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAApBA,IAAAA,QAAoB,CAAA,IAAA,GAAA,CAAA,CAApBA,GAAoB,SAAA,CAAA,IAAA,CAApBA;AAAoB;;AAE7D,MAAMC,GAAG,GAAGD,QAAQ,CAARA,GAAAA,CAAcP,MAAD,IAAYM,cAAc,CAAA,MAAA,EAAnD,EAAmD,CAAvCC,CAAZ;AACA,SAAA,GAAA;AACD","sourcesContent":["import { useId as useUID } from \"@reach/auto-id\"\n\nfunction generatePrefix(prefix: string, id: string) {\n  return `${prefix}-${id}`\n}\n\n/**\n * Reack hook to generate unique id\n *\n * @param idProp the external id passed from the user\n * @param prefix prefix to append before the id\n */\nexport function useId(idProp?: string, prefix?: string) {\n  const uuid = useUID() as string\n  const id = idProp ?? uuid\n  const result = prefix ? generatePrefix(prefix, id) : id\n  return result as string\n}\n\n/**\n * Reack hook to generate ids for use in compound components\n *\n * @param idProp the external id passed from the user\n * @param prefixes array of prefixes to use\n *\n * @example\n *\n * ```js\n * const [buttonId, menuId] = useIds(\"52\", \"button\", \"menu\")\n *\n * // buttonId will be `button-52`\n * // menuId will be `menu-52`\n * ```\n */\nexport function useIds(idProp?: string, ...prefixes: string[]) {\n  const id = useId(idProp)\n  const ids = prefixes.map((prefix) => generatePrefix(prefix, id))\n  return ids\n}\n"]},"metadata":{},"sourceType":"module"}