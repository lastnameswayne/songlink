{"ast":null,"code":"import * as React from \"react\";\nexport function useEventListeners() {\n  var listeners = React.useRef(new Map());\n  var currentListeners = listeners.current;\n  var add = React.useCallback((el, type, listener, options) => {\n    listeners.current.set(listener, {\n      type,\n      el,\n      options\n    });\n    el.addEventListener(type, listener, options);\n  }, []);\n  var remove = React.useCallback((el, type, listener, options) => {\n    el.removeEventListener(type, listener, options);\n    listeners.current.delete(listener);\n  }, []);\n  React.useEffect(() => () => {\n    currentListeners.forEach((value, key) => {\n      remove(value.el, value.type, key, value.options);\n    });\n  }, [remove, currentListeners]);\n  return {\n    add,\n    remove\n  };\n}","map":{"version":3,"sources":["../../src/use-event-listeners.ts"],"names":["listeners","React","currentListeners","add","options","el","remove","value"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AA6BA,OAAO,SAAA,iBAAA,GAA6C;AAClD,MAAMA,SAAS,GAAGC,KAAK,CAALA,MAAAA,CAAa,IAA/B,GAA+B,EAAbA,CAAlB;AACA,MAAMC,gBAAgB,GAAGF,SAAS,CAAlC,OAAA;AAEA,MAAMG,GAAG,GAAG,KAAK,CAAL,WAAA,CAAkB,CAAA,EAAA,EAAA,IAAA,EAAA,QAAA,EAAA,OAAA,KAAiC;AAC7DH,IAAAA,SAAS,CAATA,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAAgC;AAAA,MAAA,IAAA;AAAA,MAAA,EAAA;AAAYI,MAAAA;AAAZ,KAAhCJ;AACAK,IAAAA,EAAE,CAAFA,gBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,OAAAA;AAFU,GAAA,EAAZ,EAAY,CAAZ;AAKA,MAAMC,MAAM,GAAG,KAAK,CAAL,WAAA,CAAkB,CAAA,EAAA,EAAA,IAAA,EAAA,QAAA,EAAA,OAAA,KAAiC;AAChED,IAAAA,EAAE,CAAFA,mBAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,OAAAA;AACAL,IAAAA,SAAS,CAATA,OAAAA,CAAAA,MAAAA,CAAAA,QAAAA;AAFa,GAAA,EAAf,EAAe,CAAf;AAKAC,EAAAA,KAAK,CAALA,SAAAA,CACE,MAAM,MAAM;AACVC,IAAAA,gBAAgB,CAAhBA,OAAAA,CAAyB,CAAA,KAAA,EAAA,GAAA,KAAgB;AACvCI,MAAAA,MAAM,CAACC,KAAK,CAAN,EAAA,EAAWA,KAAK,CAAhB,IAAA,EAAA,GAAA,EAA4BA,KAAK,CAAvCD,OAAM,CAANA;AADFJ,KAAAA;AAFJD,GAAAA,EAME,CAAA,MAAA,EANFA,gBAME,CANFA;AASA,SAAO;AAAA,IAAA,GAAA;AAAOK,IAAAA;AAAP,GAAP;AACD","sourcesContent":["import * as React from \"react\"\n\ninterface EventListeners {\n  add<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  add(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  remove<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void\n  remove(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void\n}\n\nexport function useEventListeners(): EventListeners {\n  const listeners = React.useRef(new Map())\n  const currentListeners = listeners.current\n\n  const add = React.useCallback((el, type, listener, options) => {\n    listeners.current.set(listener, { type, el, options })\n    el.addEventListener(type, listener, options)\n  }, [])\n\n  const remove = React.useCallback((el, type, listener, options) => {\n    el.removeEventListener(type, listener, options)\n    listeners.current.delete(listener)\n  }, [])\n\n  React.useEffect(\n    () => () => {\n      currentListeners.forEach((value, key) => {\n        remove(value.el, value.type, key, value.options)\n      })\n    },\n    [remove, currentListeners],\n  )\n\n  return { add, remove }\n}\n"]},"metadata":{},"sourceType":"module"}