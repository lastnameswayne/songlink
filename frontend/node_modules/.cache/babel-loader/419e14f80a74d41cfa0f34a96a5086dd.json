{"ast":null,"code":"import { useState, useCallback, useEffect } from \"react\";\nimport copy from \"copy-to-clipboard\";\n/**\n * React hook to copy content to clipboard\n *\n * @param text the text or value to copy\n * @param timeout delay (in ms) to switch back to initial state once copied.\n */\n\nexport function useClipboard(text, timeout) {\n  if (timeout === void 0) {\n    timeout = 1500;\n  }\n\n  var [hasCopied, setHasCopied] = useState(false);\n  var onCopy = useCallback(() => {\n    var didCopy = copy(text);\n    setHasCopied(didCopy);\n  }, [text]);\n  useEffect(() => {\n    var timeoutId = null;\n\n    if (hasCopied) {\n      timeoutId = window.setTimeout(() => {\n        setHasCopied(false);\n      }, timeout);\n    }\n\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [timeout, hasCopied]);\n  return {\n    value: text,\n    onCopy,\n    hasCopied\n  };\n}","map":{"version":3,"sources":["../../src/use-clipboard.ts"],"names":["timeout","useState","onCopy","useCallback","didCopy","copy","setHasCopied","useEffect","timeoutId","window","value","hasCopied"],"mappings":"AAAA,SAAA,QAAA,EAAA,WAAA,EAAA,SAAA,QAAA,OAAA;AACA,OAAA,IAAA,MAAA,mBAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,YAAA,CAAA,IAAA,EAAA,OAAA,EAAoD;AAAA,MAAhBA,OAAgB,KAAA,KAAA,CAAA,EAAA;AAAhBA,IAAAA,OAAgB,GAAN,IAAVA;AAAgB;;AACzD,MAAM,CAAA,SAAA,EAAA,YAAA,IAA4BC,QAAQ,CAA1C,KAA0C,CAA1C;AAEA,MAAMC,MAAM,GAAGC,WAAW,CAAC,MAAM;AAC/B,QAAMC,OAAO,GAAGC,IAAI,CAApB,IAAoB,CAApB;AACAC,IAAAA,YAAY,CAAZA,OAAY,CAAZA;AAFwB,GAAA,EAGvB,CAHH,IAGG,CAHuB,CAA1B;AAKAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIC,SAAwB,GAA5B,IAAA;;AAEA,QAAA,SAAA,EAAe;AACbA,MAAAA,SAAS,GAAG,MAAM,CAAN,UAAA,CAAkB,MAAM;AAClCF,QAAAA,YAAY,CAAZA,KAAY,CAAZA;AADU,OAAA,EAAZE,OAAY,CAAZA;AAGD;;AAED,WAAO,MAAM;AACX,UAAA,SAAA,EAAe;AACbC,QAAAA,MAAM,CAANA,YAAAA,CAAAA,SAAAA;AACD;AAHH,KAAA;AATO,GAAA,EAcN,CAAA,OAAA,EAdHF,SAcG,CAdM,CAATA;AAgBA,SAAO;AAAEG,IAAAA,KAAK,EAAP,IAAA;AAAA,IAAA,MAAA;AAAuBC,IAAAA;AAAvB,GAAP;AACD","sourcesContent":["import { useState, useCallback, useEffect } from \"react\"\nimport copy from \"copy-to-clipboard\"\n\n/**\n * React hook to copy content to clipboard\n *\n * @param text the text or value to copy\n * @param timeout delay (in ms) to switch back to initial state once copied.\n */\nexport function useClipboard(text: string, timeout = 1500) {\n  const [hasCopied, setHasCopied] = useState(false)\n\n  const onCopy = useCallback(() => {\n    const didCopy = copy(text)\n    setHasCopied(didCopy)\n  }, [text])\n\n  useEffect(() => {\n    let timeoutId: number | null = null\n\n    if (hasCopied) {\n      timeoutId = window.setTimeout(() => {\n        setHasCopied(false)\n      }, timeout)\n    }\n\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId)\n      }\n    }\n  }, [timeout, hasCopied])\n\n  return { value: text, onCopy, hasCopied }\n}\n"]},"metadata":{},"sourceType":"module"}