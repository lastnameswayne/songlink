{"ast":null,"code":"import { useInterval, useUnmountEffect } from \"@chakra-ui/hooks\";\nimport { useCallback, useRef, useState } from \"react\";\n/**\n * When click and hold on a button - the speed of auto changing the value.\n */\n\nvar CONTINUOUS_CHANGE_INTERVAL = 50;\n/**\n * When click and hold on a button - the delay before auto changing the value.\n */\n\nvar CONTINUOUS_CHANGE_DELAY = 300;\n/**\n * React hook used in the number input to spin its\n * value on long press of the spin buttons\n *\n * @param increment the function to increment\n * @param decrement the function to decrement\n */\n\nexport function useSpinner(increment, decrement) {\n  /**\n   * To keep incrementing/decrementing on press, we call that `spinning`\n   */\n  var [isSpinning, setIsSpinning] = useState(false); // This state keeps track of the action (\"increment\" or \"decrement\")\n\n  var [action, setAction] = useState(null); // To increment the value the first time you mousedown, we call that `runOnce`\n\n  var [runOnce, setRunOnce] = useState(true); // Store the timeout instance id in a ref, so we can clear the timeout later\n\n  var timeoutRef = useRef(null); // Clears the timeout from memory\n\n  var removeTimeout = () => clearTimeout(timeoutRef.current);\n  /**\n   * useInterval hook provides a performant way to\n   * update the state value at specific interval\n   */\n\n\n  useInterval(() => {\n    if (action === \"increment\") {\n      increment();\n    }\n\n    if (action === \"decrement\") {\n      decrement();\n    }\n  }, isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null); // Function to activate the spinning and increment the value\n\n  var up = useCallback(() => {\n    // increment the first fime\n    if (runOnce) {\n      increment();\n    } // after a delay, keep incrementing at interval (\"spinning up\")\n\n\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false);\n      setIsSpinning(true);\n      setAction(\"increment\");\n    }, CONTINUOUS_CHANGE_DELAY);\n  }, [increment, runOnce]); // Function to activate the spinning and increment the value\n\n  var down = useCallback(() => {\n    // decrement the first fime\n    if (runOnce) {\n      decrement();\n    } // after a delay, keep decrementing at interval (\"spinning down\")\n\n\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false);\n      setIsSpinning(true);\n      setAction(\"decrement\");\n    }, CONTINUOUS_CHANGE_DELAY);\n  }, [decrement, runOnce]); // Function to stop spinng (useful for mouseup, keyup handlers)\n\n  var stop = useCallback(() => {\n    setRunOnce(true);\n    setIsSpinning(false);\n    removeTimeout();\n  }, []);\n  /**\n   * If the component unmounts while spinning,\n   * let's clear the timeout as well\n   */\n\n  useUnmountEffect(removeTimeout);\n  return {\n    up,\n    down,\n    stop\n  };\n}","map":{"version":3,"sources":["../../src/use-spinner.ts"],"names":["CONTINUOUS_CHANGE_INTERVAL","CONTINUOUS_CHANGE_DELAY","useState","timeoutRef","useRef","removeTimeout","clearTimeout","useInterval","action","increment","decrement","isSpinning","up","useCallback","setTimeout","setRunOnce","setIsSpinning","setAction","down","stop","useUnmountEffect"],"mappings":"AAAA,SAAA,WAAA,EAAA,gBAAA,QAAA,kBAAA;AACA,SAAA,WAAA,EAAA,MAAA,EAAA,QAAA,QAAA,OAAA;AAEA;AACA;AACA;;AACA,IAAMA,0BAA0B,GAAhC,EAAA;AAEA;AACA;AACA;;AACA,IAAMC,uBAAuB,GAA7B,GAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,UAAA,CAAA,SAAA,EAAA,SAAA,EAA8D;AACnE;AACF;AACA;AACE,MAAM,CAAA,UAAA,EAAA,aAAA,IAA8BC,QAAQ,CAJuB,KAIvB,CAA5C,CAJmE,CAMnE;;AACA,MAAM,CAAA,MAAA,EAAA,SAAA,IAAsBA,QAAQ,CAP+B,IAO/B,CAApC,CAPmE,CASnE;;AACA,MAAM,CAAA,OAAA,EAAA,UAAA,IAAwBA,QAAQ,CAV6B,IAU7B,CAAtC,CAVmE,CAYnE;;AACA,MAAMC,UAAU,GAAGC,MAAM,CAb0C,IAa1C,CAAzB,CAbmE,CAenE;;AACA,MAAMC,aAAa,GAAG,MAAMC,YAAY,CAACH,UAAU,CAAnD,OAAwC,CAAxC;AAEA;AACF;AACA;AACA;;;AACEI,EAAAA,WAAW,CACT,MAAM;AACJ,QAAIC,MAAM,KAAV,WAAA,EAA4B;AAC1BC,MAAAA,SAAS;AACV;;AACD,QAAID,MAAM,KAAV,WAAA,EAA4B;AAC1BE,MAAAA,SAAS;AACV;AAPM,GAAA,EASTC,UAAU,GAAA,0BAAA,GA/BuD,IAsBxD,CAAXJ,CAtBmE,CAkCnE;;AACA,MAAMK,EAAE,GAAGC,WAAW,CAAC,MAAM;AAC3B;AACA,QAAA,OAAA,EAAa;AACXJ,MAAAA,SAAS;AAHgB,KAAA,CAM3B;;;AACAN,IAAAA,UAAU,CAAVA,OAAAA,GAAqBW,UAAU,CAAC,MAAM;AACpCC,MAAAA,UAAU,CAAVA,KAAU,CAAVA;AACAC,MAAAA,aAAa,CAAbA,IAAa,CAAbA;AACAC,MAAAA,SAAS,CAATA,WAAS,CAATA;AAH6B,KAAA,EAA/Bd,uBAA+B,CAA/BA;AAPoB,GAAA,EAYnB,CAAA,SAAA,EA/CgE,OA+ChE,CAZmB,CAAtB,CAnCmE,CAiDnE;;AACA,MAAMe,IAAI,GAAGL,WAAW,CAAC,MAAM;AAC7B;AACA,QAAA,OAAA,EAAa;AACXH,MAAAA,SAAS;AAHkB,KAAA,CAM7B;;;AACAP,IAAAA,UAAU,CAAVA,OAAAA,GAAqBW,UAAU,CAAC,MAAM;AACpCC,MAAAA,UAAU,CAAVA,KAAU,CAAVA;AACAC,MAAAA,aAAa,CAAbA,IAAa,CAAbA;AACAC,MAAAA,SAAS,CAATA,WAAS,CAATA;AAH6B,KAAA,EAA/Bd,uBAA+B,CAA/BA;AAPsB,GAAA,EAYrB,CAAA,SAAA,EA9DgE,OA8DhE,CAZqB,CAAxB,CAlDmE,CAgEnE;;AACA,MAAMgB,IAAI,GAAGN,WAAW,CAAC,MAAM;AAC7BE,IAAAA,UAAU,CAAVA,IAAU,CAAVA;AACAC,IAAAA,aAAa,CAAbA,KAAa,CAAbA;AACAX,IAAAA,aAAa;AAHS,GAAA,EAAxB,EAAwB,CAAxB;AAMA;AACF;AACA;AACA;;AACEe,EAAAA,gBAAgB,CAAhBA,aAAgB,CAAhBA;AAEA,SAAO;AAAA,IAAA,EAAA;AAAA,IAAA,IAAA;AAAYD,IAAAA;AAAZ,GAAP;AACD","sourcesContent":["import { useInterval, useUnmountEffect } from \"@chakra-ui/hooks\"\nimport { useCallback, useRef, useState } from \"react\"\n\n/**\n * When click and hold on a button - the speed of auto changing the value.\n */\nconst CONTINUOUS_CHANGE_INTERVAL = 50\n\n/**\n * When click and hold on a button - the delay before auto changing the value.\n */\nconst CONTINUOUS_CHANGE_DELAY = 300\n\ntype Action = \"increment\" | \"decrement\"\n\n/**\n * React hook used in the number input to spin its\n * value on long press of the spin buttons\n *\n * @param increment the function to increment\n * @param decrement the function to decrement\n */\nexport function useSpinner(increment: Function, decrement: Function) {\n  /**\n   * To keep incrementing/decrementing on press, we call that `spinning`\n   */\n  const [isSpinning, setIsSpinning] = useState(false)\n\n  // This state keeps track of the action (\"increment\" or \"decrement\")\n  const [action, setAction] = useState<Action | null>(null)\n\n  // To increment the value the first time you mousedown, we call that `runOnce`\n  const [runOnce, setRunOnce] = useState(true)\n\n  // Store the timeout instance id in a ref, so we can clear the timeout later\n  const timeoutRef = useRef<any>(null)\n\n  // Clears the timeout from memory\n  const removeTimeout = () => clearTimeout(timeoutRef.current)\n\n  /**\n   * useInterval hook provides a performant way to\n   * update the state value at specific interval\n   */\n  useInterval(\n    () => {\n      if (action === \"increment\") {\n        increment()\n      }\n      if (action === \"decrement\") {\n        decrement()\n      }\n    },\n    isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null,\n  )\n\n  // Function to activate the spinning and increment the value\n  const up = useCallback(() => {\n    // increment the first fime\n    if (runOnce) {\n      increment()\n    }\n\n    // after a delay, keep incrementing at interval (\"spinning up\")\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false)\n      setIsSpinning(true)\n      setAction(\"increment\")\n    }, CONTINUOUS_CHANGE_DELAY)\n  }, [increment, runOnce])\n\n  // Function to activate the spinning and increment the value\n  const down = useCallback(() => {\n    // decrement the first fime\n    if (runOnce) {\n      decrement()\n    }\n\n    // after a delay, keep decrementing at interval (\"spinning down\")\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false)\n      setIsSpinning(true)\n      setAction(\"decrement\")\n    }, CONTINUOUS_CHANGE_DELAY)\n  }, [decrement, runOnce])\n\n  // Function to stop spinng (useful for mouseup, keyup handlers)\n  const stop = useCallback(() => {\n    setRunOnce(true)\n    setIsSpinning(false)\n    removeTimeout()\n  }, [])\n\n  /**\n   * If the component unmounts while spinning,\n   * let's clear the timeout as well\n   */\n  useUnmountEffect(removeTimeout)\n\n  return { up, down, stop }\n}\n"]},"metadata":{},"sourceType":"module"}