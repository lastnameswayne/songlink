{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra } from \"@chakra-ui/system\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport * as React from \"react\";\nvar MotionSvg = motion.custom(chakra.svg);\n\nvar CheckIcon = props => /*#__PURE__*/React.createElement(MotionSvg, _extends({\n  width: \"1.2em\",\n  viewBox: \"0 0 12 10\",\n  variants: {\n    unchecked: {\n      opacity: 0,\n      strokeDashoffset: 16\n    },\n    checked: {\n      opacity: 1,\n      strokeDashoffset: 0,\n      transition: {\n        duration: 0.2\n      }\n    }\n  },\n  style: {\n    fill: \"none\",\n    strokeWidth: 2,\n    stroke: \"currentColor\",\n    strokeDasharray: 16\n  }\n}, props), /*#__PURE__*/React.createElement(\"polyline\", {\n  points: \"1.5 6 4.5 9 10.5 1\"\n}));\n\nvar IndeterminateIcon = props => /*#__PURE__*/React.createElement(MotionSvg, _extends({\n  width: \"1.2em\",\n  viewBox: \"0 0 24 24\",\n  variants: {\n    unchecked: {\n      scaleX: 0.65,\n      opacity: 0\n    },\n    checked: {\n      scaleX: 1,\n      opacity: 1,\n      transition: {\n        scaleX: {\n          duration: 0\n        },\n        opacity: {\n          duration: 0.02\n        }\n      }\n    }\n  },\n  style: {\n    stroke: \"currentColor\",\n    strokeWidth: 4\n  }\n}, props), /*#__PURE__*/React.createElement(\"line\", {\n  x1: \"21\",\n  x2: \"3\",\n  y1: \"12\",\n  y2: \"12\"\n}));\n\nvar CheckboxTransition = _ref => {\n  var {\n    open,\n    children\n  } = _ref;\n  return /*#__PURE__*/React.createElement(AnimatePresence, {\n    initial: false\n  }, open && /*#__PURE__*/React.createElement(motion.div, {\n    variants: {\n      unchecked: {\n        scale: 0.5\n      },\n      checked: {\n        scale: 1\n      }\n    },\n    initial: \"unchecked\",\n    animate: \"checked\",\n    exit: \"unchecked\",\n    style: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"100%\"\n    }\n  }, children));\n};\n/**\n * CheckboxIcon is used to visually indicate the checked or indeterminate\n * state of a checkbox.\n *\n * @todo allow users pass their own icon svgs\n */\n\n\nexport var CheckboxIcon = props => {\n  var {\n    isIndeterminate,\n    isChecked\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"isIndeterminate\", \"isChecked\"]);\n\n  return /*#__PURE__*/React.createElement(CheckboxTransition, {\n    open: isChecked || isIndeterminate\n  }, isIndeterminate ? /*#__PURE__*/React.createElement(IndeterminateIcon, rest) : /*#__PURE__*/React.createElement(CheckIcon, rest));\n};","map":{"version":3,"sources":["../../src/checkbox-icon.tsx"],"names":["MotionSvg","motion","chakra","CheckIcon","props","unchecked","opacity","strokeDashoffset","checked","transition","duration","fill","strokeWidth","stroke","strokeDasharray","IndeterminateIcon","scaleX","CheckboxTransition","children","open","scale","display","alignItems","justifyContent","height","CheckboxIcon","isChecked","rest","isIndeterminate"],"mappings":"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","sourcesContent":["import { chakra, PropsOf } from \"@chakra-ui/system\"\nimport { AnimatePresence, motion } from \"framer-motion\"\nimport * as React from \"react\"\n\nconst MotionSvg = motion.custom(chakra.svg)\n\nconst CheckIcon = (props: PropsOf<typeof MotionSvg>) => (\n  <MotionSvg\n    width=\"1.2em\"\n    viewBox=\"0 0 12 10\"\n    variants={{\n      unchecked: {\n        opacity: 0,\n        strokeDashoffset: 16,\n      },\n      checked: {\n        opacity: 1,\n        strokeDashoffset: 0,\n        transition: { duration: 0.2 },\n      },\n    }}\n    style={{\n      fill: \"none\",\n      strokeWidth: 2,\n      stroke: \"currentColor\",\n      strokeDasharray: 16,\n    }}\n    {...props}\n  >\n    <polyline points=\"1.5 6 4.5 9 10.5 1\" />\n  </MotionSvg>\n)\n\nconst IndeterminateIcon = (props: PropsOf<typeof MotionSvg>) => (\n  <MotionSvg\n    width=\"1.2em\"\n    viewBox=\"0 0 24 24\"\n    variants={{\n      unchecked: {\n        scaleX: 0.65,\n        opacity: 0,\n      },\n      checked: {\n        scaleX: 1,\n        opacity: 1,\n        transition: {\n          scaleX: { duration: 0 },\n          opacity: { duration: 0.02 },\n        },\n      },\n    }}\n    style={{ stroke: \"currentColor\", strokeWidth: 4 }}\n    {...props}\n  >\n    <line x1=\"21\" x2=\"3\" y1=\"12\" y2=\"12\" />\n  </MotionSvg>\n)\n\nconst CheckboxTransition = ({ open, children }: any) => (\n  <AnimatePresence initial={false}>\n    {open && (\n      <motion.div\n        variants={{\n          unchecked: { scale: 0.5 },\n          checked: { scale: 1 },\n        }}\n        initial=\"unchecked\"\n        animate=\"checked\"\n        exit=\"unchecked\"\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          height: \"100%\",\n        }}\n      >\n        {children}\n      </motion.div>\n    )}\n  </AnimatePresence>\n)\n\nexport interface CheckboxIconProps extends PropsOf<typeof MotionSvg> {\n  isIndeterminate?: boolean\n  isChecked?: boolean\n}\n\n/**\n * CheckboxIcon is used to visually indicate the checked or indeterminate\n * state of a checkbox.\n *\n * @todo allow users pass their own icon svgs\n */\nexport const CheckboxIcon: React.FC<CheckboxIconProps> = (props) => {\n  const { isIndeterminate, isChecked, ...rest } = props\n  return (\n    <CheckboxTransition open={isChecked || isIndeterminate}>\n      {isIndeterminate ? (\n        <IndeterminateIcon {...rest} />\n      ) : (\n        <CheckIcon {...rest} />\n      )}\n    </CheckboxTransition>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}