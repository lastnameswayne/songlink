{"ast":null,"code":"import { createContext, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useCheckboxGroup } from \"./use-checkbox-group\";\nvar [CheckboxGroupProvider, useCheckboxGroupContext] = createContext({\n  name: \"CheckboxGroupContext\",\n  strict: false\n});\nexport { useCheckboxGroupContext };\n/**\n * Used for multiple checkboxes which are bound in one group,\n * and it indicates whether one or more options are selected.\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox\n */\n\nexport var CheckboxGroup = props => {\n  var {\n    colorScheme,\n    size,\n    variant,\n    children\n  } = props;\n  var {\n    value,\n    onChange\n  } = useCheckboxGroup(props);\n  var group = React.useMemo(() => ({\n    size,\n    onChange,\n    colorScheme,\n    value,\n    variant\n  }), [size, onChange, colorScheme, value, variant]);\n  return /*#__PURE__*/React.createElement(CheckboxGroupProvider, {\n    value: group\n  }, children);\n};\n\nif (__DEV__) {\n  CheckboxGroup.displayName = \"CheckboxGroup\";\n}","map":{"version":3,"sources":["../../src/checkbox-group.tsx"],"names":["createContext","name","strict","CheckboxGroup","props","children","onChange","useCheckboxGroup","group","variant"],"mappings":"AACA,SAAA,aAAA,EAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,gBAAA,QAAA,sBAAA;AAgBA,IAAM,CAAA,qBAAA,EAAA,uBAAA,IAAmDA,aAAa,CAEpE;AACAC,EAAAA,IAAI,EADJ,sBAAA;AAEAC,EAAAA,MAAM,EAAE;AAFR,CAFoE,CAAtE;AAOA,SAAA,uBAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,aAA2C,GAAIC,KAAD,IAAW;AACpE,MAAM;AAAA,IAAA,WAAA;AAAA,IAAA,IAAA;AAAA,IAAA,OAAA;AAA8BC,IAAAA;AAA9B,MAAN,KAAA;AACA,MAAM;AAAA,IAAA,KAAA;AAASC,IAAAA;AAAT,MAAsBC,gBAAgB,CAA5C,KAA4C,CAA5C;AAEA,MAAMC,KAAK,GAAG,KAAK,CAAL,OAAA,CACZ,OAAO;AAAA,IAAA,IAAA;AAAA,IAAA,QAAA;AAAA,IAAA,WAAA;AAAA,IAAA,KAAA;AAKLC,IAAAA;AALK,GAAP,CADY,EAQZ,CAAA,IAAA,EAAA,QAAA,EAAA,WAAA,EAAA,KAAA,EARF,OAQE,CARY,CAAd;AAWA,SAAA,aAAO,KAAA,CAAA,aAAA,CAAA,qBAAA,EAAA;AAAuB,IAAA,KAAK,EAAED;AAA9B,GAAA,EAAP,QAAO,CAAP;AAfK,CAAA;;AAkBP,IAAA,OAAA,EAAa;AACXL,EAAAA,aAAa,CAAbA,WAAAA,GAAAA,eAAAA;AACD","sourcesContent":["import { ThemingProps } from \"@chakra-ui/system\"\nimport { createContext, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  useCheckboxGroup,\n  UseCheckboxGroupProps,\n  UseCheckboxGroupReturn,\n} from \"./use-checkbox-group\"\n\nexport interface CheckboxGroupProps\n  extends UseCheckboxGroupProps,\n    Omit<ThemingProps, \"orientation\"> {\n  children?: React.ReactNode\n}\n\nexport interface CheckboxGroupContext\n  extends Pick<UseCheckboxGroupReturn, \"onChange\" | \"value\">,\n    Omit<ThemingProps, \"orientation\"> {}\n\nconst [CheckboxGroupProvider, useCheckboxGroupContext] = createContext<\n  CheckboxGroupContext\n>({\n  name: \"CheckboxGroupContext\",\n  strict: false,\n})\n\nexport { useCheckboxGroupContext }\n\n/**\n * Used for multiple checkboxes which are bound in one group,\n * and it indicates whether one or more options are selected.\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox\n */\nexport const CheckboxGroup: React.FC<CheckboxGroupProps> = (props) => {\n  const { colorScheme, size, variant, children } = props\n  const { value, onChange } = useCheckboxGroup(props)\n\n  const group = React.useMemo(\n    () => ({\n      size,\n      onChange,\n      colorScheme,\n      value,\n      variant,\n    }),\n    [size, onChange, colorScheme, value, variant],\n  )\n\n  return <CheckboxGroupProvider value={group}>{children}</CheckboxGroupProvider>\n}\n\nif (__DEV__) {\n  CheckboxGroup.displayName = \"CheckboxGroup\"\n}\n"]},"metadata":{},"sourceType":"module"}