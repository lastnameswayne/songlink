{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar [ButtonGroupProvider, useButtonGroup] = createContext({\n  strict: false,\n  name: \"ButtonGroupContext\"\n});\nexport { useButtonGroup };\nexport var ButtonGroup = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    size,\n    colorScheme,\n    variant,\n    className,\n    spacing = \"0.5rem\",\n    isAttached,\n    isDisabled\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"size\", \"colorScheme\", \"variant\", \"className\", \"spacing\", \"isAttached\", \"isDisabled\"]);\n\n  var _className = cx(\"chakra-button__group\", className);\n\n  var context = React.useMemo(() => ({\n    size,\n    colorScheme,\n    variant,\n    isDisabled\n  }), [size, colorScheme, variant, isDisabled]);\n  var groupStyles = {\n    display: \"inline-flex\"\n  };\n\n  if (isAttached) {\n    groupStyles = _extends({}, groupStyles, {\n      \"> *:first-of-type:not(:last-of-type)\": {\n        borderRightRadius: 0\n      },\n      \"> *:not(:first-of-type):not(:last-of-type)\": {\n        borderRadius: 0\n      },\n      \"> *:not(:first-of-type):last-of-type\": {\n        borderLeftRadius: 0\n      }\n    });\n  } else {\n    groupStyles = _extends({}, groupStyles, {\n      \"& > *:not(style) ~ *:not(style)\": {\n        marginLeft: spacing\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(ButtonGroupProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    role: \"group\",\n    __css: groupStyles,\n    className: _className\n  }, rest)));\n});\n\nif (__DEV__) {\n  ButtonGroup.displayName = \"ButtonGroup\";\n}","map":{"version":3,"sources":["../../src/button-group.tsx"],"names":["createContext","strict","name","ButtonGroup","forwardRef","spacing","isDisabled","rest","_className","cx","context","groupStyles","display","borderRightRadius","borderRadius","borderLeftRadius","marginLeft"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,EAAA,UAAA,QAAA,mBAAA;AAQA,SAAA,aAAA,EAAA,EAAA,EAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAwBA,IAAM,CAAA,mBAAA,EAAA,cAAA,IAAwCA,aAAa,CACzD;AACEC,EAAAA,MAAM,EADR,KAAA;AAEEC,EAAAA,IAAI,EAAE;AAFR,CADyD,CAA3D;AAOA,SAAA,cAAA;AAEA,OAAO,IAAMC,WAAW,GAAA,aAAGC,UAAU,CAA0B,CAAA,KAAA,EAAA,GAAA,KAAgB;AAC7E,MAAM;AAAA,IAAA,IAAA;AAAA,IAAA,WAAA;AAAA,IAAA,OAAA;AAAA,IAAA,SAAA;AAKJC,IAAAA,OAAO,GALH,QAAA;AAAA,IAAA,UAAA;AAOJC,IAAAA;AAPI,MAAN,KAAA;AAAA,MAQKC,IARL,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,MAAA,EAAA,aAAA,EAAA,SAAA,EAAA,WAAA,EAAA,SAAA,EAAA,YAAA,EAAA,YAAA,CAAA,CAAA;;AAWA,MAAMC,UAAU,GAAGC,EAAE,CAAA,sBAAA,EAArB,SAAqB,CAArB;;AAEA,MAAMC,OAAO,GAAG,KAAK,CAAL,OAAA,CACd,OAAO;AAAA,IAAA,IAAA;AAAA,IAAA,WAAA;AAAA,IAAA,OAAA;AAA8BJ,IAAAA;AAA9B,GAAP,CADc,EAEd,CAAA,IAAA,EAAA,WAAA,EAAA,OAAA,EAFF,UAEE,CAFc,CAAhB;AAKA,MAAIK,WAA8B,GAAG;AACnCC,IAAAA,OAAO,EAAE;AAD0B,GAArC;;AAIA,MAAA,UAAA,EAAgB;AACdD,IAAAA,WAAW,GAAA,QAAA,CAAA,EAAA,EAAA,WAAA,EAAA;AAET,8CAAwC;AAAEE,QAAAA,iBAAiB,EAAE;AAArB,OAF/B;AAGT,oDAA8C;AAAEC,QAAAA,YAAY,EAAE;AAAhB,OAHrC;AAIT,8CAAwC;AAAEC,QAAAA,gBAAgB,EAAE;AAApB;AAJ/B,KAAA,CAAXJ;AADF,GAAA,MAOO;AACLA,IAAAA,WAAW,GAAA,QAAA,CAAA,EAAA,EAAA,WAAA,EAAA;AAET,yCAAmC;AAAEK,QAAAA,UAAU,EAAEX;AAAd;AAF1B,KAAA,CAAXM;AAID;;AAED,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,mBAAA,EAAA;AAAqB,IAAA,KAAK,EAAED;AAA5B,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,GAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EADL,GAAA;AAEE,IAAA,IAAI,EAFN,OAAA;AAGE,IAAA,KAAK,EAHP,WAAA;AAIE,IAAA,SAAS,EAAEF;AAJb,GAAA,EAFJ,IAEI,CAAA,CADF,CADF;AArCK,CAA8B,CAA9B;;AAkDP,IAAA,OAAA,EAAa;AACXL,EAAAA,WAAW,CAAXA,WAAAA,GAAAA,aAAAA;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface ButtonGroupProps extends HTMLChakraProps<\"div\">, ThemingProps {\n  /**\n   * If `true`, the borderRadius of button that are direct children will be altered\n   * to look flushed together\n   */\n  isAttached?: boolean\n  /**\n   * If `true`, all wrapped button will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * The spacing between the buttons\n   * @default '0.5rem'\n   * @type SystemProps[\"marginRight\"]\n   */\n  spacing?: SystemProps[\"marginRight\"]\n}\n\ninterface ButtonGroupContext extends ThemingProps {\n  isDisabled?: boolean\n}\n\nconst [ButtonGroupProvider, useButtonGroup] = createContext<ButtonGroupContext>(\n  {\n    strict: false,\n    name: \"ButtonGroupContext\",\n  },\n)\n\nexport { useButtonGroup }\n\nexport const ButtonGroup = forwardRef<ButtonGroupProps, \"div\">((props, ref) => {\n  const {\n    size,\n    colorScheme,\n    variant,\n    className,\n    spacing = \"0.5rem\",\n    isAttached,\n    isDisabled,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__group\", className)\n\n  const context = React.useMemo(\n    () => ({ size, colorScheme, variant, isDisabled }),\n    [size, colorScheme, variant, isDisabled],\n  )\n\n  let groupStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n  }\n\n  if (isAttached) {\n    groupStyles = {\n      ...groupStyles,\n      \"> *:first-of-type:not(:last-of-type)\": { borderRightRadius: 0 },\n      \"> *:not(:first-of-type):not(:last-of-type)\": { borderRadius: 0 },\n      \"> *:not(:first-of-type):last-of-type\": { borderLeftRadius: 0 },\n    }\n  } else {\n    groupStyles = {\n      ...groupStyles,\n      \"& > *:not(style) ~ *:not(style)\": { marginLeft: spacing },\n    }\n  }\n\n  return (\n    <ButtonGroupProvider value={context}>\n      <chakra.div\n        ref={ref}\n        role=\"group\"\n        __css={groupStyles}\n        className={_className}\n        {...rest}\n      />\n    </ButtonGroupProvider>\n  )\n})\n\nif (__DEV__) {\n  ButtonGroup.displayName = \"ButtonGroup\"\n}\n"]},"metadata":{},"sourceType":"module"}