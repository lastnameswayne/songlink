{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { createContext, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { TriangleDownIcon, TriangleUpIcon } from \"./icons\";\nimport { useNumberInput } from \"./use-number-input\";\n/**\n * React context used to communicate between components\n */\n\nvar [NumberInputProvider, useNumberInputContext] = createContext({\n  name: \"NumberInputContext\",\n  errorMessage: \"useNumberInputContext: `context` is undefined. Seems you forgot to wrap number-input's components within <NumberInput />\"\n});\n/**\n * NumberInput\n *\n * React component that provides context and logic to all\n * number input sub-components.\n *\n * It renders a `div` by default.\n *\n * @see Docs http://chakra-ui.com/numberinput\n */\n\nexport var NumberInput = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"NumberInput\", props);\n  var ownProps = omitThemingProps(props);\n\n  var _useNumberInput = useNumberInput(ownProps),\n      {\n    htmlProps\n  } = _useNumberInput,\n      context = _objectWithoutPropertiesLoose(_useNumberInput, [\"htmlProps\"]);\n\n  var ctx = React.useMemo(() => context, [context]);\n  return /*#__PURE__*/React.createElement(NumberInputProvider, {\n    value: ctx\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, htmlProps, {\n    __css: {\n      position: \"relative\",\n      zIndex: 0\n    }\n  }))));\n});\n\nif (__DEV__) {\n  NumberInput.displayName = \"NumberInput\";\n}\n/**\n * NumberInputStepper\n *\n * React component used to group the increment and decrement\n * button spinners.\n *\n * It renders a `div` by default.\n *\n * @see Docs http://chakra-ui.com/components/number-input\n */\n\n\nexport var NumberInputStepper = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    \"aria-hidden\": true,\n    ref: ref\n  }, props, {\n    __css: _extends({\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"absolute\",\n      top: \"0\",\n      right: \"0px\",\n      margin: \"1px\",\n      height: \"calc(100% - 2px)\",\n      zIndex: 1\n    }, styles.stepperGroup)\n  }));\n});\n\nif (__DEV__) {\n  NumberInputStepper.displayName = \"NumberInputStepper\";\n}\n/**\n * NumberInputField\n *\n * React component that represents the actual `input` field\n * where users can type to edit numeric values.\n *\n * It renders an `input` by default and ensures only numeric\n * values can be typed.\n *\n * @see Docs http://chakra-ui.com/numberinput\n */\n\n\nexport var NumberInputField = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getInputProps\n  } = useNumberInputContext();\n  var input = getInputProps(props, ref);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.input, _extends({}, input, {\n    __css: _extends({\n      width: \"100%\"\n    }, styles.field)\n  }));\n});\n\nif (__DEV__) {\n  NumberInputField.displayName = \"NumberInputField\";\n}\n\nexport var StyledStepper = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1,\n    transition: \"all 0.3s\",\n    userSelect: \"none\",\n    cursor: \"pointer\",\n    lineHeight: \"normal\"\n  }\n});\n/**\n * NumberDecrementStepper\n *\n * React component used to decrement the number input's value\n *\n * It renders a `div` with `role=button` by default\n */\n\nexport var NumberDecrementStepper = /*#__PURE__*/forwardRef((props, ref) => {\n  var _props$children;\n\n  var styles = useStyles();\n  var {\n    getDecrementButtonProps\n  } = useNumberInputContext();\n  var decrement = getDecrementButtonProps(props, ref);\n  return /*#__PURE__*/React.createElement(StyledStepper, _extends({}, decrement, {\n    __css: styles.stepper\n  }), (_props$children = props.children) != null ? _props$children : /*#__PURE__*/React.createElement(TriangleDownIcon, null));\n});\n\nif (__DEV__) {\n  NumberDecrementStepper.displayName = \"NumberDecrementStepper\";\n}\n/**\n * NumberIncrementStepper\n *\n * React component used to increment the number input's value\n *\n * It renders a `div` with `role=button` by default\n */\n\n\nexport var NumberIncrementStepper = /*#__PURE__*/forwardRef((props, ref) => {\n  var _props$children2;\n\n  var {\n    getIncrementButtonProps\n  } = useNumberInputContext();\n  var increment = getIncrementButtonProps(props, ref);\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(StyledStepper, _extends({}, increment, {\n    __css: styles.stepper\n  }), (_props$children2 = props.children) != null ? _props$children2 : /*#__PURE__*/React.createElement(TriangleUpIcon, null));\n});\n\nif (__DEV__) {\n  NumberIncrementStepper.displayName = \"NumberIncrementStepper\";\n}","map":{"version":3,"sources":["../../src/number-input.tsx"],"names":["createContext","name","errorMessage","NumberInput","forwardRef","styles","useMultiStyleConfig","ownProps","omitThemingProps","htmlProps","context","useNumberInput","ctx","React","ref","position","zIndex","NumberInputStepper","useStyles","display","flexDirection","top","right","margin","height","NumberInputField","getInputProps","useNumberInputContext","input","width","StyledStepper","chakra","baseStyle","justifyContent","alignItems","flex","transition","userSelect","cursor","lineHeight","NumberDecrementStepper","getDecrementButtonProps","decrement","stepper","props","NumberIncrementStepper","getIncrementButtonProps","increment"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { TriangleDownIcon, TriangleUpIcon } from \"./icons\"\nimport {\n  useNumberInput,\n  UseNumberInputProps,\n  UseNumberInputReturn,\n} from \"./use-number-input\"\n\ninterface NumberInputContext extends Omit<UseNumberInputReturn, \"htmlProps\"> {}\n\n/**\n * React context used to communicate between components\n */\nconst [\n  NumberInputProvider,\n  useNumberInputContext,\n] = createContext<NumberInputContext>({\n  name: \"NumberInputContext\",\n  errorMessage:\n    \"useNumberInputContext: `context` is undefined. Seems you forgot to wrap number-input's components within <NumberInput />\",\n})\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * If `true`, the input element will span the full width of its parent\n   */\n  isFullWidth?: boolean\n}\n\nexport interface NumberInputProps\n  extends UseNumberInputProps,\n    ThemingProps,\n    InputOptions,\n    Omit<HTMLChakraProps<\"div\">, keyof UseNumberInputProps> {}\n\n/**\n * NumberInput\n *\n * React component that provides context and logic to all\n * number input sub-components.\n *\n * It renders a `div` by default.\n *\n * @see Docs http://chakra-ui.com/numberinput\n */\nexport const NumberInput = forwardRef<NumberInputProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"NumberInput\", props)\n  const ownProps = omitThemingProps(props)\n\n  const { htmlProps, ...context } = useNumberInput(ownProps)\n  const ctx = React.useMemo(() => context, [context])\n\n  return (\n    <NumberInputProvider value={ctx}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          ref={ref}\n          {...htmlProps}\n          __css={{\n            position: \"relative\",\n            zIndex: 0,\n          }}\n        />\n      </StylesProvider>\n    </NumberInputProvider>\n  )\n})\n\nif (__DEV__) {\n  NumberInput.displayName = \"NumberInput\"\n}\n\nexport interface NumberInputStepperProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * NumberInputStepper\n *\n * React component used to group the increment and decrement\n * button spinners.\n *\n * It renders a `div` by default.\n *\n * @see Docs http://chakra-ui.com/components/number-input\n */\nexport const NumberInputStepper = forwardRef<NumberInputStepperProps, \"div\">(\n  (props, ref) => {\n    const styles = useStyles()\n    return (\n      <chakra.div\n        aria-hidden\n        ref={ref}\n        {...props}\n        __css={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          position: \"absolute\",\n          top: \"0\",\n          right: \"0px\",\n          margin: \"1px\",\n          height: \"calc(100% - 2px)\",\n          zIndex: 1,\n          ...styles.stepperGroup,\n        }}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  NumberInputStepper.displayName = \"NumberInputStepper\"\n}\n\nexport interface NumberInputFieldProps extends HTMLChakraProps<\"input\"> {}\n\n/**\n * NumberInputField\n *\n * React component that represents the actual `input` field\n * where users can type to edit numeric values.\n *\n * It renders an `input` by default and ensures only numeric\n * values can be typed.\n *\n * @see Docs http://chakra-ui.com/numberinput\n */\nexport const NumberInputField = forwardRef<NumberInputFieldProps, \"input\">(\n  (props, ref) => {\n    const { getInputProps } = useNumberInputContext()\n\n    const input = getInputProps(props, ref)\n    const styles = useStyles()\n\n    return (\n      <chakra.input\n        {...input}\n        __css={{\n          width: \"100%\",\n          ...styles.field,\n        }}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  NumberInputField.displayName = \"NumberInputField\"\n}\n\nexport const StyledStepper = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flex: 1,\n    transition: \"all 0.3s\",\n    userSelect: \"none\",\n    cursor: \"pointer\",\n    lineHeight: \"normal\",\n  },\n})\n\nexport interface NumberDecrementStepperProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * NumberDecrementStepper\n *\n * React component used to decrement the number input's value\n *\n * It renders a `div` with `role=button` by default\n */\nexport const NumberDecrementStepper = forwardRef<\n  NumberDecrementStepperProps,\n  \"div\"\n>((props, ref) => {\n  const styles = useStyles()\n  const { getDecrementButtonProps } = useNumberInputContext()\n  const decrement = getDecrementButtonProps(props, ref)\n\n  return (\n    <StyledStepper {...decrement} __css={styles.stepper}>\n      {props.children ?? <TriangleDownIcon />}\n    </StyledStepper>\n  )\n})\n\nif (__DEV__) {\n  NumberDecrementStepper.displayName = \"NumberDecrementStepper\"\n}\n\nexport interface NumberIncrementStepperProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * NumberIncrementStepper\n *\n * React component used to increment the number input's value\n *\n * It renders a `div` with `role=button` by default\n */\nexport const NumberIncrementStepper = forwardRef<\n  NumberIncrementStepperProps,\n  \"div\"\n>((props, ref) => {\n  const { getIncrementButtonProps } = useNumberInputContext()\n  const increment = getIncrementButtonProps(props, ref)\n  const styles = useStyles()\n\n  return (\n    <StyledStepper {...increment} __css={styles.stepper}>\n      {props.children ?? <TriangleUpIcon />}\n    </StyledStepper>\n  )\n})\n\nif (__DEV__) {\n  NumberIncrementStepper.displayName = \"NumberIncrementStepper\"\n}\n"]},"metadata":{},"sourceType":"module"}