{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useBoolean, useControllableProp, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { callAllHandlers, dataAttr, mergeRefs, warn } from \"@chakra-ui/utils\";\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { useCallback, useRef, useState } from \"react\";\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox#hooks\n */\n\nexport function useCheckbox(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isIndeterminate,\n    isInvalid,\n    name,\n    value,\n    id\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIsChecked\", \"defaultChecked\", \"isChecked\", \"isFocusable\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"onChange\", \"isIndeterminate\", \"isInvalid\", \"name\", \"value\", \"id\"]);\n\n  var [isFocused, setFocused] = useBoolean();\n  var [isHovered, setHovered] = useBoolean();\n  var [isActive, setActive] = useBoolean();\n  var ref = useRef(null);\n  var [checkedState, setCheckedState] = useState(!!defaultChecked);\n  var [isControlled, isChecked] = useControllableProp(checkedProp, checkedState);\n  warn({\n    condition: !!defaultIsChecked,\n    message: 'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' + 'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.'\n  });\n  var handleChange = useCallback(event => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!isControlled) {\n      if (isChecked) {\n        setCheckedState(event.target.checked);\n      } else {\n        setCheckedState(isIndeterminate ? true : event.target.checked);\n      }\n    }\n\n    onChange == null ? void 0 : onChange(event);\n  }, [isReadOnly, isDisabled, isChecked, isControlled, isIndeterminate, onChange]);\n  useSafeLayoutEffect(() => {\n    if (ref.current) {\n      ref.current.indeterminate = Boolean(isIndeterminate);\n    }\n  }, [isIndeterminate]);\n  var trulyDisabled = isDisabled && !isFocusable;\n  var onKeyDown = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.on();\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.off();\n    }\n  }, [setActive]);\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return;\n    var notInSync = ref.current.checked && !isChecked || !ref.current.checked && isChecked;\n\n    if (notInSync) {\n      setCheckedState(ref.current.checked);\n    }\n  }, [ref.current]);\n\n  var getCheckboxProps = function getCheckboxProps(props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    var onPressDown = event => {\n      // On mousedown, the input blurs and returns focus to the `body`,\n      // we need to prevent this. Native checkboxes keeps focus on `input`\n      event.preventDefault();\n      setActive.on();\n    };\n\n    return _extends({}, props, {\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off)\n    });\n  };\n\n  var getInputProps = function getInputProps(props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(ref, forwardedRef),\n      type: \"checkbox\",\n      name,\n      value,\n      id,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(props.onBlur, setFocused.off),\n      onFocus: callAllHandlers(props.onFocus, setFocused.on),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-invalid\": isInvalid,\n      \"aria-disabled\": isDisabled,\n      style: visuallyHiddenStyle\n    });\n  };\n\n  var getLabelProps = function getLabelProps(props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  };\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps\n  };\n}\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}","map":{"version":3,"sources":["../../src/use-checkbox.ts"],"names":["props","defaultChecked","isChecked","id","htmlProps","useBoolean","ref","useRef","useState","useControllableProp","warn","condition","message","handleChange","useCallback","event","isReadOnly","setCheckedState","isIndeterminate","onChange","useSafeLayoutEffect","Boolean","trulyDisabled","isDisabled","onKeyDown","setActive","onKeyUp","notInSync","getCheckboxProps","forwardedRef","onPressDown","dataAttr","onMouseDown","callAllHandlers","onMouseUp","onMouseEnter","setHovered","onMouseLeave","getInputProps","mergeRefs","type","onBlur","setFocused","onFocus","required","checked","disabled","readOnly","style","visuallyHiddenStyle","getLabelProps","onTouchStart","state","isRequired"],"mappings":"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","sourcesContent":["import {\n  useBoolean,\n  useControllableProp,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  callAllHandlers,\n  dataAttr,\n  mergeRefs,\n  PropGetter,\n  warn,\n} from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\n\nexport interface UseCheckboxProps {\n  /**\n   * If `true`, the checkbox will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the checkbox will be indeterminate.\n   * This only affects the icon shown inside checkbox\n   * and does not modify the isChecked property.\n   */\n  isIndeterminate?: boolean\n  /**\n   * If `true`, the checkbox will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is passed, the checkbox will\n   * remain tabbable but not interactive\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the checkbox will be readonly\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the checkbox is marked as invalid.\n   * Changes style of unchecked state.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the checkbox input is marked as required,\n   * and `required` attribute will be added\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   * @deprecated Please use the `defaultChecked` prop, which mirrors default\n   * React checkbox behavior.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * The callback invoked when the checked state of the `Checkbox` changes..\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n  /**\n   * The name of the input field in a checkbox\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the checkbox input.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * id assigned to input\n   */\n  id?: string\n}\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox#hooks\n */\nexport function useCheckbox(props: UseCheckboxProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isIndeterminate,\n    isInvalid,\n    name,\n    value,\n    id,\n    ...htmlProps\n  } = props\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovered] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [checkedState, setCheckedState] = useState(!!defaultChecked)\n\n  const [isControlled, isChecked] = useControllableProp(\n    checkedProp,\n    checkedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        if (isChecked) {\n          setCheckedState(event.target.checked)\n        } else {\n          setCheckedState(isIndeterminate ? true : event.target.checked)\n        }\n      }\n\n      onChange?.(event)\n    },\n    [\n      isReadOnly,\n      isDisabled,\n      isChecked,\n      isControlled,\n      isIndeterminate,\n      onChange,\n    ],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (ref.current) {\n      ref.current.indeterminate = Boolean(isIndeterminate)\n    }\n  }, [isIndeterminate])\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return\n    const notInSync =\n      (ref.current.checked && !isChecked) || (!ref.current.checked && isChecked)\n\n    if (notInSync) {\n      setCheckedState(ref.current.checked)\n    }\n  }, [ref.current])\n\n  const getCheckboxProps: PropGetter = (props = {}, forwardedRef = null) => {\n    const onPressDown = (event: React.MouseEvent) => {\n      // On mousedown, the input blurs and returns focus to the `body`,\n      // we need to prevent this. Native checkboxes keeps focus on `input`\n      event.preventDefault()\n      setActive.on()\n    }\n\n    return {\n      ...props,\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off),\n    }\n  }\n\n  const getInputProps: PropGetter = (props = {}, forwardedRef = null) => ({\n    ...props,\n    ref: mergeRefs(ref, forwardedRef),\n    type: \"checkbox\",\n    name,\n    value,\n    id,\n    onChange: callAllHandlers(props.onChange, handleChange),\n    onBlur: callAllHandlers(props.onBlur, setFocused.off),\n    onFocus: callAllHandlers(props.onFocus, setFocused.on),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n    required: isRequired,\n    checked: isChecked,\n    disabled: trulyDisabled,\n    readOnly: isReadOnly,\n    \"aria-invalid\": isInvalid,\n    \"aria-disabled\": isDisabled,\n    style: visuallyHiddenStyle,\n  })\n\n  const getLabelProps: PropGetter = (props = {}, forwardedRef = null) => ({\n    ...props,\n    ref: forwardedRef,\n    onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n    onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n"]},"metadata":{},"sourceType":"module"}