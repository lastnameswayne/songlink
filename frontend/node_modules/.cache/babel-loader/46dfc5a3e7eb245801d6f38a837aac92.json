{"ast":null,"code":"var win;\n/**\n * Note: Accessing \"window\" in IE11 is somewhat expensive, and calling \"typeof window\"\n * hits a memory leak, whereas aliasing it and calling \"typeof win\" does not.\n * Caching the window value at the file scope lets us minimize the impact.\n *\n * @see IE11 Memory Leak Issue https://github.com/microsoft/fluentui/pull/9010#issuecomment-490768427\n */\n\ntry {\n  win = window;\n} catch (e) {\n  /* no-op */\n}\n/**\n * Helper to get the window object. The helper will make sure to use a cached variable\n * of \"window\", to avoid overhead and memory leaks in IE11.\n */\n\n\nexport var getWindow = node => {\n  var _node$ownerDocument$d, _node$ownerDocument;\n\n  return (_node$ownerDocument$d = node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) != null ? _node$ownerDocument$d : win;\n};\n/**\n * Check if we can use the DOM. Useful for SSR purposes\n */\n\nfunction checkIsBrowser() {\n  var win = getWindow();\n  return Boolean(typeof win !== \"undefined\" && win.document && win.document.createElement);\n}\n\nexport var isBrowser = checkIsBrowser();\n/**\n * Get the normalized event key across all browsers\n * @param event keyboard event\n */\n\nexport function normalizeEventKey(event) {\n  var {\n    key,\n    keyCode\n  } = event;\n  var isArrowKey = keyCode >= 37 && keyCode <= 40 && key.indexOf(\"Arrow\") !== 0;\n  var eventKey = isArrowKey ? \"Arrow\" + key : key;\n  return eventKey;\n}\nexport var dataAttr = condition => condition ? \"\" : undefined;\nexport var ariaAttr = condition => condition ? true : undefined;\nexport var getDocument = node => node != null && node.ownerDocument || isBrowser ? document : null;\nexport var cx = function cx() {\n  for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classNames[_key] = arguments[_key];\n  }\n\n  return classNames.filter(Boolean).join(\" \");\n};\nexport function getActiveElement(node) {\n  var doc = getDocument(node);\n  return doc == null ? void 0 : doc.activeElement;\n}\nexport function contains(parent, child) {\n  return parent === child || parent.contains(child);\n}","map":{"version":3,"sources":["../../src/dom.ts"],"names":["win","getWindow","node","Boolean","isBrowser","checkIsBrowser","keyCode","isArrowKey","key","eventKey","dataAttr","condition","ariaAttr","getDocument","cx","classNames","doc","parent"],"mappings":"AAGA,IAAA,GAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAI;AACFA,EAAAA,GAAG,GAAHA,MAAAA;AADF,CAAA,CAEE,OAAA,CAAA,EAAU;AACV;AACD;AAED;AACA;AACA;AACA;;;AACA,OAAO,IAAMC,SAAS,GAAIC,IAAD,IAAA;AAAA,MAAA,qBAAA,EAAA,mBAAA;;AAAA,SAAA,CAAA,qBAAA,GACvBA,IADuB,IAAA,IACvBA,GADuB,KAAA,CACvBA,GADuB,CAAA,mBAAA,GACvBA,IAAI,CADmB,aAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GACvBA,mBAAAA,CADuB,WAAA,KAAA,IAAA,GAAA,qBAAA,GAAA,GAAA;AAAlB,CAAA;AAGP;AACA;AACA;;AACA,SAAA,cAAA,GAA0B;AACxB,MAAMF,GAAG,GAAGC,SAAZ,EAAA;AACA,SAAOE,OAAO,CACZ,OAAA,GAAA,KAAA,WAAA,IAA8BH,GAAG,CAAjC,QAAA,IAA8CA,GAAG,CAAHA,QAAAA,CADhD,aAAc,CAAd;AAGD;;AAED,OAAO,IAAMI,SAAS,GAAGC,cAAlB,EAAA;AAEP;AACA;AACA;AACA;;AACA,OAAO,SAAA,iBAAA,CAAA,KAAA,EAAuD;AAC5D,MAAM;AAAA,IAAA,GAAA;AAAOC,IAAAA;AAAP,MAAN,KAAA;AAEA,MAAMC,UAAU,GACdD,OAAO,IAAPA,EAAAA,IAAiBA,OAAO,IAAxBA,EAAAA,IAAkCE,GAAG,CAAHA,OAAAA,CAAAA,OAAAA,MADpC,CAAA;AAGA,MAAMC,QAAQ,GAAGF,UAAU,GAAA,UAAA,GAAA,GAA3B,GAAA;AAEA,SAAA,QAAA;AACD;AAED,OAAO,IAAMG,QAAQ,GAAIC,SAAD,IACrBA,SAAS,GAAA,EAAA,GADL,SAAA;AAGP,OAAO,IAAMC,QAAQ,GAAID,SAAD,IACtBA,SAAS,GAAA,IAAA,GADJ,SAAA;AAGP,OAAO,IAAME,WAAW,GAAIX,IAAD,IACxBA,IAAI,IAAJA,IAAAA,IAAAA,IAAI,CAAJA,aAAAA,IAAAA,SAAAA,GAAAA,QAAAA,GADI,IAAA;AAGP,OAAO,IAAMY,EAAE,GAAG,SAALA,EAAK,GAAA;AAAA,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAIC,UAAJ,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAAIA,IAAAA,UAAJ,CAAA,IAAA,CAAIA,GAAJ,SAAA,CAAA,IAAA,CAAIA;AAAJ;;AAAA,SAA0BA,UAAU,CAAVA,MAAAA,CAAAA,OAAAA,EAAAA,IAAAA,CAA1B,GAA0BA,CAA1B;AAAX,CAAA;AAEP,OAAO,SAAA,gBAAA,CAAA,IAAA,EAA8C;AACnD,MAAMC,GAAG,GAAGH,WAAW,CAAvB,IAAuB,CAAvB;AACA,SAAOG,GAAP,IAAA,IAAOA,GAAP,KAAA,CAAOA,GAAAA,GAAG,CAAV,aAAA;AACD;AAED,OAAO,SAAA,QAAA,CAAA,MAAA,EAAA,KAAA,EAA2D;AAChE,SAAOC,MAAM,KAANA,KAAAA,IAAoBA,MAAM,CAANA,QAAAA,CAA3B,KAA2BA,CAA3B;AACD","sourcesContent":["import * as React from \"react\"\nimport { Booleanish, EventKeys } from \"./types\"\n\nlet win: Window | undefined\n\n/**\n * Note: Accessing \"window\" in IE11 is somewhat expensive, and calling \"typeof window\"\n * hits a memory leak, whereas aliasing it and calling \"typeof win\" does not.\n * Caching the window value at the file scope lets us minimize the impact.\n *\n * @see IE11 Memory Leak Issue https://github.com/microsoft/fluentui/pull/9010#issuecomment-490768427\n */\ntry {\n  win = window\n} catch (e) {\n  /* no-op */\n}\n\n/**\n * Helper to get the window object. The helper will make sure to use a cached variable\n * of \"window\", to avoid overhead and memory leaks in IE11.\n */\nexport const getWindow = (node?: HTMLElement | null) =>\n  node?.ownerDocument?.defaultView ?? win\n\n/**\n * Check if we can use the DOM. Useful for SSR purposes\n */\nfunction checkIsBrowser() {\n  const win = getWindow()\n  return Boolean(\n    typeof win !== \"undefined\" && win.document && win.document.createElement,\n  )\n}\n\nexport const isBrowser = checkIsBrowser()\n\n/**\n * Get the normalized event key across all browsers\n * @param event keyboard event\n */\nexport function normalizeEventKey(event: React.KeyboardEvent) {\n  const { key, keyCode } = event\n\n  const isArrowKey =\n    keyCode >= 37 && keyCode <= 40 && key.indexOf(\"Arrow\") !== 0\n\n  const eventKey = isArrowKey ? `Arrow${key}` : key\n\n  return eventKey as EventKeys\n}\n\nexport const dataAttr = (condition: boolean | undefined) =>\n  (condition ? \"\" : undefined) as Booleanish\n\nexport const ariaAttr = (condition: boolean | undefined) =>\n  condition ? true : undefined\n\nexport const getDocument = (node?: HTMLElement | null) =>\n  (node?.ownerDocument || isBrowser ? document : null) as Document | null\n\nexport const cx = (...classNames: any[]) => classNames.filter(Boolean).join(\" \")\n\nexport function getActiveElement(node?: HTMLElement) {\n  const doc = getDocument(node)\n  return doc?.activeElement as HTMLElement\n}\n\nexport function contains(parent: HTMLElement, child: HTMLElement) {\n  return parent === child || parent.contains(child)\n}\n"]},"metadata":{},"sourceType":"module"}