{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra, forwardRef, layoutPropNames, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { callAll, split, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useRadioGroupContext } from \"./radio-group\";\nimport { useRadio } from \"./use-radio\";\n/**\n * Radio component is used in forms when a user needs to select a single value from\n * several options.\n *\n * @see Docs https://chakra-ui.com/docs/form/radio\n */\n\nexport var Radio = /*#__PURE__*/forwardRef((props, ref) => {\n  var _props$name;\n\n  var {\n    onChange: onChangeProp,\n    value: valueProp\n  } = props;\n  var group = useRadioGroupContext();\n  var styles = useMultiStyleConfig(\"Radio\", _extends({}, group, props));\n\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    spacing = \"0.5rem\",\n    children,\n    isFullWidth\n  } = _omitThemingProps,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"spacing\", \"children\", \"isFullWidth\"]);\n\n  var isChecked = props.isChecked;\n\n  if (group != null && group.value && valueProp) {\n    isChecked = group.value === valueProp;\n  }\n\n  var onChange = onChangeProp;\n\n  if (group != null && group.onChange && valueProp) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n\n  var name = (_props$name = props == null ? void 0 : props.name) != null ? _props$name : group == null ? void 0 : group.name;\n  var {\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    htmlProps\n  } = useRadio(_extends({}, rest, {\n    isChecked,\n    onChange,\n    name\n  }));\n  var [layoutProps, otherProps] = split(htmlProps, layoutPropNames);\n  var checkboxProps = getCheckboxProps(otherProps);\n  var inputProps = getInputProps({}, ref);\n  var labelProps = getLabelProps();\n\n  var rootStyles = _extends({\n    width: isFullWidth ? \"full\" : undefined,\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\"\n  }, styles.container);\n\n  var checkboxStyles = _extends({\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexShrink: 0\n  }, styles.control);\n\n  var labelStyles = _extends({\n    userSelect: \"none\",\n    ml: spacing\n  }, styles.label);\n\n  return /*#__PURE__*/React.createElement(chakra.label, _extends({\n    className: \"chakra-radio\"\n  }, layoutProps, {\n    __css: rootStyles\n  }), /*#__PURE__*/React.createElement(\"input\", _extends({\n    className: \"chakra-radio__input\"\n  }, inputProps)), /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-radio__control\"\n  }, checkboxProps, {\n    __css: checkboxStyles\n  })), children && /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-radio__label\"\n  }, labelProps, {\n    __css: labelStyles\n  }), children));\n});\n\nif (__DEV__) {\n  Radio.displayName = \"Radio\";\n}","map":{"version":3,"sources":["../../src/radio.tsx"],"names":["Radio","forwardRef","onChange","value","valueProp","group","useRadioGroupContext","styles","useMultiStyleConfig","spacing","isFullWidth","rest","omitThemingProps","isChecked","props","callAll","name","htmlProps","useRadio","split","checkboxProps","getCheckboxProps","inputProps","getInputProps","labelProps","getLabelProps","rootStyles","width","display","alignItems","verticalAlign","checkboxStyles","justifyContent","flexShrink","labelStyles","userSelect","ml","children"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  layoutPropNames,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { callAll, split, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useRadioGroupContext } from \"./radio-group\"\nimport { useRadio, UseRadioProps } from \"./use-radio\"\n\ntype Omitted = \"onChange\" | \"defaultChecked\" | \"checked\"\ninterface BaseControlProps extends Omit<HTMLChakraProps<\"div\">, Omitted> {}\n\nexport interface RadioProps\n  extends UseRadioProps,\n    ThemingProps,\n    BaseControlProps {\n  /**\n   * The spacing between the checkbox and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n  /**\n   * If `true`, the radio will occupy the full width of its parent container\n   */\n  isFullWidth?: boolean\n}\n\n/**\n * Radio component is used in forms when a user needs to select a single value from\n * several options.\n *\n * @see Docs https://chakra-ui.com/docs/form/radio\n */\nexport const Radio = forwardRef<RadioProps, \"input\">((props, ref) => {\n  const { onChange: onChangeProp, value: valueProp } = props\n\n  const group = useRadioGroupContext()\n  const styles = useMultiStyleConfig(\"Radio\", { ...group, ...props })\n\n  const {\n    spacing = \"0.5rem\",\n    children,\n    isFullWidth,\n    ...rest\n  } = omitThemingProps(props)\n\n  let isChecked = props.isChecked\n  if (group?.value && valueProp) {\n    isChecked = group.value === valueProp\n  }\n\n  let onChange = onChangeProp\n  if (group?.onChange && valueProp) {\n    onChange = callAll(group.onChange, onChangeProp)\n  }\n\n  const name = props?.name ?? group?.name\n\n  const {\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    htmlProps,\n  } = useRadio({\n    ...rest,\n    isChecked,\n    onChange,\n    name,\n  })\n\n  const [layoutProps, otherProps] = split(htmlProps, layoutPropNames as any)\n\n  const checkboxProps = getCheckboxProps(otherProps)\n  const inputProps = getInputProps({}, ref)\n  const labelProps = getLabelProps()\n\n  const rootStyles = {\n    width: isFullWidth ? \"full\" : undefined,\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    ...styles.container,\n  }\n\n  const checkboxStyles = {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexShrink: 0,\n    ...styles.control,\n  }\n\n  const labelStyles: SystemStyleObject = {\n    userSelect: \"none\",\n    ml: spacing,\n    ...styles.label,\n  }\n\n  return (\n    <chakra.label className=\"chakra-radio\" {...layoutProps} __css={rootStyles}>\n      <input className=\"chakra-radio__input\" {...inputProps} />\n      <chakra.div\n        className=\"chakra-radio__control\"\n        {...checkboxProps}\n        __css={checkboxStyles}\n      />\n      {children && (\n        <chakra.div\n          className=\"chakra-radio__label\"\n          {...labelProps}\n          __css={labelStyles}\n        >\n          {children}\n        </chakra.div>\n      )}\n    </chakra.label>\n  )\n})\n\nif (__DEV__) {\n  Radio.displayName = \"Radio\"\n}\n"]},"metadata":{},"sourceType":"module"}