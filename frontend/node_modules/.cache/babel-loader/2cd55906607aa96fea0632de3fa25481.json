{"ast":null,"code":"import { createParser, system } from \"../core\";\nimport { getIsRtl } from \"../utils\";\n\nvar floatTransform = function floatTransform(value, _, props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var map = {\n    left: \"right\",\n    right: \"left\"\n  };\n  return getIsRtl(props) ? map[value] : value;\n};\n\nvar config = {\n  animation: true,\n  appearance: true,\n  visibility: true,\n  userSelect: true,\n  pointerEvents: true,\n  cursor: true,\n  resize: true,\n  objectFit: true,\n  objectPosition: true,\n  float: {\n    property: \"float\",\n    transform: floatTransform\n  },\n  willChange: true,\n  filter: true\n};\nexport var others = system(config);\nexport var othersParser = createParser(config);","map":{"version":3,"sources":["../../../src/config/others.ts"],"names":["floatTransform","props","map","left","right","getIsRtl","config","animation","appearance","visibility","userSelect","pointerEvents","cursor","resize","objectFit","objectPosition","float","property","transform","willChange","filter","others","system","othersParser","createParser"],"mappings":"AACA,SAAA,YAAA,EAAA,MAAA,QAAA,SAAA;AACA,SAAA,QAAA,QAAA,UAAA;;AAEA,IAAMA,cAAuC,GAAG,SAA1CA,cAA0C,CAAA,KAAA,EAAA,CAAA,EAAA,KAAA,EAA0B;AAAA,MAAfC,KAAe,KAAA,KAAA,CAAA,EAAA;AAAfA,IAAAA,KAAe,GAAP,EAARA;AAAe;;AACxE,MAAMC,GAAG,GAAG;AAAEC,IAAAA,IAAI,EAAN,OAAA;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GAAZ;AACA,SAAOC,QAAQ,CAARA,KAAQ,CAARA,GAAkBH,GAAG,CAArBG,KAAqB,CAArBA,GAAP,KAAA;AAFF,CAAA;;AAKA,IAAMC,MAAc,GAAG;AACrBC,EAAAA,SAAS,EADY,IAAA;AAErBC,EAAAA,UAAU,EAFW,IAAA;AAGrBC,EAAAA,UAAU,EAHW,IAAA;AAIrBC,EAAAA,UAAU,EAJW,IAAA;AAKrBC,EAAAA,aAAa,EALQ,IAAA;AAMrBC,EAAAA,MAAM,EANe,IAAA;AAOrBC,EAAAA,MAAM,EAPe,IAAA;AAQrBC,EAAAA,SAAS,EARY,IAAA;AASrBC,EAAAA,cAAc,EATO,IAAA;AAUrBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EADH,OAAA;AAELC,IAAAA,SAAS,EAAElB;AAFN,GAVc;AAcrBmB,EAAAA,UAAU,EAdW,IAAA;AAerBC,EAAAA,MAAM,EAAE;AAfa,CAAvB;AAqEA,OAAO,IAAMC,MAAM,GAAGC,MAAM,CAArB,MAAqB,CAArB;AACP,OAAO,IAAMC,YAAY,GAAGC,YAAY,CAAjC,MAAiC,CAAjC","sourcesContent":["import * as CSS from \"csstype\"\nimport { Config, PropConfig, createParser, system } from \"../core\"\nimport { getIsRtl, Length, ResponsiveValue } from \"../utils\"\n\nconst floatTransform: PropConfig[\"transform\"] = (value, _, props = {}) => {\n  const map = { left: \"right\", right: \"left\" }\n  return getIsRtl(props) ? map[value] : value\n}\n\nconst config: Config = {\n  animation: true,\n  appearance: true,\n  visibility: true,\n  userSelect: true,\n  pointerEvents: true,\n  cursor: true,\n  resize: true,\n  objectFit: true,\n  objectPosition: true,\n  float: {\n    property: \"float\",\n    transform: floatTransform,\n  },\n  willChange: true,\n  filter: true,\n}\n\nexport interface OtherProps {\n  /**\n   * The CSS `animation` property\n   */\n  animation?: ResponsiveValue<CSS.Property.Animation>\n  /**\n   * The CSS `appearance` property\n   */\n  appearance?: ResponsiveValue<CSS.Property.Appearance>\n  /**\n   * The CSS `visibility` property\n   */\n  visibility?: ResponsiveValue<CSS.Property.Visibility>\n  /**\n   * The CSS `user-select` property\n   */\n  userSelect?: ResponsiveValue<CSS.Property.UserSelect>\n  /**\n   * The CSS `pointer-events` property\n   */\n  pointerEvents?: ResponsiveValue<CSS.Property.PointerEvents>\n  /**\n   * The CSS `cursor` property\n   */\n  cursor?: ResponsiveValue<CSS.Property.Cursor>\n  /**\n   * The CSS `resize` property\n   */\n  resize?: ResponsiveValue<CSS.Property.Resize>\n  /**\n   * The CSS `object-fit` property\n   */\n  objectFit?: ResponsiveValue<CSS.Property.ObjectFit>\n  /**\n   * The CSS `object-psition` property\n   */\n  objectPosition?: ResponsiveValue<CSS.Property.ObjectPosition<Length>>\n  /**\n   * The CSS `float` property\n   */\n  float?: ResponsiveValue<CSS.Property.Float>\n  /**\n   * The CSS `will-change` property\n   */\n  willChange?: ResponsiveValue<CSS.Property.WillChange>\n  /**\n   * The CSS `filter` property\n   */\n  filter?: ResponsiveValue<CSS.Property.Filter>\n}\n\nexport const others = system(config)\nexport const othersParser = createParser(config)\n"]},"metadata":{},"sourceType":"module"}