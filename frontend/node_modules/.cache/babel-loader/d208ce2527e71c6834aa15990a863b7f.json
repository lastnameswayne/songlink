{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cx, getValidChildren, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { getDividerStyles, getStackStyles, selector } from \"./stack.utils\";\nexport var StackDivider = props => /*#__PURE__*/React.createElement(chakra.div, _extends({\n  className: \"chakra-stack__divider\"\n}, props, {\n  __css: _extends({}, props[\"__css\"], {\n    borderWidth: 0,\n    alignSelf: \"stretch\",\n    borderColor: \"inherit\",\n    width: \"auto\",\n    height: \"auto\"\n  })\n}));\nexport var StackItem = props => /*#__PURE__*/React.createElement(chakra.div, _extends({\n  className: \"chakra-stack__item\"\n}, props, {\n  __css: _extends({\n    display: \"inline-block\",\n    flex: \"0 0 auto\",\n    minWidth: 0\n  }, props[\"__css\"])\n}));\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/docs/layout/stack\n *\n */\n\nexport var Stack = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"isInline\", \"direction\", \"align\", \"justify\", \"spacing\", \"wrap\", \"children\", \"divider\", \"className\", \"shouldWrapChildren\"]);\n\n  var direction = isInline ? \"row\" : directionProp != null ? directionProp : \"column\";\n  var styles = React.useMemo(() => getStackStyles({\n    direction,\n    spacing\n  }), [direction, spacing]);\n  var dividerStyle = React.useMemo(() => getDividerStyles({\n    spacing,\n    direction\n  }), [spacing, direction]);\n  var hasDivider = !!divider;\n  var shouldUseChildren = !shouldWrapChildren && !hasDivider;\n  var validChildren = getValidChildren(children);\n  var clones = shouldUseChildren ? validChildren : validChildren.map((child, index) => {\n    var isLast = index + 1 === validChildren.length;\n    var wrappedChild = /*#__PURE__*/React.createElement(StackItem, {\n      key: index\n    }, child);\n\n    var _child = shouldWrapChildren ? wrappedChild : child;\n\n    if (!hasDivider) return _child;\n    var clonedDivider = /*#__PURE__*/React.cloneElement(divider, {\n      __css: dividerStyle\n    });\n\n    var _divider = isLast ? null : clonedDivider;\n\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: index\n    }, _child, _divider);\n  });\n\n  var _className = cx(\"chakra-stack\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    display: \"flex\",\n    alignItems: align,\n    justifyContent: justify,\n    flexDirection: styles.flexDirection,\n    flexWrap: wrap,\n    className: _className,\n    __css: hasDivider ? {} : {\n      [selector]: styles[selector]\n    }\n  }, rest), clones);\n});\n\nif (__DEV__) {\n  Stack.displayName = \"Stack\";\n}\n/**\n * A view that arranges its children in a horizontal line.\n */\n\n\nexport var HStack = /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(Stack, _extends({\n  align: \"center\"\n}, props, {\n  direction: \"row\",\n  ref: ref\n})));\n\nif (__DEV__) {\n  HStack.displayName = \"HStack\";\n}\n/**\n * A view that arranges its children in a vertical line.\n */\n\n\nexport var VStack = /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/React.createElement(Stack, _extends({\n  align: \"center\"\n}, props, {\n  direction: \"column\",\n  ref: ref\n})));\n\nif (__DEV__) {\n  VStack.displayName = \"VStack\";\n}","map":{"version":3,"sources":["../../src/stack.tsx"],"names":["StackDivider","props","borderWidth","alignSelf","borderColor","width","height","StackItem","display","flex","minWidth","Stack","forwardRef","direction","spacing","shouldWrapChildren","rest","isInline","directionProp","styles","getStackStyles","dividerStyle","getDividerStyles","hasDivider","shouldUseChildren","validChildren","getValidChildren","clones","isLast","index","wrappedChild","_child","clonedDivider","__css","_divider","_className","cx","HStack","ref","VStack"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  ChakraComponent,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cx, getValidChildren, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles, getStackStyles, selector } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   */\n  isInline?: boolean\n}\n\nexport interface StackDividerProps extends HTMLChakraProps<\"div\"> {}\n\nexport const StackDivider: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__divider\"\n    {...props}\n    __css={{\n      ...props[\"__css\"],\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\",\n    }}\n  />\n)\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/docs/layout/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const styles = React.useMemo(() => getStackStyles({ direction, spacing }), [\n    direction,\n    spacing,\n  ])\n\n  const dividerStyle = React.useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const validChildren = getValidChildren(children)\n\n  const clones = shouldUseChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        const isLast = index + 1 === validChildren.length\n        const wrappedChild = <StackItem key={index}>{child}</StackItem>\n        const _child = shouldWrapChildren ? wrappedChild : child\n\n        if (!hasDivider) return _child\n\n        const clonedDivider = React.cloneElement(\n          divider as React.ReactElement<any>,\n          { __css: dividerStyle },\n        )\n\n        const _divider = isLast ? null : clonedDivider\n\n        return (\n          <React.Fragment key={index}>\n            {_child}\n            {_divider}\n          </React.Fragment>\n        )\n      })\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={styles.flexDirection}\n      flexWrap={wrap}\n      className={_className}\n      __css={hasDivider ? {} : { [selector]: styles[selector] }}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Stack.displayName = \"Stack\"\n}\n\n/**\n * A view that arranges its children in a horizontal line.\n */\nexport const HStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"row\" ref={ref} />\n))\n\nif (__DEV__) {\n  HStack.displayName = \"HStack\"\n}\n\n/**\n * A view that arranges its children in a vertical line.\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n))\n\nif (__DEV__) {\n  VStack.displayName = \"VStack\"\n}\n"]},"metadata":{},"sourceType":"module"}