{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/**\n * Links are accessible elements used primarily for navigation.\n *\n * It integrates well with other routing libraries like\n * React Router, Reach Router and Next.js Link.\n *\n * @example\n *\n * ```jsx\n * <Link as={ReactRouterLink} to=\"/home\">Home</Link>\n * ```\n *\n * @see Docs https://chakra-ui.com/docs/layout/link\n */\n\nexport var Link = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyleConfig(\"Link\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    className,\n    isExternal\n  } = _omitThemingProps,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"className\", \"isExternal\"]);\n\n  return /*#__PURE__*/React.createElement(chakra.a, _extends({\n    target: isExternal ? \"_blank\" : undefined,\n    rel: isExternal ? \"noopener noreferrer\" : undefined,\n    ref: ref,\n    className: cx(\"chakra-link\", className)\n  }, rest, {\n    __css: styles\n  }));\n});\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}","map":{"version":3,"sources":["../../src/link.tsx"],"names":["Link","forwardRef","styles","useStyleConfig","isExternal","rest","omitThemingProps","cx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,MAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,cAAA,QAAA,mBAAA;AAQA,SAAA,EAAA,EAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMA,IAAI,GAAA,aAAGC,UAAU,CAAiB,CAAA,KAAA,EAAA,GAAA,KAAgB;AAC7D,MAAMC,MAAM,GAAGC,cAAc,CAAA,MAAA,EAA7B,KAA6B,CAA7B;;AACA,MAAA,iBAAA,GAA2CG,gBAAgB,CAA3D,KAA2D,CAA3D;AAAA,MAAM;AAAA,IAAA,SAAA;AAAaF,IAAAA;AAAb,MAAN,iBAAA;AAAA,MAAkCC,IAAlC,GAAA,6BAAA,CAAA,iBAAA,EAAA,CAAA,WAAA,EAAA,YAAA,CAAA,CAAA;;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,CAAA,EAAA,QAAA,CAAA;AACE,IAAA,MAAM,EAAED,UAAU,GAAA,QAAA,GADpB,SAAA;AAEE,IAAA,GAAG,EAAEA,UAAU,GAAA,qBAAA,GAFjB,SAAA;AAGE,IAAA,GAAG,EAHL,GAAA;AAIE,IAAA,SAAS,EAAEG,EAAE,CAAA,aAAA,EAAA,SAAA;AAJf,GAAA,EAAA,IAAA,EAAA;AAME,IAAA,KAAK,EAAEL;AANT,GAAA,CAAA,CADF;AAJK,CAAuB,CAAvB;;AAgBP,IAAA,OAAA,EAAa;AACXF,EAAAA,IAAI,CAAJA,WAAAA,GAAAA,MAAAA;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface LinkProps extends HTMLChakraProps<\"a\">, ThemingProps {\n  /**\n   *  If `true`, the link will open in new tab\n   */\n  isExternal?: boolean\n}\n\n/**\n * Links are accessible elements used primarily for navigation.\n *\n * It integrates well with other routing libraries like\n * React Router, Reach Router and Next.js Link.\n *\n * @example\n *\n * ```jsx\n * <Link as={ReactRouterLink} to=\"/home\">Home</Link>\n * ```\n *\n * @see Docs https://chakra-ui.com/docs/layout/link\n */\nexport const Link = forwardRef<LinkProps, \"a\">((props, ref) => {\n  const styles = useStyleConfig(\"Link\", props)\n  const { className, isExternal, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.a\n      target={isExternal ? \"_blank\" : undefined}\n      rel={isExternal ? \"noopener noreferrer\" : undefined}\n      ref={ref}\n      className={cx(\"chakra-link\", className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Link.displayName = \"Link\"\n}\n"]},"metadata":{},"sourceType":"module"}