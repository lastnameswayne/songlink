{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useImage } from \"@chakra-ui/image\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/**\n * AvatarBadge used to show extra badge to the top-right\n * or bottom-right corner of an avatar.\n */\n\nexport var AvatarBadge = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useStyles();\n\n  var badgeStyles = _extends({\n    position: \"absolute\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    right: \"0\",\n    bottom: \"0\"\n  }, styles.badge);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, props, {\n    className: cx(\"chakra-avatar__badge\", props.className),\n    __css: badgeStyles\n  }));\n});\n\nif (__DEV__) {\n  AvatarBadge.displayName = \"AvatarBadge\";\n}\n\nfunction initials(name) {\n  var [firstName, lastName] = name.split(\" \");\n  return firstName && lastName ? \"\" + firstName.charAt(0) + lastName.charAt(0) : firstName.charAt(0);\n}\n/**\n * The avatar name container\n */\n\n\nvar AvatarName = props => {\n  var {\n    name,\n    getInitials\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"name\", \"getInitials\"]);\n\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    \"aria-label\": name\n  }, rest, {\n    __css: styles.label\n  }), name ? getInitials == null ? void 0 : getInitials(name) : null);\n};\n/**\n * Fallback avatar react component.\n * This should be a generic svg used to represent an avatar\n */\n\n\nvar DefaultIcon = props => /*#__PURE__*/React.createElement(chakra.svg, _extends({\n  viewBox: \"0 0 128 128\",\n  color: \"#fff\",\n  width: \"100%\",\n  height: \"100%\"\n}, props), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n}));\n\nexport var baseStyle = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0\n};\n/**\n * Avatar component that renders an user avatar with\n * support for fallback avatar and name-only avatars\n */\n\nexport var Avatar = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Avatar\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    src,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    getInitials = initials,\n    icon = /*#__PURE__*/React.createElement(DefaultIcon, null),\n    loading,\n    children,\n    borderColor\n  } = _omitThemingProps,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"src\", \"name\", \"showBorder\", \"borderRadius\", \"onError\", \"getInitials\", \"icon\", \"loading\", \"children\", \"borderColor\"]);\n\n  var avatarStyles = _extends({\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : undefined\n  }, baseStyle, styles.container);\n\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor;\n  }\n\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    ref: ref\n  }, rest, {\n    className: cx(\"chakra-avatar\", props.className),\n    __css: avatarStyles\n  }), /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(AvatarImage, {\n    src: src,\n    loading: loading,\n    onError: onError,\n    getInitials: getInitials,\n    name: name,\n    borderRadius: borderRadius,\n    icon: icon\n  }), children));\n});\n\nif (__DEV__) {\n  Avatar.displayName = \"Avatar\";\n}\n\nvar AvatarImage = _ref => {\n  var {\n    src,\n    onError,\n    getInitials,\n    name,\n    borderRadius,\n    loading,\n    icon = /*#__PURE__*/React.createElement(DefaultIcon, null)\n  } = _ref;\n  /**\n   * use the image hook to only show the image when it has loaded\n   */\n\n  var status = useImage({\n    src,\n    onError\n  });\n  var hasLoaded = status === \"loaded\";\n  /**\n   * Fallback avatar applies under 2 conditions:\n   * - If `src` was passed and the image has not loaded or failed to load\n   * - If `src` wasn't passed\n   *\n   * In this case, we'll show either the name avatar or default avatar\n   */\n\n  var showFallback = !src || !hasLoaded;\n\n  if (showFallback) {\n    return name ? /*#__PURE__*/React.createElement(AvatarName, {\n      className: \"chakra-avatar__initials\",\n      getInitials: getInitials,\n      name: name\n    }) : /*#__PURE__*/React.cloneElement(icon, {\n      role: \"img\"\n    });\n  }\n  /**\n   * If `src` was passed and the image has loaded, we'll show it\n   */\n\n\n  return /*#__PURE__*/React.createElement(chakra.img, {\n    src: src,\n    alt: name,\n    className: \"chakra-avatar__img\",\n    loading: loading,\n    __css: {\n      width: \"100%\",\n      height: \"100%\",\n      objectFit: \"cover\",\n      borderRadius\n    }\n  });\n};\n\nif (__DEV__) {\n  AvatarImage.displayName = \"AvatarImage\";\n}","map":{"version":3,"sources":["../../src/avatar.tsx"],"names":["AvatarBadge","forwardRef","styles","useStyles","badgeStyles","position","display","alignItems","justifyContent","right","bottom","ref","cx","props","name","firstName","lastName","AvatarName","getInitials","rest","label","DefaultIcon","baseStyle","textAlign","textTransform","fontWeight","flexShrink","Avatar","useMultiStyleConfig","borderRadius","icon","borderColor","omitThemingProps","avatarStyles","borderWidth","showBorder","undefined","AvatarImage","status","useImage","onError","hasLoaded","showFallback","role","width","height","objectFit"],"mappings":"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","sourcesContent":["import type { ImageProps } from \"@chakra-ui/image\"\nimport { useImage } from \"@chakra-ui/image\"\nimport type {\n  ChakraComponent,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface AvatarOptions {\n  /**\n   * The name of the person in the avatar.\n   *\n   * - if `src` has loaded, the name will be used as the `alt` attribute of the `img`\n   * - If `src` is not loaded, the name will be used to create the initials\n   */\n  name?: string\n  /**\n   * The size of the avatar.\n   */\n  size?: string\n  /**\n   * If `true`, the `Avatar` will show a border around it.\n   *\n   * Best for a group of avatars\n   */\n  showBorder?: boolean\n  /**\n   * The badge at the bottom right corner of the avatar.\n   */\n  children?: React.ReactNode\n  /**\n   * The image url of the `Avatar`\n   */\n  src?: string\n  /**\n   * List of sources to use for different screen resolutions\n   */\n  srcSet?: string\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * The border color of the avatar\n   * @type SystemProps[\"borderColor\"]\n   */\n  borderColor?: SystemProps[\"borderColor\"]\n  /**\n   * Function called when image failed to load\n   */\n  onError?: () => void\n  /**\n   * The default avatar used as fallback when `name`, and `src`\n   * is not specified.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * Function to get the initials to display\n   */\n  getInitials?: (name: string) => string\n}\n\nexport interface AvatarBadgeProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * AvatarBadge used to show extra badge to the top-right\n * or bottom-right corner of an avatar.\n */\nexport const AvatarBadge = forwardRef<AvatarBadgeProps, \"div\">((props, ref) => {\n  const styles = useStyles()\n\n  const badgeStyles: SystemStyleObject = {\n    position: \"absolute\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    right: \"0\",\n    bottom: \"0\",\n    ...styles.badge,\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      {...props}\n      className={cx(\"chakra-avatar__badge\", props.className)}\n      __css={badgeStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  AvatarBadge.displayName = \"AvatarBadge\"\n}\n\nfunction initials(name: string) {\n  const [firstName, lastName] = name.split(\" \")\n  return firstName && lastName\n    ? `${firstName.charAt(0)}${lastName.charAt(0)}`\n    : firstName.charAt(0)\n}\n\ninterface AvatarNameProps\n  extends HTMLChakraProps<\"div\">,\n    Pick<AvatarOptions, \"name\" | \"getInitials\"> {}\n\n/**\n * The avatar name container\n */\nconst AvatarName: React.FC<AvatarNameProps> = (props) => {\n  const { name, getInitials, ...rest } = props\n  const styles = useStyles()\n\n  return (\n    <chakra.div aria-label={name} {...rest} __css={styles.label}>\n      {name ? getInitials?.(name) : null}\n    </chakra.div>\n  )\n}\n\n/**\n * Fallback avatar react component.\n * This should be a generic svg used to represent an avatar\n */\nconst DefaultIcon: ChakraComponent<\"svg\"> = (props) => (\n  <chakra.svg\n    viewBox=\"0 0 128 128\"\n    color=\"#fff\"\n    width=\"100%\"\n    height=\"100%\"\n    {...props}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n    />\n    <path\n      fill=\"currentColor\"\n      d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n    />\n  </chakra.svg>\n)\n\nexport const baseStyle: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0,\n}\n\nexport interface AvatarProps\n  extends Omit<HTMLChakraProps<\"span\">, \"onError\">,\n    AvatarOptions,\n    ThemingProps {}\n\n/**\n * Avatar component that renders an user avatar with\n * support for fallback avatar and name-only avatars\n */\nexport const Avatar = forwardRef<AvatarProps, \"span\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props)\n\n  const {\n    src,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    getInitials = initials,\n    icon = <DefaultIcon />,\n    loading,\n    children,\n    borderColor,\n    ...rest\n  } = omitThemingProps(props)\n\n  const avatarStyles: SystemStyleObject = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : undefined,\n    ...baseStyle,\n    ...styles.container,\n  }\n\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor\n  }\n\n  return (\n    <chakra.span\n      ref={ref}\n      {...rest}\n      className={cx(\"chakra-avatar\", props.className)}\n      __css={avatarStyles}\n    >\n      <StylesProvider value={styles}>\n        <AvatarImage\n          src={src}\n          loading={loading}\n          onError={onError}\n          getInitials={getInitials}\n          name={name}\n          borderRadius={borderRadius}\n          icon={icon}\n        />\n        {children}\n      </StylesProvider>\n    </chakra.span>\n  )\n})\n\nif (__DEV__) {\n  Avatar.displayName = \"Avatar\"\n}\n\ninterface AvatarImageProps\n  extends ImageProps,\n    Pick<AvatarProps, \"getInitials\" | \"borderRadius\" | \"icon\" | \"name\"> {}\n\nconst AvatarImage: React.FC<AvatarImageProps> = ({\n  src,\n  onError,\n  getInitials,\n  name,\n  borderRadius,\n  loading,\n  icon = <DefaultIcon />,\n}) => {\n  /**\n   * use the image hook to only show the image when it has loaded\n   */\n  const status = useImage({ src, onError })\n\n  const hasLoaded = status === \"loaded\"\n\n  /**\n   * Fallback avatar applies under 2 conditions:\n   * - If `src` was passed and the image has not loaded or failed to load\n   * - If `src` wasn't passed\n   *\n   * In this case, we'll show either the name avatar or default avatar\n   */\n  const showFallback = !src || !hasLoaded\n\n  if (showFallback) {\n    return name ? (\n      <AvatarName\n        className=\"chakra-avatar__initials\"\n        getInitials={getInitials}\n        name={name}\n      />\n    ) : (\n      React.cloneElement(icon, { role: \"img\" })\n    )\n  }\n\n  /**\n   * If `src` was passed and the image has loaded, we'll show it\n   */\n  return (\n    <chakra.img\n      src={src}\n      alt={name}\n      className=\"chakra-avatar__img\"\n      loading={loading}\n      __css={{\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n        borderRadius,\n      }}\n    />\n  )\n}\n\nif (__DEV__) {\n  AvatarImage.displayName = \"AvatarImage\"\n}\n"]},"metadata":{},"sourceType":"module"}