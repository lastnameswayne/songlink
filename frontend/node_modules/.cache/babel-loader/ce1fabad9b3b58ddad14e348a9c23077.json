{"ast":null,"code":"import { getCommonParent, getTabbableNodes, getAllTabbableNodes, parentAutofocusables } from './utils/DOMutils';\nimport pickFirstFocus, { pickFocusable } from './utils/firstFocus';\nimport getAllAffectedNodes from './utils/all-affected';\nimport { asArray } from './utils/array';\nimport { correctNodes } from './utils/correctFocus';\n\nvar findAutoFocused = function findAutoFocused(autoFocusables) {\n  return function (node) {\n    return !!node.autofocus || node.dataset && !!node.dataset.autofocus || autoFocusables.indexOf(node) >= 0;\n  };\n};\n\nvar isGuard = function isGuard(node) {\n  return node && node.dataset && node.dataset.focusGuard;\n};\n\nvar notAGuard = function notAGuard(node) {\n  return !isGuard(node);\n};\n\nexport var NEW_FOCUS = 'NEW_FOCUS';\nexport var newFocus = function newFocus(innerNodes, outerNodes, activeElement, lastNode) {\n  var cnt = innerNodes.length;\n  var firstFocus = innerNodes[0];\n  var lastFocus = innerNodes[cnt - 1];\n  var isOnGuard = isGuard(activeElement); // focus is inside\n\n  if (innerNodes.indexOf(activeElement) >= 0) {\n    return undefined;\n  }\n\n  var activeIndex = outerNodes.indexOf(activeElement);\n  var lastIndex = outerNodes.indexOf(lastNode || activeIndex);\n  var lastNodeInside = innerNodes.indexOf(lastNode);\n  var indexDiff = activeIndex - lastIndex;\n  var firstNodeIndex = outerNodes.indexOf(firstFocus);\n  var lastNodeIndex = outerNodes.indexOf(lastFocus);\n  var correctedNodes = correctNodes(outerNodes);\n  var correctedIndexDiff = correctedNodes.indexOf(activeElement) - correctedNodes.indexOf(lastNode || activeIndex);\n  var returnFirstNode = pickFocusable(innerNodes, 0);\n  var returnLastNode = pickFocusable(innerNodes, cnt - 1); // new focus\n\n  if (activeIndex === -1 || lastNodeInside === -1) {\n    return NEW_FOCUS;\n  } // old focus\n\n\n  if (!indexDiff && lastNodeInside >= 0) {\n    return lastNodeInside;\n  } // first element\n\n\n  if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {\n    return returnLastNode;\n  } // last element\n\n\n  if (activeIndex >= lastNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {\n    return returnFirstNode;\n  } // jump out, but not on the guard\n\n\n  if (indexDiff && Math.abs(correctedIndexDiff) > 1) {\n    return lastNodeInside;\n  } // focus above lock\n\n\n  if (activeIndex <= firstNodeIndex) {\n    return returnLastNode;\n  } // focus below lock\n\n\n  if (activeIndex > lastNodeIndex) {\n    return returnFirstNode;\n  } // index is inside tab order, but outside Lock\n\n\n  if (indexDiff) {\n    if (Math.abs(indexDiff) > 1) {\n      return lastNodeInside;\n    }\n\n    return (cnt + lastNodeInside + indexDiff) % cnt;\n  } // do nothing\n\n\n  return undefined;\n};\n\nvar getTopCommonParent = function getTopCommonParent(baseActiveElement, leftEntry, rightEntries) {\n  var activeElements = asArray(baseActiveElement);\n  var leftEntries = asArray(leftEntry);\n  var activeElement = activeElements[0];\n  var topCommon = null;\n  leftEntries.filter(Boolean).forEach(function (entry) {\n    topCommon = getCommonParent(topCommon || entry, entry) || topCommon;\n    rightEntries.filter(Boolean).forEach(function (subEntry) {\n      var common = getCommonParent(activeElement, subEntry);\n\n      if (common) {\n        if (!topCommon || common.contains(topCommon)) {\n          topCommon = common;\n        } else {\n          topCommon = getCommonParent(common, topCommon);\n        }\n      }\n    });\n  });\n  return topCommon;\n};\n\nvar allParentAutofocusables = function allParentAutofocusables(entries) {\n  return entries.reduce(function (acc, node) {\n    return acc.concat(parentAutofocusables(node));\n  }, []);\n};\n\nvar reorderNodes = function reorderNodes(srcNodes, dstNodes) {\n  var remap = new Map(); // no Set(dstNodes) for IE11 :(\n\n  dstNodes.forEach(function (entity) {\n    return remap.set(entity.node, entity);\n  }); // remap to dstNodes\n\n  return srcNodes.map(function (node) {\n    return remap.get(node);\n  }).filter(Boolean);\n};\n\nexport var getFocusabledIn = function getFocusabledIn(topNode) {\n  var entries = getAllAffectedNodes(topNode).filter(notAGuard);\n  var commonParent = getTopCommonParent(topNode, topNode, entries);\n  var outerNodes = getTabbableNodes([commonParent], true);\n  var innerElements = getTabbableNodes(entries).filter(function (_ref) {\n    var node = _ref.node;\n    return notAGuard(node);\n  }).map(function (_ref2) {\n    var node = _ref2.node;\n    return node;\n  });\n  return outerNodes.map(function (_ref3) {\n    var node = _ref3.node,\n        index = _ref3.index;\n    return {\n      node: node,\n      index: index,\n      lockItem: innerElements.indexOf(node) >= 0,\n      guard: isGuard(node)\n    };\n  });\n};\n\nvar getFocusMerge = function getFocusMerge(topNode, lastNode) {\n  var activeElement = document && document.activeElement;\n  var entries = getAllAffectedNodes(topNode).filter(notAGuard);\n  var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);\n  var anyFocusable = getAllTabbableNodes(entries);\n  var innerElements = getTabbableNodes(entries).filter(function (_ref4) {\n    var node = _ref4.node;\n    return notAGuard(node);\n  });\n\n  if (!innerElements[0]) {\n    innerElements = anyFocusable;\n\n    if (!innerElements[0]) {\n      return undefined;\n    }\n  }\n\n  var outerNodes = getAllTabbableNodes([commonParent]).map(function (_ref5) {\n    var node = _ref5.node;\n    return node;\n  });\n  var orderedInnerElements = reorderNodes(outerNodes, innerElements);\n  var innerNodes = orderedInnerElements.map(function (_ref6) {\n    var node = _ref6.node;\n    return node;\n  });\n  var newId = newFocus(innerNodes, outerNodes, activeElement, lastNode);\n\n  if (newId === \"NEW_FOCUS\") {\n    var autoFocusable = anyFocusable.map(function (_ref7) {\n      var node = _ref7.node;\n      return node;\n    }).filter(findAutoFocused(allParentAutofocusables(entries)));\n    return {\n      node: autoFocusable && autoFocusable.length ? pickFirstFocus(autoFocusable) : pickFirstFocus(innerNodes)\n    };\n  }\n\n  if (newId === undefined) {\n    return newId;\n  }\n\n  return orderedInnerElements[newId];\n};\n\nexport default getFocusMerge;","map":{"version":3,"sources":["/home/swayne/Documents/reactprojects/spotifyAPI/my-app/node_modules/focus-lock/dist/es2015/focusMerge.js"],"names":["getCommonParent","getTabbableNodes","getAllTabbableNodes","parentAutofocusables","pickFirstFocus","pickFocusable","getAllAffectedNodes","asArray","correctNodes","findAutoFocused","autoFocusables","node","autofocus","dataset","indexOf","isGuard","focusGuard","notAGuard","NEW_FOCUS","newFocus","innerNodes","outerNodes","activeElement","lastNode","cnt","length","firstFocus","lastFocus","isOnGuard","undefined","activeIndex","lastIndex","lastNodeInside","indexDiff","firstNodeIndex","lastNodeIndex","correctedNodes","correctedIndexDiff","returnFirstNode","returnLastNode","Math","abs","getTopCommonParent","baseActiveElement","leftEntry","rightEntries","activeElements","leftEntries","topCommon","filter","Boolean","forEach","entry","subEntry","common","contains","allParentAutofocusables","entries","reduce","acc","concat","reorderNodes","srcNodes","dstNodes","remap","Map","entity","set","map","get","getFocusabledIn","topNode","commonParent","innerElements","_ref","_ref2","_ref3","index","lockItem","guard","getFocusMerge","document","anyFocusable","_ref4","_ref5","orderedInnerElements","_ref6","newId","autoFocusable","_ref7"],"mappings":"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","sourcesContent":["import { getCommonParent, getTabbableNodes, getAllTabbableNodes, parentAutofocusables } from './utils/DOMutils';\nimport pickFirstFocus, { pickFocusable } from './utils/firstFocus';\nimport getAllAffectedNodes from './utils/all-affected';\nimport { asArray } from './utils/array';\nimport { correctNodes } from './utils/correctFocus';\n\nvar findAutoFocused = function findAutoFocused(autoFocusables) {\n  return function (node) {\n    return !!node.autofocus || node.dataset && !!node.dataset.autofocus || autoFocusables.indexOf(node) >= 0;\n  };\n};\n\nvar isGuard = function isGuard(node) {\n  return node && node.dataset && node.dataset.focusGuard;\n};\nvar notAGuard = function notAGuard(node) {\n  return !isGuard(node);\n};\n\nexport var NEW_FOCUS = 'NEW_FOCUS';\n\nexport var newFocus = function newFocus(innerNodes, outerNodes, activeElement, lastNode) {\n  var cnt = innerNodes.length;\n  var firstFocus = innerNodes[0];\n  var lastFocus = innerNodes[cnt - 1];\n  var isOnGuard = isGuard(activeElement);\n\n  // focus is inside\n  if (innerNodes.indexOf(activeElement) >= 0) {\n    return undefined;\n  }\n\n  var activeIndex = outerNodes.indexOf(activeElement);\n  var lastIndex = outerNodes.indexOf(lastNode || activeIndex);\n  var lastNodeInside = innerNodes.indexOf(lastNode);\n  var indexDiff = activeIndex - lastIndex;\n  var firstNodeIndex = outerNodes.indexOf(firstFocus);\n  var lastNodeIndex = outerNodes.indexOf(lastFocus);\n\n  var correctedNodes = correctNodes(outerNodes);\n  var correctedIndexDiff = correctedNodes.indexOf(activeElement) - correctedNodes.indexOf(lastNode || activeIndex);\n\n  var returnFirstNode = pickFocusable(innerNodes, 0);\n  var returnLastNode = pickFocusable(innerNodes, cnt - 1);\n\n  // new focus\n  if (activeIndex === -1 || lastNodeInside === -1) {\n    return NEW_FOCUS;\n  }\n  // old focus\n  if (!indexDiff && lastNodeInside >= 0) {\n    return lastNodeInside;\n  }\n  // first element\n  if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {\n    return returnLastNode;\n  }\n  // last element\n  if (activeIndex >= lastNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {\n    return returnFirstNode;\n  }\n  // jump out, but not on the guard\n  if (indexDiff && Math.abs(correctedIndexDiff) > 1) {\n    return lastNodeInside;\n  }\n  // focus above lock\n  if (activeIndex <= firstNodeIndex) {\n    return returnLastNode;\n  }\n  // focus below lock\n  if (activeIndex > lastNodeIndex) {\n    return returnFirstNode;\n  }\n  // index is inside tab order, but outside Lock\n  if (indexDiff) {\n    if (Math.abs(indexDiff) > 1) {\n      return lastNodeInside;\n    }\n    return (cnt + lastNodeInside + indexDiff) % cnt;\n  }\n  // do nothing\n  return undefined;\n};\n\nvar getTopCommonParent = function getTopCommonParent(baseActiveElement, leftEntry, rightEntries) {\n  var activeElements = asArray(baseActiveElement);\n  var leftEntries = asArray(leftEntry);\n  var activeElement = activeElements[0];\n  var topCommon = null;\n  leftEntries.filter(Boolean).forEach(function (entry) {\n    topCommon = getCommonParent(topCommon || entry, entry) || topCommon;\n    rightEntries.filter(Boolean).forEach(function (subEntry) {\n      var common = getCommonParent(activeElement, subEntry);\n      if (common) {\n        if (!topCommon || common.contains(topCommon)) {\n          topCommon = common;\n        } else {\n          topCommon = getCommonParent(common, topCommon);\n        }\n      }\n    });\n  });\n  return topCommon;\n};\n\nvar allParentAutofocusables = function allParentAutofocusables(entries) {\n  return entries.reduce(function (acc, node) {\n    return acc.concat(parentAutofocusables(node));\n  }, []);\n};\n\nvar reorderNodes = function reorderNodes(srcNodes, dstNodes) {\n  var remap = new Map();\n  // no Set(dstNodes) for IE11 :(\n  dstNodes.forEach(function (entity) {\n    return remap.set(entity.node, entity);\n  });\n  // remap to dstNodes\n  return srcNodes.map(function (node) {\n    return remap.get(node);\n  }).filter(Boolean);\n};\n\nexport var getFocusabledIn = function getFocusabledIn(topNode) {\n  var entries = getAllAffectedNodes(topNode).filter(notAGuard);\n  var commonParent = getTopCommonParent(topNode, topNode, entries);\n  var outerNodes = getTabbableNodes([commonParent], true);\n  var innerElements = getTabbableNodes(entries).filter(function (_ref) {\n    var node = _ref.node;\n    return notAGuard(node);\n  }).map(function (_ref2) {\n    var node = _ref2.node;\n    return node;\n  });\n\n  return outerNodes.map(function (_ref3) {\n    var node = _ref3.node,\n        index = _ref3.index;\n    return {\n      node: node,\n      index: index,\n      lockItem: innerElements.indexOf(node) >= 0,\n      guard: isGuard(node)\n    };\n  });\n};\n\nvar getFocusMerge = function getFocusMerge(topNode, lastNode) {\n  var activeElement = document && document.activeElement;\n  var entries = getAllAffectedNodes(topNode).filter(notAGuard);\n\n  var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);\n\n  var anyFocusable = getAllTabbableNodes(entries);\n  var innerElements = getTabbableNodes(entries).filter(function (_ref4) {\n    var node = _ref4.node;\n    return notAGuard(node);\n  });\n\n  if (!innerElements[0]) {\n    innerElements = anyFocusable;\n    if (!innerElements[0]) {\n      return undefined;\n    }\n  }\n\n  var outerNodes = getAllTabbableNodes([commonParent]).map(function (_ref5) {\n    var node = _ref5.node;\n    return node;\n  });\n  var orderedInnerElements = reorderNodes(outerNodes, innerElements);\n  var innerNodes = orderedInnerElements.map(function (_ref6) {\n    var node = _ref6.node;\n    return node;\n  });\n\n  var newId = newFocus(innerNodes, outerNodes, activeElement, lastNode);\n\n  if (newId === \"NEW_FOCUS\") {\n    var autoFocusable = anyFocusable.map(function (_ref7) {\n      var node = _ref7.node;\n      return node;\n    }).filter(findAutoFocused(allParentAutofocusables(entries)));\n\n    return {\n      node: autoFocusable && autoFocusable.length ? pickFirstFocus(autoFocusable) : pickFirstFocus(innerNodes)\n    };\n  }\n\n  if (newId === undefined) {\n    return newId;\n  }\n  return orderedInnerElements[newId];\n};\n\nexport default getFocusMerge;"]},"metadata":{},"sourceType":"module"}