{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { forwardRef } from \"@chakra-ui/system\";\nimport { mapResponsive, isNumber, isNull, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { Grid } from \"./grid\";\n/**\n * SimpleGrid\n *\n * React component make that providers a simpler interface, and\n * make its easy to create responsive grid layouts.\n *\n * @see Docs https://chakra-ui.com/docs/layout/simple-grid\n */\n\nexport var SimpleGrid = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    columns,\n    spacingX,\n    spacingY,\n    spacing,\n    minChildWidth\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"columns\", \"spacingX\", \"spacingY\", \"spacing\", \"minChildWidth\"]);\n\n  var templateColumns = minChildWidth ? widthToColumns(minChildWidth) : countToColumns(columns);\n  return /*#__PURE__*/React.createElement(Grid, _extends({\n    ref: ref,\n    gap: spacing,\n    columnGap: spacingX,\n    rowGap: spacingY,\n    templateColumns: templateColumns\n  }, rest));\n});\n\nif (__DEV__) {\n  SimpleGrid.displayName = \"SimpleGrid\";\n}\n\nfunction toPx(n) {\n  return isNumber(n) ? n + \"px\" : n;\n}\n\nfunction widthToColumns(width) {\n  return mapResponsive(width, value => isNull(value) ? null : \"repeat(auto-fit, minmax(\" + toPx(value) + \", 1fr))\");\n}\n\nfunction countToColumns(count) {\n  return mapResponsive(count, value => isNull(value) ? null : \"repeat(\" + value + \", 1fr)\");\n}","map":{"version":3,"sources":["../../src/simple-grid.tsx"],"names":["SimpleGrid","forwardRef","minChildWidth","rest","templateColumns","widthToColumns","countToColumns","isNumber","n","mapResponsive","value","isNull","toPx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,UAAA,QAAA,mBAAA;AACA,SAAA,aAAA,EAAA,QAAA,EAAA,MAAA,EAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,IAAA,QAAA,QAAA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMA,UAAU,GAAA,aAAGC,UAAU,CAAyB,CAAA,KAAA,EAAA,GAAA,KAAgB;AAC3E,MAAM;AAAA,IAAA,OAAA;AAAA,IAAA,QAAA;AAAA,IAAA,QAAA;AAAA,IAAA,OAAA;AAAwCC,IAAAA;AAAxC,MAAN,KAAA;AAAA,MAAgEC,IAAhE,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,SAAA,EAAA,UAAA,EAAA,UAAA,EAAA,SAAA,EAAA,eAAA,CAAA,CAAA;;AAEA,MAAMC,eAAe,GAAGF,aAAa,GACjCG,cAAc,CADmB,aACnB,CADmB,GAEjCC,cAAc,CAFlB,OAEkB,CAFlB;AAIA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EADL,GAAA;AAEE,IAAA,GAAG,EAFL,OAAA;AAGE,IAAA,SAAS,EAHX,QAAA;AAIE,IAAA,MAAM,EAJR,QAAA;AAKE,IAAA,eAAe,EAAEF;AALnB,GAAA,EADF,IACE,CAAA,CADF;AAPK,CAA6B,CAA7B;;AAmBP,IAAA,OAAA,EAAa;AACXJ,EAAAA,UAAU,CAAVA,WAAAA,GAAAA,YAAAA;AACD;;AAED,SAAA,IAAA,CAAA,CAAA,EAAkC;AAChC,SAAOO,QAAQ,CAARA,CAAQ,CAARA,GAAiBC,CAAjBD,GAAAA,IAAAA,GAAP,CAAA;AACD;;AAED,SAAA,cAAA,CAAA,KAAA,EAAoC;AAClC,SAAOE,aAAa,CAAA,KAAA,EAASC,KAAD,IAC1BC,MAAM,CAANA,KAAM,CAANA,GAAAA,IAAAA,GAAAA,6BAAkDC,IAAI,CAAtDD,KAAsD,CAAtDA,GADF,SAAoB,CAApB;AAGD;;AAED,SAAA,cAAA,CAAA,KAAA,EAAoC;AAClC,SAAOF,aAAa,CAAA,KAAA,EAASC,KAAD,IAC1BC,MAAM,CAANA,KAAM,CAANA,GAAAA,IAAAA,GAAAA,YAAAA,KAAAA,GADF,QAAoB,CAApB;AAGD","sourcesContent":["import { ResponsiveValue, forwardRef } from \"@chakra-ui/system\"\nimport { mapResponsive, isNumber, isNull, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component make that providers a simpler interface, and\n * make its easy to create responsive grid layouts.\n *\n * @see Docs https://chakra-ui.com/docs/layout/simple-grid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">((props, ref) => {\n  const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props\n\n  const templateColumns = minChildWidth\n    ? widthToColumns(minChildWidth)\n    : countToColumns(columns)\n\n  return (\n    <Grid\n      ref={ref}\n      gap={spacing}\n      columnGap={spacingX}\n      rowGap={spacingY}\n      templateColumns={templateColumns}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  SimpleGrid.displayName = \"SimpleGrid\"\n}\n\nfunction toPx(n: string | number) {\n  return isNumber(n) ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any) {\n  return mapResponsive(width, (value) =>\n    isNull(value) ? null : `repeat(auto-fit, minmax(${toPx(value)}, 1fr))`,\n  )\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    isNull(value) ? null : `repeat(${value}, 1fr)`,\n  )\n}\n"]},"metadata":{},"sourceType":"module"}