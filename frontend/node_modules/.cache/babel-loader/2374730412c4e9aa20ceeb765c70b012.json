{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useCallback, useMemo, useState } from \"react\";\nimport { useSafeLayoutEffect, useForceUpdate } from \"@chakra-ui/hooks\";\nexport function useDescendant(props) {\n  var {\n    context,\n    element,\n    index: indexProp,\n    disabled,\n    focusable\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"context\", \"element\", \"index\", \"disabled\", \"focusable\"]);\n\n  var forceUpdate = useForceUpdate();\n  var {\n    register,\n    unregister,\n    descendants\n  } = context;\n  useSafeLayoutEffect(() => {\n    if (!element) {\n      forceUpdate();\n    }\n    /**\n     * Don't register this descendant if it is disabled and not focusable\n     */\n\n\n    if (disabled && !focusable) return undefined;\n    /**\n     * else, register the descendant\n     */\n\n    register(_extends({\n      element,\n      disabled,\n      focusable\n    }, rest));\n    /**\n     * when it unmounts, unregister the descendant\n     */\n\n    return () => {\n      if (element) {\n        unregister(element);\n      }\n    }; // eslint-disable-next-line\n  }, [element, disabled, focusable, ...Object.values(rest)]);\n  var index = indexProp != null ? indexProp : descendants.findIndex(descendant => descendant.element === element);\n  return index;\n}\nexport function useDescendants() {\n  var [descendants, setDescendants] = useState([]);\n  var register = useCallback(_ref => {\n    var {\n      element\n    } = _ref,\n        rest = _objectWithoutPropertiesLoose(_ref, [\"element\"]);\n\n    if (!element) return; // @ts-ignore\n\n    setDescendants(prevDescendants => {\n      if (prevDescendants.find(item => item.element === element) == null) {\n        var index = prevDescendants.findIndex(item => {\n          if (!item.element || !element) return false;\n          return Boolean(item.element.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_PRECEDING);\n        });\n\n        var newItem = _extends({\n          element\n        }, rest);\n\n        if (index === -1) {\n          return [...prevDescendants, newItem];\n        }\n\n        return [...prevDescendants.slice(0, index), newItem, ...prevDescendants.slice(index)];\n      }\n\n      return prevDescendants;\n    });\n  }, []);\n  var unregister = useCallback(element => {\n    if (!element) return;\n    setDescendants(descendants => descendants.filter(descendant => element !== descendant.element));\n  }, []);\n  var context = useMemo(() => ({\n    descendants,\n    register,\n    unregister\n  }), [descendants, register, unregister]);\n  return context;\n}","map":{"version":3,"sources":["../../src/use-descendant.ts"],"names":["index","focusable","rest","forceUpdate","useForceUpdate","descendants","useSafeLayoutEffect","disabled","register","unregister","Object","indexProp","descendant","useState","useCallback","element","setDescendants","prevDescendants","item","Boolean","Node","newItem","context","useMemo"],"mappings":"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","sourcesContent":["import { useCallback, useMemo, useState } from \"react\"\nimport { useSafeLayoutEffect, useForceUpdate } from \"@chakra-ui/hooks\"\n\nexport type Descendant<T extends HTMLElement, P = {}> = P & {\n  element: T | null\n  index?: number\n  disabled?: boolean\n  focusable?: boolean\n}\n\nexport interface DescendantContext<T extends HTMLElement, P = {}> {\n  descendants: Descendant<T, P>[]\n  register: (descendant: Descendant<T, P>) => void\n  unregister: (element: T) => void\n}\n\nexport type UseDescendantProps<T extends HTMLElement, P> = {\n  context: DescendantContext<T, P>\n} & Descendant<T, P>\n\nexport function useDescendant<T extends HTMLElement, P>(\n  props: UseDescendantProps<T, P>,\n) {\n  const {\n    context,\n    element,\n    index: indexProp,\n    disabled,\n    focusable,\n    ...rest\n  } = props\n\n  const forceUpdate = useForceUpdate()\n  const { register, unregister, descendants } = context\n\n  useSafeLayoutEffect(() => {\n    if (!element) {\n      forceUpdate()\n    }\n\n    /**\n     * Don't register this descendant if it is disabled and not focusable\n     */\n    if (disabled && !focusable) return undefined\n\n    /**\n     * else, register the descendant\n     */\n    register({ element, disabled, focusable, ...rest } as any)\n\n    /**\n     * when it unmounts, unregister the descendant\n     */\n    return () => {\n      if (element) {\n        unregister(element)\n      }\n    }\n    // eslint-disable-next-line\n  }, [element, disabled, focusable, ...Object.values(rest)])\n\n  const index =\n    indexProp ??\n    descendants.findIndex((descendant) => descendant.element === element)\n\n  return index\n}\n\nexport function useDescendants<T extends HTMLElement, P>() {\n  const [descendants, setDescendants] = useState<Descendant<T, P>[]>([])\n\n  const register = useCallback(({ element, ...rest }: Descendant<T, P>) => {\n    if (!element) return\n\n    // @ts-ignore\n    setDescendants((prevDescendants) => {\n      if (prevDescendants.find((item) => item.element === element) == null) {\n        const index = prevDescendants.findIndex((item) => {\n          if (!item.element || !element) return false\n\n          return Boolean(\n            item.element.compareDocumentPosition(element) &\n              Node.DOCUMENT_POSITION_PRECEDING,\n          )\n        })\n\n        const newItem = { element, ...rest }\n\n        if (index === -1) {\n          return [...prevDescendants, newItem]\n        }\n        return [\n          ...prevDescendants.slice(0, index),\n          newItem,\n          ...prevDescendants.slice(index),\n        ]\n      }\n      return prevDescendants\n    })\n  }, [])\n\n  const unregister = useCallback((element: T) => {\n    if (!element) return\n    setDescendants((descendants) =>\n      descendants.filter((descendant) => element !== descendant.element),\n    )\n  }, [])\n\n  const context = useMemo(() => ({ descendants, register, unregister }), [\n    descendants,\n    register,\n    unregister,\n  ])\n\n  return context\n}\n"]},"metadata":{},"sourceType":"module"}