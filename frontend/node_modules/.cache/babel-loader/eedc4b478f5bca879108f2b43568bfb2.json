{"ast":null,"code":"import merge from \"lodash.mergewith\";\nexport var createMediaQuery = n => \"@media screen and (min-width: \" + n + \")\";\nexport function parseResponsiveArray(options) {\n  var {\n    mediaQueries,\n    styleFunction,\n    scale,\n    value,\n    props\n  } = options;\n  var styles = {};\n  value.slice(0, mediaQueries.length).forEach((value, i) => {\n    var media = mediaQueries[i];\n    var style = styleFunction(value, scale, props);\n\n    if (!media) {\n      styles = merge({}, styles, style);\n    } else {\n      styles = merge({}, styles, {\n        [media]: merge({}, styles[media], style)\n      });\n    }\n  });\n  return styles;\n}\nexport function parseResponsiveObject(options) {\n  var {\n    breakpoints,\n    styleFunction,\n    scale,\n    value: valueObj,\n    props\n  } = options;\n  var styles = {};\n\n  for (var bp in valueObj) {\n    var breakpoint = breakpoints[bp];\n    var value = valueObj[bp];\n    var style = styleFunction(value, scale, props);\n\n    if (!breakpoint) {\n      styles = merge({}, styles, style);\n    } else {\n      var media = createMediaQuery(breakpoint);\n      styles = merge({}, styles, {\n        [media]: merge({}, styles[media], style)\n      });\n    }\n  }\n\n  return styles;\n}","map":{"version":3,"sources":["../../../src/core/parse-responsive.ts"],"names":["createMediaQuery","n","props","styles","value","mediaQueries","media","style","styleFunction","merge","breakpoint","breakpoints","valueObj"],"mappings":"AACA,OAAA,KAAA,MAAA,kBAAA;AAQA,OAAO,IAAMA,gBAAgB,GAAIC,CAAD,IAAA,mCAAA,CAAA,GAAzB,GAAA;AAaP,OAAO,SAAA,oBAAA,CAAA,OAAA,EAAoE;AACzE,MAAM;AAAA,IAAA,YAAA;AAAA,IAAA,aAAA;AAAA,IAAA,KAAA;AAAA,IAAA,KAAA;AAA6CC,IAAAA;AAA7C,MAAN,OAAA;AACA,MAAIC,MAAY,GAAhB,EAAA;AACAC,EAAAA,KAAK,CAALA,KAAAA,CAAAA,CAAAA,EAAeC,YAAY,CAA3BD,MAAAA,EAAAA,OAAAA,CAA4C,CAAA,KAAA,EAAA,CAAA,KAAc;AACxD,QAAME,KAAK,GAAGD,YAAY,CAA1B,CAA0B,CAA1B;AACA,QAAME,KAAK,GAAGC,aAAa,CAAA,KAAA,EAAA,KAAA,EAA3B,KAA2B,CAA3B;;AAEA,QAAI,CAAJ,KAAA,EAAY;AACVL,MAAAA,MAAM,GAAGM,KAAK,CAAA,EAAA,EAAA,MAAA,EAAdN,KAAc,CAAdA;AADF,KAAA,MAEO;AACLA,MAAAA,MAAM,GAAGM,KAAK,CAAA,EAAA,EAAA,MAAA,EAAa;AACzB,SAAA,KAAA,GAASA,KAAK,CAAA,EAAA,EAAKN,MAAM,CAAX,KAAW,CAAX,EAAA,KAAA;AADW,OAAb,CAAdA;AAGD;AAVHC,GAAAA;AAYA,SAAA,MAAA;AACD;AAUD,OAAO,SAAA,qBAAA,CAAA,OAAA,EAAsE;AAC3E,MAAM;AAAA,IAAA,WAAA;AAAA,IAAA,aAAA;AAAA,IAAA,KAAA;AAAqCA,IAAAA,KAAK,EAA1C,QAAA;AAAsDF,IAAAA;AAAtD,MAAN,OAAA;AAEA,MAAIC,MAAY,GAAhB,EAAA;;AAEA,OAAK,IAAL,EAAA,IAAA,QAAA,EAA2B;AACzB,QAAMO,UAAU,GAAGC,WAAW,CAA9B,EAA8B,CAA9B;AACA,QAAMP,KAAK,GAAGQ,QAAQ,CAAtB,EAAsB,CAAtB;AACA,QAAML,KAAK,GAAGC,aAAa,CAAA,KAAA,EAAA,KAAA,EAA3B,KAA2B,CAA3B;;AAEA,QAAI,CAAJ,UAAA,EAAiB;AACfL,MAAAA,MAAM,GAAGM,KAAK,CAAA,EAAA,EAAA,MAAA,EAAdN,KAAc,CAAdA;AADF,KAAA,MAEO;AACL,UAAMG,KAAK,GAAGN,gBAAgB,CAA9B,UAA8B,CAA9B;AACAG,MAAAA,MAAM,GAAGM,KAAK,CAAA,EAAA,EAAA,MAAA,EAAa;AACzB,SAAA,KAAA,GAASA,KAAK,CAAA,EAAA,EAAKN,MAAM,CAAX,KAAW,CAAX,EAAA,KAAA;AADW,OAAb,CAAdA;AAGD;AACF;;AACD,SAAA,MAAA;AACD","sourcesContent":["import { Dict } from \"@chakra-ui/utils\"\nimport merge from \"lodash.mergewith\"\nimport { StyleFunction } from \"./types\"\n\ninterface Props {\n  theme?: Dict\n  [k: string]: any\n}\n\nexport const createMediaQuery = (n: string) =>\n  `@media screen and (min-width: ${n})`\n\ntype ValueType = string | number | ((theme: Dict) => string | number)\n\ninterface ParseResponsiveArrayOptions {\n  mediaQueries: string[]\n  styleFunction: StyleFunction\n  scale: any\n  value: Array<ValueType>\n  props: Props\n}\n\nexport function parseResponsiveArray(options: ParseResponsiveArrayOptions) {\n  const { mediaQueries, styleFunction, scale, value, props } = options\n  let styles: Dict = {}\n  value.slice(0, mediaQueries.length).forEach((value, i) => {\n    const media = mediaQueries[i]\n    const style = styleFunction(value, scale, props)\n\n    if (!media) {\n      styles = merge({}, styles, style)\n    } else {\n      styles = merge({}, styles, {\n        [media]: merge({}, styles[media], style),\n      })\n    }\n  })\n  return styles\n}\n\ninterface ParseResponsiveObjectOptions {\n  breakpoints: Dict\n  styleFunction: StyleFunction\n  scale: any\n  value: Record<string, ValueType>\n  props: Props\n}\n\nexport function parseResponsiveObject(options: ParseResponsiveObjectOptions) {\n  const { breakpoints, styleFunction, scale, value: valueObj, props } = options\n\n  let styles: Dict = {}\n\n  for (const bp in valueObj) {\n    const breakpoint = breakpoints[bp]\n    const value = valueObj[bp]\n    const style = styleFunction(value, scale, props)\n\n    if (!breakpoint) {\n      styles = merge({}, styles, style)\n    } else {\n      const media = createMediaQuery(breakpoint)\n      styles = merge({}, styles, {\n        [media]: merge({}, styles[media], style),\n      })\n    }\n  }\n  return styles\n}\n"]},"metadata":{},"sourceType":"module"}