{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { getProgressProps, progress, stripe } from \"./progress.utils\";\n/**\n * ProgressLabel is used to show the numeric value of the progress.\n * @see Docs https://chakra-ui.com/docs/feedback/progress\n */\n\nexport var ProgressLabel = props => {\n  var styles = useStyles();\n\n  var labelStyles = _extends({\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\"\n  }, styles.label);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, props, {\n    __css: labelStyles\n  }));\n};\n\nif (__DEV__) {\n  ProgressLabel.displayName = \"ProgressLabel\";\n}\n/**\n * ProgressFilledTrack (Linear)\n *\n * The progress component that visually indicates the current level of the progress bar.\n * It applies `background-color` and changes its width.\n *\n * @see Docs https://chakra-ui.com/docs/components/progress\n */\n\n\nvar ProgressFilledTrack = props => {\n  var {\n    min,\n    max,\n    value,\n    isIndeterminate\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"min\", \"max\", \"value\", \"isIndeterminate\"]);\n\n  var progress = getProgressProps({\n    value,\n    min,\n    max,\n    isIndeterminate\n  });\n  var styles = useStyles();\n\n  var trackStyles = _extends({\n    height: \"100%\"\n  }, styles.filledTrack);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    style: _extends({\n      width: progress.percent + \"%\"\n    }, rest.style)\n  }, progress.bind, rest, {\n    __css: trackStyles\n  }));\n};\n/**\n * Progress (Linear)\n *\n * Progress is used to display the progress status for a task that takes a long\n * time or consists of several steps.\n *\n * It includes accessible attributes to help assistive technologies understand\n * and speak the progress values.\n *\n * @see Docs https://chakra-ui.com/docs/components/progress\n */\n\n\nexport var Progress = props => {\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    value,\n    min = 0,\n    max = 100,\n    hasStripe,\n    isAnimated,\n    children,\n    borderRadius,\n    isIndeterminate\n  } = _omitThemingProps,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"value\", \"min\", \"max\", \"hasStripe\", \"isAnimated\", \"children\", \"borderRadius\", \"isIndeterminate\"]);\n\n  var styles = useMultiStyleConfig(\"Progress\", props);\n  var stripAnimation = {\n    animation: stripe + \" 1s linear infinite\"\n  };\n  /**\n   * We should not use stripe if it is `indeterminate`\n   */\n\n  var shouldAddStripe = !isIndeterminate && hasStripe;\n  var shouldAnimateStripe = shouldAddStripe && isAnimated;\n  /**\n   * Generate styles for stripe and stripe animation\n   */\n\n  var css = _extends({}, shouldAnimateStripe && stripAnimation, isIndeterminate && {\n    position: \"absolute\",\n    willChange: \"left\",\n    minWidth: \"50%\",\n    animation: progress + \" 1s ease infinite normal none running\"\n  });\n\n  var trackStyles = _extends({\n    overflow: \"hidden\",\n    position: \"relative\"\n  }, styles.track);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    borderRadius: borderRadius,\n    __css: trackStyles\n  }, rest), /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(ProgressFilledTrack, {\n    min: min,\n    max: max,\n    value: value,\n    isIndeterminate: isIndeterminate,\n    css: css,\n    borderRadius: borderRadius\n  }), children));\n};\n\nif (__DEV__) {\n  Progress.displayName = \"Progress\";\n}","map":{"version":3,"sources":["../../src/progress.tsx"],"names":["ProgressLabel","props","styles","useStyles","labelStyles","top","left","width","textAlign","position","transform","ProgressFilledTrack","isIndeterminate","rest","progress","getProgressProps","trackStyles","height","Progress","min","max","omitThemingProps","useMultiStyleConfig","stripAnimation","animation","stripe","shouldAddStripe","shouldAnimateStripe","css","willChange","minWidth","overflow","borderRadius"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  Interpolation,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  getProgressProps,\n  GetProgressPropsOptions,\n  progress,\n  stripe,\n} from \"./progress.utils\"\n\nexport interface ProgressLabelProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * ProgressLabel is used to show the numeric value of the progress.\n * @see Docs https://chakra-ui.com/docs/feedback/progress\n */\nexport const ProgressLabel: React.FC<ProgressLabelProps> = (props) => {\n  const styles = useStyles()\n  const labelStyles: SystemStyleObject = {\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\",\n    ...styles.label,\n  }\n  return <chakra.div {...props} __css={labelStyles} />\n}\n\nif (__DEV__) {\n  ProgressLabel.displayName = \"ProgressLabel\"\n}\n\nexport interface ProgressFilledTrackProps\n  extends HTMLChakraProps<\"div\">,\n    GetProgressPropsOptions {}\n\n/**\n * ProgressFilledTrack (Linear)\n *\n * The progress component that visually indicates the current level of the progress bar.\n * It applies `background-color` and changes its width.\n *\n * @see Docs https://chakra-ui.com/docs/components/progress\n */\nconst ProgressFilledTrack: React.FC<ProgressFilledTrackProps> = (props) => {\n  const { min, max, value, isIndeterminate, ...rest } = props\n  const progress = getProgressProps({ value, min, max, isIndeterminate })\n\n  const styles = useStyles()\n  const trackStyles = {\n    height: \"100%\",\n    ...styles.filledTrack,\n  }\n\n  return (\n    <chakra.div\n      style={{\n        width: `${progress.percent}%`,\n        ...rest.style,\n      }}\n      {...progress.bind}\n      {...rest}\n      __css={trackStyles}\n    />\n  )\n}\n\nexport interface ProgressTrackProps extends HTMLChakraProps<\"div\"> {}\n\ninterface ProgressOptions {\n  /**\n   * The `value` of the progress indicator.\n   * If `undefined` the progress bar will be in `indeterminate` state\n   */\n  value?: number\n  /**\n   * The minimum value of the progress\n   */\n  min?: number\n  /**\n   * The maximum value of the progress\n   */\n  max?: number\n  /**\n   * If `true`, the progress bar will show stripe\n   */\n  hasStripe?: boolean\n  /**\n   * If `true`, and hasStripe is `true`, the stripes will be animated\n   */\n  isAnimated?: boolean\n  /**\n   * If `true`, the progress will be indeterminate and the `value`\n   * prop will be ignored\n   */\n  isIndeterminate?: boolean\n}\n\nexport interface ProgressProps\n  extends ProgressOptions,\n    ThemingProps,\n    HTMLChakraProps<\"div\"> {}\n\n/**\n * Progress (Linear)\n *\n * Progress is used to display the progress status for a task that takes a long\n * time or consists of several steps.\n *\n * It includes accessible attributes to help assistive technologies understand\n * and speak the progress values.\n *\n * @see Docs https://chakra-ui.com/docs/components/progress\n */\nexport const Progress: React.FC<ProgressProps> = (props) => {\n  const {\n    value,\n    min = 0,\n    max = 100,\n    hasStripe,\n    isAnimated,\n    children,\n    borderRadius,\n    isIndeterminate,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Progress\", props)\n\n  const stripAnimation = { animation: `${stripe} 1s linear infinite` }\n\n  /**\n   * We should not use stripe if it is `indeterminate`\n   */\n  const shouldAddStripe = !isIndeterminate && hasStripe\n\n  const shouldAnimateStripe = shouldAddStripe && isAnimated\n\n  /**\n   * Generate styles for stripe and stripe animation\n   */\n  const css: Interpolation<any> = {\n    ...(shouldAnimateStripe && stripAnimation),\n    ...(isIndeterminate && {\n      position: \"absolute\",\n      willChange: \"left\",\n      minWidth: \"50%\",\n      animation: `${progress} 1s ease infinite normal none running`,\n    }),\n  }\n\n  const trackStyles: SystemStyleObject = {\n    overflow: \"hidden\",\n    position: \"relative\",\n    ...styles.track,\n  }\n\n  return (\n    <chakra.div borderRadius={borderRadius} __css={trackStyles} {...rest}>\n      <StylesProvider value={styles}>\n        <ProgressFilledTrack\n          min={min}\n          max={max}\n          value={value}\n          isIndeterminate={isIndeterminate}\n          css={css}\n          borderRadius={borderRadius}\n        />\n        {children}\n      </StylesProvider>\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  Progress.displayName = \"Progress\"\n}\n"]},"metadata":{},"sourceType":"module"}