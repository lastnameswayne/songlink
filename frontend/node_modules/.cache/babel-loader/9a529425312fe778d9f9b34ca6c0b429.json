{"ast":null,"code":"import { createParser, system } from \"../core\";\nimport { t } from \"../utils\";\nimport { transformGradient } from \"../utils/parse-gradient\";\n\nfunction transformBgClip(value) {\n  return value === \"text\" ? {\n    WebkitTextFillColor: \"transparent\",\n    backgroundClip: \"text\"\n  } : {\n    backgroundClip: value\n  };\n}\n\nvar config = {\n  bg: t.colors(\"background\"),\n  bgColor: t.colors(\"backgroundColor\"),\n  background: t.colors(\"background\"),\n  backgroundColor: t.colors(\"backgroundColor\"),\n  backgroundImage: true,\n  backgroundSize: true,\n  backgroundPosition: true,\n  backgroundRepeat: true,\n  backgroundAttachment: true,\n  backgroundBlendMode: true,\n  backgroundClip: {\n    property: \"&\",\n    transform: transformBgClip\n  },\n  bgImage: t.prop(\"backgroundImage\"),\n  bgImg: t.prop(\"backgroundImage\"),\n  bgBlendMode: t.prop(\"backgroundBlendMode\"),\n  bgSize: t.prop(\"backgroundSize\"),\n  bgPosition: t.prop(\"backgroundPosition\"),\n  bgPos: t.prop(\"backgroundPosition\"),\n  bgRepeat: t.prop(\"backgroundRepeat\"),\n  bgAttachment: t.prop(\"backgroundAttachment\"),\n  bgGradient: {\n    property: \"backgroundImage\",\n    transform: transformGradient\n  },\n  bgClip: {\n    property: \"&\",\n    transform: transformBgClip\n  }\n};\nexport var background = system(config);\nexport var backgroundParser = createParser(config);","map":{"version":3,"sources":["../../../src/config/background.ts"],"names":["WebkitTextFillColor","backgroundClip","value","config","bg","t","bgColor","background","backgroundColor","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","backgroundAttachment","backgroundBlendMode","property","transform","transformBgClip","bgImage","bgImg","bgBlendMode","bgSize","bgPosition","bgPos","bgRepeat","bgAttachment","bgGradient","transformGradient","bgClip","system","backgroundParser","createParser"],"mappings":"AACA,SAAA,YAAA,EAAA,MAAA,QAAA,SAAA;AACA,SAAA,CAAA,QAAA,UAAA;AACA,SAAA,iBAAA,QAAA,yBAAA;;AAEA,SAAA,eAAA,CAAA,KAAA,EAAwC;AACtC,SAAO,KAAK,KAAL,MAAA,GACH;AAAEA,IAAAA,mBAAmB,EAArB,aAAA;AAAsCC,IAAAA,cAAc,EAAE;AAAtD,GADG,GAEH;AAAEA,IAAAA,cAAc,EAAEC;AAAlB,GAFJ;AAGD;;AAED,IAAMC,MAAc,GAAG;AACrBC,EAAAA,EAAE,EAAEC,CAAC,CAADA,MAAAA,CADiB,YACjBA,CADiB;AAErBC,EAAAA,OAAO,EAAED,CAAC,CAADA,MAAAA,CAFY,iBAEZA,CAFY;AAGrBE,EAAAA,UAAU,EAAEF,CAAC,CAADA,MAAAA,CAHS,YAGTA,CAHS;AAIrBG,EAAAA,eAAe,EAAEH,CAAC,CAADA,MAAAA,CAJI,iBAIJA,CAJI;AAKrBI,EAAAA,eAAe,EALM,IAAA;AAMrBC,EAAAA,cAAc,EANO,IAAA;AAOrBC,EAAAA,kBAAkB,EAPG,IAAA;AAQrBC,EAAAA,gBAAgB,EARK,IAAA;AASrBC,EAAAA,oBAAoB,EATC,IAAA;AAUrBC,EAAAA,mBAAmB,EAVE,IAAA;AAWrBb,EAAAA,cAAc,EAAE;AACdc,IAAAA,QAAQ,EADM,GAAA;AAEdC,IAAAA,SAAS,EAAEC;AAFG,GAXK;AAerBC,EAAAA,OAAO,EAAEb,CAAC,CAADA,IAAAA,CAfY,iBAeZA,CAfY;AAgBrBc,EAAAA,KAAK,EAAEd,CAAC,CAADA,IAAAA,CAhBc,iBAgBdA,CAhBc;AAiBrBe,EAAAA,WAAW,EAAEf,CAAC,CAADA,IAAAA,CAjBQ,qBAiBRA,CAjBQ;AAkBrBgB,EAAAA,MAAM,EAAEhB,CAAC,CAADA,IAAAA,CAlBa,gBAkBbA,CAlBa;AAmBrBiB,EAAAA,UAAU,EAAEjB,CAAC,CAADA,IAAAA,CAnBS,oBAmBTA,CAnBS;AAoBrBkB,EAAAA,KAAK,EAAElB,CAAC,CAADA,IAAAA,CApBc,oBAoBdA,CApBc;AAqBrBmB,EAAAA,QAAQ,EAAEnB,CAAC,CAADA,IAAAA,CArBW,kBAqBXA,CArBW;AAsBrBoB,EAAAA,YAAY,EAAEpB,CAAC,CAADA,IAAAA,CAtBO,sBAsBPA,CAtBO;AAuBrBqB,EAAAA,UAAU,EAAE;AACVX,IAAAA,QAAQ,EADE,iBAAA;AAEVC,IAAAA,SAAS,EAAEW;AAFD,GAvBS;AA2BrBC,EAAAA,MAAM,EAAE;AACNb,IAAAA,QAAQ,EADF,GAAA;AAENC,IAAAA,SAAS,EAAEC;AAFL;AA3Ba,CAAvB;AAwHA,OAAO,IAAMV,UAAU,GAAGsB,MAAM,CAAzB,MAAyB,CAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAGC,YAAY,CAArC,MAAqC,CAArC","sourcesContent":["import * as CSS from \"csstype\"\nimport { createParser, Config, system } from \"../core\"\nimport { ResponsiveValue, Length, t } from \"../utils\"\nimport { transformGradient } from \"../utils/parse-gradient\"\n\nfunction transformBgClip(value: string) {\n  return value === \"text\"\n    ? { WebkitTextFillColor: \"transparent\", backgroundClip: \"text\" }\n    : { backgroundClip: value }\n}\n\nconst config: Config = {\n  bg: t.colors(\"background\"),\n  bgColor: t.colors(\"backgroundColor\"),\n  background: t.colors(\"background\"),\n  backgroundColor: t.colors(\"backgroundColor\"),\n  backgroundImage: true,\n  backgroundSize: true,\n  backgroundPosition: true,\n  backgroundRepeat: true,\n  backgroundAttachment: true,\n  backgroundBlendMode: true,\n  backgroundClip: {\n    property: \"&\",\n    transform: transformBgClip,\n  },\n  bgImage: t.prop(\"backgroundImage\"),\n  bgImg: t.prop(\"backgroundImage\"),\n  bgBlendMode: t.prop(\"backgroundBlendMode\"),\n  bgSize: t.prop(\"backgroundSize\"),\n  bgPosition: t.prop(\"backgroundPosition\"),\n  bgPos: t.prop(\"backgroundPosition\"),\n  bgRepeat: t.prop(\"backgroundRepeat\"),\n  bgAttachment: t.prop(\"backgroundAttachment\"),\n  bgGradient: {\n    property: \"backgroundImage\",\n    transform: transformGradient,\n  },\n  bgClip: {\n    property: \"&\",\n    transform: transformBgClip,\n  },\n}\n\nexport interface BackgroundProps {\n  /**\n   * The CSS `background` property\n   */\n  bg?: ResponsiveValue<CSS.Property.Background<Length>>\n  /**\n   * The CSS `background-clip` property\n   */\n  bgClip?: ResponsiveValue<CSS.Property.BackgroundClip | \"text\">\n  /**\n   * The CSS `background-clip` property\n   */\n  backgroundClip?: ResponsiveValue<CSS.Property.BackgroundClip | \"text\">\n  /**\n   * The CSS `background` property\n   */\n  background?: ResponsiveValue<CSS.Property.Background<Length>>\n  /**\n   * The CSS `background-color` property\n   */\n  bgColor?: ResponsiveValue<CSS.Property.BackgroundColor>\n  /**\n   * The CSS `background-color` property\n   */\n  backgroundColor?: ResponsiveValue<CSS.Property.BackgroundColor>\n  /**\n   * The CSS `background-image` property\n   */\n  backgroundImage?: ResponsiveValue<CSS.Property.BackgroundImage>\n  /**\n   * The background-gradient shorthand\n   */\n  bgGradient?: ResponsiveValue<CSS.Property.BackgroundImage>\n  /**\n   * The CSS `background-blend-mode` property\n   */\n  backgroundBlendMode?: ResponsiveValue<CSS.Property.BackgroundBlendMode>\n  /**\n   * The CSS `background-blend-mode` property\n   */\n  bgBlendMode?: ResponsiveValue<CSS.Property.BackgroundBlendMode>\n  /**\n   * The CSS `background-size` property\n   */\n  backgroundSize?: ResponsiveValue<CSS.Property.BackgroundSize<Length>>\n  /**\n   * The CSS `background-position` property\n   */\n  bgPos?: ResponsiveValue<CSS.Property.BackgroundPosition<Length>>\n  /**\n   * The CSS `background-position` property\n   */\n  backgroundPosition?: ResponsiveValue<CSS.Property.BackgroundPosition<Length>>\n  /**\n   * The CSS `background-image` property\n   */\n  bgImage?: ResponsiveValue<CSS.Property.BackgroundImage>\n  /**\n   * The CSS `background-image` property\n   */\n  bgImg?: ResponsiveValue<CSS.Property.BackgroundImage>\n  /**\n   * The CSS `background-repeat` property\n   */\n  bgRepeat?: ResponsiveValue<CSS.Property.BackgroundRepeat>\n  /**\n   * The CSS `background-repeat` property\n   */\n  backgroundRepeat?: ResponsiveValue<CSS.Property.BackgroundRepeat>\n  /**\n   * The CSS `background-size` property\n   */\n  bgSize?: ResponsiveValue<CSS.Property.BackgroundSize<Length>>\n  /**\n   * The CSS `background-attachment` property\n   */\n  bgAttachment?: ResponsiveValue<CSS.Property.BackgroundAttachment>\n  /**\n   * The CSS `background-attachment` property\n   */\n  backgroundAttachment?: ResponsiveValue<CSS.Property.BackgroundAttachment>\n  /**\n   * The CSS `background-position` property\n   */\n  bgPosition?: ResponsiveValue<CSS.Property.BackgroundPosition<Length>>\n}\n\nexport const background = system(config)\nexport const backgroundParser = createParser(config)\n"]},"metadata":{},"sourceType":"module"}