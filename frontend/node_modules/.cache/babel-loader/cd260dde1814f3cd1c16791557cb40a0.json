{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { callAll, cx, __DEV__, dataAttr } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useCheckboxGroupContext } from \"./checkbox-group\";\nimport { CheckboxIcon } from \"./checkbox-icon\";\nimport { useCheckbox } from \"./use-checkbox\";\nvar StyledControl = chakra(\"div\", {\n  baseStyle: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    verticalAlign: \"top\",\n    userSelect: \"none\",\n    flexShrink: 0\n  }\n});\nvar StyledContainer = chakra(\"label\", {\n  baseStyle: {\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    position: \"relative\",\n    _disabled: {\n      cursor: \"not-allowed\"\n    }\n  }\n});\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox\n */\n\nexport var Checkbox = /*#__PURE__*/forwardRef((props, ref) => {\n  var group = useCheckboxGroupContext();\n\n  var mergedProps = _extends({}, group, props);\n\n  var styles = useMultiStyleConfig(\"Checkbox\", mergedProps);\n  var ownProps = omitThemingProps(mergedProps);\n\n  var {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon: Icon = /*#__PURE__*/React.createElement(CheckboxIcon, null),\n    isChecked: isCheckedProp,\n    onChange: onChangeProp\n  } = ownProps,\n      rest = _objectWithoutPropertiesLoose(ownProps, [\"spacing\", \"className\", \"children\", \"iconColor\", \"iconSize\", \"icon\", \"isChecked\", \"onChange\"]);\n\n  var isChecked = isCheckedProp;\n\n  if (group != null && group.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value);\n  }\n\n  var onChange = onChangeProp;\n\n  if (group != null && group.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n\n  var {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    htmlProps\n  } = useCheckbox(_extends({}, rest, {\n    isChecked,\n    onChange\n  }));\n\n  var _className = cx(\"chakra-checkbox\", className);\n\n  var inputProps = getInputProps({}, ref);\n  var labelProps = getLabelProps();\n  var checkboxProps = getCheckboxProps();\n\n  var iconStyles = _extends({\n    opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n    transform: state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n    transition: \"transform 200ms\",\n    fontSize: iconSize,\n    color: iconColor\n  }, styles.icon);\n\n  var clonedIcon = /*#__PURE__*/React.cloneElement(Icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked\n  });\n  return /*#__PURE__*/React.createElement(StyledContainer, _extends({\n    __css: styles.container,\n    \"data-disabled\": dataAttr(state.isDisabled),\n    className: _className\n  }, htmlProps), /*#__PURE__*/React.createElement(\"input\", _extends({\n    className: \"chakra-checkbox__input\"\n  }, inputProps)), /*#__PURE__*/React.createElement(StyledControl, _extends({\n    __css: styles.control,\n    className: \"chakra-checkbox__control\"\n  }, checkboxProps), clonedIcon), children && /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-checkbox__label\"\n  }, labelProps, {\n    __css: _extends({\n      ml: spacing\n    }, styles.label)\n  }), children));\n});\n\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\";\n}","map":{"version":3,"sources":["../../src/checkbox.tsx"],"names":["StyledControl","chakra","baseStyle","display","alignItems","justifyContent","verticalAlign","userSelect","flexShrink","StyledContainer","cursor","position","_disabled","Checkbox","forwardRef","group","useCheckboxGroupContext","mergedProps","styles","useMultiStyleConfig","ownProps","omitThemingProps","spacing","icon","Icon","isChecked","onChange","onChangeProp","rest","callAll","htmlProps","useCheckbox","_className","cx","inputProps","getInputProps","labelProps","getLabelProps","checkboxProps","getCheckboxProps","iconStyles","opacity","state","transform","transition","fontSize","color","iconColor","clonedIcon","__css","isIndeterminate","dataAttr","children","ml"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  PropsOf,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { callAll, cx, Omit, __DEV__, dataAttr } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCheckboxGroupContext } from \"./checkbox-group\"\nimport { CheckboxIcon } from \"./checkbox-icon\"\nimport { useCheckbox, UseCheckboxProps } from \"./use-checkbox\"\n\nconst StyledControl = chakra(\"div\", {\n  baseStyle: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    verticalAlign: \"top\",\n    userSelect: \"none\",\n    flexShrink: 0,\n  },\n})\n\nconst StyledContainer = chakra(\"label\", {\n  baseStyle: {\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    position: \"relative\",\n    _disabled: {\n      cursor: \"not-allowed\",\n    },\n  },\n})\n\ntype Omitted =\n  | \"size\"\n  | \"checked\"\n  | \"defaultChecked\"\n  | \"onChange\"\n  | \"onBlur\"\n  | \"value\"\n\ntype StyledControlProps = Omit<HTMLChakraProps<\"div\">, Omitted>\n\ntype BaseInputProps = Pick<\n  PropsOf<\"input\">,\n  \"onBlur\" | \"checked\" | \"defaultChecked\"\n>\n\nexport interface CheckboxProps\n  extends StyledControlProps,\n    BaseInputProps,\n    ThemingProps,\n    UseCheckboxProps {\n  /**\n   * The spacing between the checkbox and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n  /**\n   * The color of the checkbox icon when checked or indeterminate\n   */\n  iconColor?: string\n  /**\n   * The size of the checkbox icon when checked or indeterminate\n   */\n  iconSize?: string | number\n  /**\n   * The checked icon to use\n   *\n   * @type React.ReactElement\n   * @default CheckboxIcon\n   */\n  icon?: React.ReactElement\n}\n\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox\n */\nexport const Checkbox = forwardRef<CheckboxProps, \"input\">((props, ref) => {\n  const group = useCheckboxGroupContext()\n\n  const mergedProps = { ...group, ...props } as CheckboxProps\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps)\n\n  const ownProps = omitThemingProps(mergedProps)\n\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon: Icon = <CheckboxIcon />,\n    isChecked: isCheckedProp,\n    onChange: onChangeProp,\n    ...rest\n  } = ownProps\n\n  let isChecked = isCheckedProp\n  if (group?.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value)\n  }\n\n  let onChange = onChangeProp\n  if (group?.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp)\n  }\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    htmlProps,\n  } = useCheckbox({\n    ...rest,\n    isChecked,\n    onChange,\n  })\n\n  const _className = cx(\"chakra-checkbox\", className)\n\n  const inputProps = getInputProps({}, ref)\n  const labelProps = getLabelProps()\n  const checkboxProps = getCheckboxProps()\n\n  const iconStyles: SystemStyleObject = {\n    opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n    transform:\n      state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n    transition: \"transform 200ms\",\n    fontSize: iconSize,\n    color: iconColor,\n    ...styles.icon,\n  }\n\n  const clonedIcon = React.cloneElement(Icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked,\n  })\n\n  return (\n    <StyledContainer\n      __css={styles.container}\n      data-disabled={dataAttr(state.isDisabled)}\n      className={_className}\n      {...htmlProps}\n    >\n      <input className=\"chakra-checkbox__input\" {...inputProps} />\n      <StyledControl\n        __css={styles.control}\n        className=\"chakra-checkbox__control\"\n        {...checkboxProps}\n      >\n        {clonedIcon}\n      </StyledControl>\n      {children && (\n        <chakra.div\n          className=\"chakra-checkbox__label\"\n          {...labelProps}\n          __css={{\n            ml: spacing,\n            ...styles.label,\n          }}\n        >\n          {children}\n        </chakra.div>\n      )}\n    </StyledContainer>\n  )\n})\n\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\"\n}\n"]},"metadata":{},"sourceType":"module"}