{"ast":null,"code":"import { __assign } from 'tslib';\n\nvar clamp = function (min, max) {\n  return function (v) {\n    return Math.max(Math.min(v, max), min);\n  };\n};\n\nvar sanitize = function (v) {\n  return v % 1 ? Number(v.toFixed(5)) : v;\n};\n\nvar floatRegex = /(-)?(\\d[\\d\\.]*)/g;\nvar colorRegex = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2,3}\\s*\\/*\\s*[\\d\\.]+%?\\))/gi;\nvar singleColorRegex = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2,3}\\s*\\/*\\s*[\\d\\.]+%?\\))$/i;\nvar number = {\n  test: function (v) {\n    return typeof v === 'number';\n  },\n  parse: parseFloat,\n  transform: function (v) {\n    return v;\n  }\n};\n\nvar alpha = __assign(__assign({}, number), {\n  transform: clamp(0, 1)\n});\n\nvar scale = __assign(__assign({}, number), {\n  default: 1\n});\n\nvar createUnitType = function (unit) {\n  return {\n    test: function (v) {\n      return typeof v === 'string' && v.endsWith(unit) && v.split(' ').length === 1;\n    },\n    parse: parseFloat,\n    transform: function (v) {\n      return \"\" + v + unit;\n    }\n  };\n};\n\nvar degrees = createUnitType('deg');\nvar percent = createUnitType('%');\nvar px = createUnitType('px');\nvar vh = createUnitType('vh');\nvar vw = createUnitType('vw');\n\nvar progressPercentage = __assign(__assign({}, percent), {\n  parse: function (v) {\n    return percent.parse(v) / 100;\n  },\n  transform: function (v) {\n    return percent.transform(v * 100);\n  }\n});\n\nvar getValueFromFunctionString = function (value) {\n  return value.substring(value.indexOf('(') + 1, value.lastIndexOf(')'));\n};\n\nvar clampRgbUnit = clamp(0, 255);\n\nvar isRgba = function (v) {\n  return v.red !== undefined;\n};\n\nvar isHsla = function (v) {\n  return v.hue !== undefined;\n};\n\nfunction getValuesAsArray(value) {\n  return getValueFromFunctionString(value).replace(/(,|\\/)/g, ' ').split(/ \\s*/);\n}\n\nvar splitColorValues = function (terms) {\n  return function (v) {\n    if (typeof v !== 'string') return v;\n    var values = {};\n    var valuesArray = getValuesAsArray(v);\n\n    for (var i = 0; i < 4; i++) {\n      values[terms[i]] = valuesArray[i] !== undefined ? parseFloat(valuesArray[i]) : 1;\n    }\n\n    return values;\n  };\n};\n\nvar rgbaTemplate = function (_a) {\n  var red = _a.red,\n      green = _a.green,\n      blue = _a.blue,\n      _b = _a.alpha,\n      alpha = _b === void 0 ? 1 : _b;\n  return \"rgba(\" + red + \", \" + green + \", \" + blue + \", \" + alpha + \")\";\n};\n\nvar hslaTemplate = function (_a) {\n  var hue = _a.hue,\n      saturation = _a.saturation,\n      lightness = _a.lightness,\n      _b = _a.alpha,\n      alpha = _b === void 0 ? 1 : _b;\n  return \"hsla(\" + hue + \", \" + saturation + \", \" + lightness + \", \" + alpha + \")\";\n};\n\nvar rgbUnit = __assign(__assign({}, number), {\n  transform: function (v) {\n    return Math.round(clampRgbUnit(v));\n  }\n});\n\nfunction isColorString(color, colorType) {\n  return color.startsWith(colorType) && singleColorRegex.test(color);\n}\n\nvar rgba = {\n  test: function (v) {\n    return typeof v === 'string' ? isColorString(v, 'rgb') : isRgba(v);\n  },\n  parse: splitColorValues(['red', 'green', 'blue', 'alpha']),\n  transform: function (_a) {\n    var red = _a.red,\n        green = _a.green,\n        blue = _a.blue,\n        _b = _a.alpha,\n        alpha$1 = _b === void 0 ? 1 : _b;\n    return rgbaTemplate({\n      red: rgbUnit.transform(red),\n      green: rgbUnit.transform(green),\n      blue: rgbUnit.transform(blue),\n      alpha: sanitize(alpha.transform(alpha$1))\n    });\n  }\n};\nvar hsla = {\n  test: function (v) {\n    return typeof v === 'string' ? isColorString(v, 'hsl') : isHsla(v);\n  },\n  parse: splitColorValues(['hue', 'saturation', 'lightness', 'alpha']),\n  transform: function (_a) {\n    var hue = _a.hue,\n        saturation = _a.saturation,\n        lightness = _a.lightness,\n        _b = _a.alpha,\n        alpha$1 = _b === void 0 ? 1 : _b;\n    return hslaTemplate({\n      hue: Math.round(hue),\n      saturation: percent.transform(sanitize(saturation)),\n      lightness: percent.transform(sanitize(lightness)),\n      alpha: sanitize(alpha.transform(alpha$1))\n    });\n  }\n};\n\nvar hex = __assign(__assign({}, rgba), {\n  test: function (v) {\n    return typeof v === 'string' && isColorString(v, '#');\n  },\n  parse: function (v) {\n    var r = '';\n    var g = '';\n    var b = '';\n\n    if (v.length > 4) {\n      r = v.substr(1, 2);\n      g = v.substr(3, 2);\n      b = v.substr(5, 2);\n    } else {\n      r = v.substr(1, 1);\n      g = v.substr(2, 1);\n      b = v.substr(3, 1);\n      r += r;\n      g += g;\n      b += b;\n    }\n\n    return {\n      red: parseInt(r, 16),\n      green: parseInt(g, 16),\n      blue: parseInt(b, 16),\n      alpha: 1\n    };\n  }\n});\n\nvar color = {\n  test: function (v) {\n    return typeof v === 'string' && singleColorRegex.test(v) || isRgba(v) || isHsla(v);\n  },\n  parse: function (v) {\n    if (rgba.test(v)) {\n      return rgba.parse(v);\n    } else if (hsla.test(v)) {\n      return hsla.parse(v);\n    } else if (hex.test(v)) {\n      return hex.parse(v);\n    }\n\n    return v;\n  },\n  transform: function (v) {\n    if (isRgba(v)) {\n      return rgba.transform(v);\n    } else if (isHsla(v)) {\n      return hsla.transform(v);\n    }\n\n    return v;\n  }\n};\nvar COLOR_TOKEN = '${c}';\nvar NUMBER_TOKEN = '${n}';\n\nvar convertNumbersToZero = function (v) {\n  return typeof v === 'number' ? 0 : v;\n};\n\nvar complex = {\n  test: function (v) {\n    if (typeof v !== 'string' || !isNaN(v)) return false;\n    var numValues = 0;\n    var foundNumbers = v.match(floatRegex);\n    var foundColors = v.match(colorRegex);\n    if (foundNumbers) numValues += foundNumbers.length;\n    if (foundColors) numValues += foundColors.length;\n    return numValues > 0;\n  },\n  parse: function (v) {\n    var input = v;\n    var parsed = [];\n    var foundColors = input.match(colorRegex);\n\n    if (foundColors) {\n      input = input.replace(colorRegex, COLOR_TOKEN);\n      parsed.push.apply(parsed, foundColors.map(color.parse));\n    }\n\n    var foundNumbers = input.match(floatRegex);\n\n    if (foundNumbers) {\n      parsed.push.apply(parsed, foundNumbers.map(number.parse));\n    }\n\n    return parsed;\n  },\n  createTransformer: function (prop) {\n    var template = prop;\n    var token = 0;\n    var foundColors = prop.match(colorRegex);\n    var numColors = foundColors ? foundColors.length : 0;\n\n    if (foundColors) {\n      for (var i = 0; i < numColors; i++) {\n        template = template.replace(foundColors[i], COLOR_TOKEN);\n        token++;\n      }\n    }\n\n    var foundNumbers = template.match(floatRegex);\n    var numNumbers = foundNumbers ? foundNumbers.length : 0;\n\n    if (foundNumbers) {\n      for (var i = 0; i < numNumbers; i++) {\n        template = template.replace(foundNumbers[i], NUMBER_TOKEN);\n        token++;\n      }\n    }\n\n    return function (v) {\n      var output = template;\n\n      for (var i = 0; i < token; i++) {\n        output = output.replace(i < numColors ? COLOR_TOKEN : NUMBER_TOKEN, i < numColors ? color.transform(v[i]) : sanitize(v[i]));\n      }\n\n      return output;\n    };\n  },\n  getAnimatableNone: function (target) {\n    var parsedTarget = complex.parse(target);\n    var targetTransformer = complex.createTransformer(target);\n    return targetTransformer(parsedTarget.map(convertNumbersToZero));\n  }\n};\nexport { alpha, color, complex, degrees, hex, hsla, number, percent, progressPercentage, px, rgbUnit, rgba, scale, vh, vw };","map":{"version":3,"sources":["/home/swayne/Documents/reactprojects/spotifyAPI/my-app/node_modules/style-value-types/dist/style-value-types.es.js"],"names":["__assign","clamp","min","max","v","Math","sanitize","Number","toFixed","floatRegex","colorRegex","singleColorRegex","number","test","parse","parseFloat","transform","alpha","scale","default","createUnitType","unit","endsWith","split","length","degrees","percent","px","vh","vw","progressPercentage","getValueFromFunctionString","value","substring","indexOf","lastIndexOf","clampRgbUnit","isRgba","red","undefined","isHsla","hue","getValuesAsArray","replace","splitColorValues","terms","values","valuesArray","i","rgbaTemplate","_a","green","blue","_b","hslaTemplate","saturation","lightness","rgbUnit","round","isColorString","color","colorType","startsWith","rgba","alpha$1","hsla","hex","r","g","b","substr","parseInt","COLOR_TOKEN","NUMBER_TOKEN","convertNumbersToZero","complex","isNaN","numValues","foundNumbers","match","foundColors","input","parsed","push","apply","map","createTransformer","prop","template","token","numColors","numNumbers","output","getAnimatableNone","target","parsedTarget","targetTransformer"],"mappings":"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","sourcesContent":["import { __assign } from 'tslib';\n\nvar clamp = function (min, max) { return function (v) {\r\n    return Math.max(Math.min(v, max), min);\r\n}; };\r\nvar sanitize = function (v) { return (v % 1 ? Number(v.toFixed(5)) : v); };\r\nvar floatRegex = /(-)?(\\d[\\d\\.]*)/g;\r\nvar colorRegex = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2,3}\\s*\\/*\\s*[\\d\\.]+%?\\))/gi;\r\nvar singleColorRegex = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\\((-?[\\d\\.]+%?[,\\s]+){2,3}\\s*\\/*\\s*[\\d\\.]+%?\\))$/i;\n\nvar number = {\r\n    test: function (v) { return typeof v === 'number'; },\r\n    parse: parseFloat,\r\n    transform: function (v) { return v; }\r\n};\r\nvar alpha = __assign(__assign({}, number), { transform: clamp(0, 1) });\r\nvar scale = __assign(__assign({}, number), { default: 1 });\n\nvar createUnitType = function (unit) { return ({\r\n    test: function (v) {\r\n        return typeof v === 'string' && v.endsWith(unit) && v.split(' ').length === 1;\r\n    },\r\n    parse: parseFloat,\r\n    transform: function (v) { return \"\" + v + unit; }\r\n}); };\r\nvar degrees = createUnitType('deg');\r\nvar percent = createUnitType('%');\r\nvar px = createUnitType('px');\r\nvar vh = createUnitType('vh');\r\nvar vw = createUnitType('vw');\r\nvar progressPercentage = __assign(__assign({}, percent), { parse: function (v) { return percent.parse(v) / 100; }, transform: function (v) { return percent.transform(v * 100); } });\n\nvar getValueFromFunctionString = function (value) {\r\n    return value.substring(value.indexOf('(') + 1, value.lastIndexOf(')'));\r\n};\r\nvar clampRgbUnit = clamp(0, 255);\r\nvar isRgba = function (v) { return v.red !== undefined; };\r\nvar isHsla = function (v) { return v.hue !== undefined; };\r\nfunction getValuesAsArray(value) {\r\n    return getValueFromFunctionString(value)\r\n        .replace(/(,|\\/)/g, ' ')\r\n        .split(/ \\s*/);\r\n}\r\nvar splitColorValues = function (terms) {\r\n    return function (v) {\r\n        if (typeof v !== 'string')\r\n            return v;\r\n        var values = {};\r\n        var valuesArray = getValuesAsArray(v);\r\n        for (var i = 0; i < 4; i++) {\r\n            values[terms[i]] =\r\n                valuesArray[i] !== undefined ? parseFloat(valuesArray[i]) : 1;\r\n        }\r\n        return values;\r\n    };\r\n};\r\nvar rgbaTemplate = function (_a) {\r\n    var red = _a.red, green = _a.green, blue = _a.blue, _b = _a.alpha, alpha = _b === void 0 ? 1 : _b;\r\n    return \"rgba(\" + red + \", \" + green + \", \" + blue + \", \" + alpha + \")\";\r\n};\r\nvar hslaTemplate = function (_a) {\r\n    var hue = _a.hue, saturation = _a.saturation, lightness = _a.lightness, _b = _a.alpha, alpha = _b === void 0 ? 1 : _b;\r\n    return \"hsla(\" + hue + \", \" + saturation + \", \" + lightness + \", \" + alpha + \")\";\r\n};\r\nvar rgbUnit = __assign(__assign({}, number), { transform: function (v) { return Math.round(clampRgbUnit(v)); } });\r\nfunction isColorString(color, colorType) {\r\n    return color.startsWith(colorType) && singleColorRegex.test(color);\r\n}\r\nvar rgba = {\r\n    test: function (v) { return (typeof v === 'string' ? isColorString(v, 'rgb') : isRgba(v)); },\r\n    parse: splitColorValues(['red', 'green', 'blue', 'alpha']),\r\n    transform: function (_a) {\r\n        var red = _a.red, green = _a.green, blue = _a.blue, _b = _a.alpha, alpha$1 = _b === void 0 ? 1 : _b;\r\n        return rgbaTemplate({\r\n            red: rgbUnit.transform(red),\r\n            green: rgbUnit.transform(green),\r\n            blue: rgbUnit.transform(blue),\r\n            alpha: sanitize(alpha.transform(alpha$1))\r\n        });\r\n    }\r\n};\r\nvar hsla = {\r\n    test: function (v) { return (typeof v === 'string' ? isColorString(v, 'hsl') : isHsla(v)); },\r\n    parse: splitColorValues(['hue', 'saturation', 'lightness', 'alpha']),\r\n    transform: function (_a) {\r\n        var hue = _a.hue, saturation = _a.saturation, lightness = _a.lightness, _b = _a.alpha, alpha$1 = _b === void 0 ? 1 : _b;\r\n        return hslaTemplate({\r\n            hue: Math.round(hue),\r\n            saturation: percent.transform(sanitize(saturation)),\r\n            lightness: percent.transform(sanitize(lightness)),\r\n            alpha: sanitize(alpha.transform(alpha$1))\r\n        });\r\n    }\r\n};\r\nvar hex = __assign(__assign({}, rgba), { test: function (v) { return typeof v === 'string' && isColorString(v, '#'); }, parse: function (v) {\r\n        var r = '';\r\n        var g = '';\r\n        var b = '';\r\n        if (v.length > 4) {\r\n            r = v.substr(1, 2);\r\n            g = v.substr(3, 2);\r\n            b = v.substr(5, 2);\r\n        }\r\n        else {\r\n            r = v.substr(1, 1);\r\n            g = v.substr(2, 1);\r\n            b = v.substr(3, 1);\r\n            r += r;\r\n            g += g;\r\n            b += b;\r\n        }\r\n        return {\r\n            red: parseInt(r, 16),\r\n            green: parseInt(g, 16),\r\n            blue: parseInt(b, 16),\r\n            alpha: 1\r\n        };\r\n    } });\r\nvar color = {\r\n    test: function (v) {\r\n        return (typeof v === 'string' && singleColorRegex.test(v)) ||\r\n            isRgba(v) ||\r\n            isHsla(v);\r\n    },\r\n    parse: function (v) {\r\n        if (rgba.test(v)) {\r\n            return rgba.parse(v);\r\n        }\r\n        else if (hsla.test(v)) {\r\n            return hsla.parse(v);\r\n        }\r\n        else if (hex.test(v)) {\r\n            return hex.parse(v);\r\n        }\r\n        return v;\r\n    },\r\n    transform: function (v) {\r\n        if (isRgba(v)) {\r\n            return rgba.transform(v);\r\n        }\r\n        else if (isHsla(v)) {\r\n            return hsla.transform(v);\r\n        }\r\n        return v;\r\n    }\r\n};\n\nvar COLOR_TOKEN = '${c}';\r\nvar NUMBER_TOKEN = '${n}';\r\nvar convertNumbersToZero = function (v) {\r\n    return typeof v === 'number' ? 0 : v;\r\n};\r\nvar complex = {\r\n    test: function (v) {\r\n        if (typeof v !== 'string' || !isNaN(v))\r\n            return false;\r\n        var numValues = 0;\r\n        var foundNumbers = v.match(floatRegex);\r\n        var foundColors = v.match(colorRegex);\r\n        if (foundNumbers)\r\n            numValues += foundNumbers.length;\r\n        if (foundColors)\r\n            numValues += foundColors.length;\r\n        return numValues > 0;\r\n    },\r\n    parse: function (v) {\r\n        var input = v;\r\n        var parsed = [];\r\n        var foundColors = input.match(colorRegex);\r\n        if (foundColors) {\r\n            input = input.replace(colorRegex, COLOR_TOKEN);\r\n            parsed.push.apply(parsed, foundColors.map(color.parse));\r\n        }\r\n        var foundNumbers = input.match(floatRegex);\r\n        if (foundNumbers) {\r\n            parsed.push.apply(parsed, foundNumbers.map(number.parse));\r\n        }\r\n        return parsed;\r\n    },\r\n    createTransformer: function (prop) {\r\n        var template = prop;\r\n        var token = 0;\r\n        var foundColors = prop.match(colorRegex);\r\n        var numColors = foundColors ? foundColors.length : 0;\r\n        if (foundColors) {\r\n            for (var i = 0; i < numColors; i++) {\r\n                template = template.replace(foundColors[i], COLOR_TOKEN);\r\n                token++;\r\n            }\r\n        }\r\n        var foundNumbers = template.match(floatRegex);\r\n        var numNumbers = foundNumbers ? foundNumbers.length : 0;\r\n        if (foundNumbers) {\r\n            for (var i = 0; i < numNumbers; i++) {\r\n                template = template.replace(foundNumbers[i], NUMBER_TOKEN);\r\n                token++;\r\n            }\r\n        }\r\n        return function (v) {\r\n            var output = template;\r\n            for (var i = 0; i < token; i++) {\r\n                output = output.replace(i < numColors ? COLOR_TOKEN : NUMBER_TOKEN, i < numColors ? color.transform(v[i]) : sanitize(v[i]));\r\n            }\r\n            return output;\r\n        };\r\n    },\r\n    getAnimatableNone: function (target) {\r\n        var parsedTarget = complex.parse(target);\r\n        var targetTransformer = complex.createTransformer(target);\r\n        return targetTransformer(parsedTarget.map(convertNumbersToZero));\r\n    }\r\n};\n\nexport { alpha, color, complex, degrees, hex, hsla, number, percent, progressPercentage, px, rgbUnit, rgba, scale, vh, vw };\n"]},"metadata":{},"sourceType":"module"}