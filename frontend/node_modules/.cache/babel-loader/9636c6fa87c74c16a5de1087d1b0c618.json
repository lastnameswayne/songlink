{"ast":null,"code":"import { objectKeys } from \"@chakra-ui/utils\";\nvar group = {\n  hover: selector => selector + \":hover &, \" + selector + \"[data-hover] &\",\n  focus: selector => selector + \":focus &, \" + selector + \"[data-focus] &\",\n  active: selector => selector + \":active &, \" + selector + \"[data-active] &\",\n  disabled: selector => selector + \":disabled &, \" + selector + \"[data-disabled] &\",\n  invalid: selector => selector + \":invalid &, \" + selector + \"[data-invalid] &\",\n  checked: selector => selector + \":checked &, \" + selector + \"[data-checked] &\",\n  indeterminate: selector => selector + \":indeterminate &, \" + selector + \"[aria-checked=mixed] &, \" + selector + \"[data-indeterminate] &\",\n  readOnly: selector => selector + \":read-only &, \" + selector + \"[readonly] &, \" + selector + \"[data-read-only] &\",\n  expanded: selector => selector + \":read-only &, \" + selector + \"[aria-expanded=true] &, \" + selector + \"[data-expanded] &\"\n};\n\nvar toGroup = fn => merge(fn, \"[role=group]\", \"[data-group]\", \".group\");\n\nvar merge = function merge(fn) {\n  for (var _len = arguments.length, selectors = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    selectors[_key - 1] = arguments[_key];\n  }\n\n  return selectors.map(fn).join(\", \");\n};\n\nvar disabled = selector => selector + \", \" + selector + \":focus, \" + selector + \":hover\";\n\nvar disabledSelector = merge(disabled, \"&[disabled]\", \"&[aria-disabled=true]\", \"&[data-disabled]\");\nexport var pseudoSelectors = {\n  /**\n   * Styles for CSS selector `&:hover`\n   */\n  _hover: \"&:hover, &[data-hover]\",\n\n  /**\n   * Styles for CSS Selector `&:active`\n   */\n  _active: \"&:active, &[data-active]\",\n\n  /**\n   * Styles for CSS selector `&:focus`\n   *\n   */\n  _focus: \"&:focus, &[data-focus]\",\n\n  /**\n   * Styles for the highlighted state.\n   */\n  _highlighted: \"&[data-highlighted]\",\n\n  /**\n   * Styles to apply when a child of this element has received focus\n   * - CSS Selector `&:focus-within`\n   */\n  _focusWithin: \"&:focus-within\",\n  _focusVisible: \"&:focus-visible\",\n\n  /**\n   * Styles to apply when this element is disabled. The passed styles are applied to these CSS selectors:\n   * - `&[aria-disabled=true]`\n   * - `&:disabled`\n   * - `&:disabled:focus`\n   * - `&:disabled:hover`\n   * - `&:focus[aria-disabled=true]`\n   * - `&:hover[aria-disabled=true]`\n   */\n  _disabled: disabledSelector,\n\n  /**\n   * Styles for CSS Selector `&:readonly`\n   */\n  _readOnly: \"&[aria-readonly=true], &[readonly], &[data-readonly]\",\n\n  /**\n   * Styles for CSS selector `&::before`\n   *\n   * NOTE:When using this, ensure the `content` is wrapped in a backtick.\n   * @example\n   * ```jsx\n   * <Box _before={{content:`\"\"` }}/>\n   * ```\n   */\n  _before: \"&::before\",\n\n  /**\n   * Styles for CSS selector `&::after`\n   *\n   * NOTE:When using this, ensure the `content` is wrapped in a backtick.\n   * @example\n   * ```jsx\n   * <Box _after={{content:`\"\"` }}/>\n   * ```\n   */\n  _after: \"&::after\",\n  _empty: \"&:empty\",\n\n  /**\n   * Styles to apply when the ARIA attribute `aria-expanded` is `true`\n   * - CSS selector `&[aria-expanded=true]`\n   */\n  _expanded: \"&[aria-expanded=true], &[data-expanded]\",\n\n  /**\n   * Styles to apply when the ARIA attribute `aria-checked` is `true`\n   * - CSS selector `&[aria-checked=true]`\n   */\n  _checked: \"&[aria-checked=true], &[data-checked]\",\n\n  /**\n   * Styles to apply when the ARIA attribute `aria-grabbed` is `true`\n   * - CSS selector `&[aria-grabbed=true]`\n   */\n  _grabbed: \"&[aria-grabbed=true], &[data-grabbed]\",\n\n  /**\n   * Styles for CSS Selector `&[aria-pressed=true]`\n   * Typically used to style the current \"pressed\" state of toggle buttons\n   */\n  _pressed: \"&[aria-pressed=true], &[data-pressed]\",\n\n  /**\n   * Styles to apply when the ARIA attribute `aria-invalid` is `true`\n   * - CSS selector `&[aria-invalid=true]`\n   */\n  _invalid: \"&[aria-invalid=true], &[data-invalid]\",\n\n  /**\n   * Styles for the valid state\n   * - CSS selector `&[data-valid], &[data-state=valid]`\n   */\n  _valid: \"&[data-valid], &[data-state=valid]\",\n\n  /**\n   * Styles for CSS Selector `&[aria-busy=true]` or `&[data-loading=true]`.\n   * Useful for styling loading states\n   */\n  _loading: \"&[data-loading], &[aria-busy=true]\",\n\n  /**\n   * Styles to apply when the ARIA attribute `aria-selected` is `true`\n   *\n   * - CSS selector `&[aria-selected=true]`\n   */\n  _selected: \"&[aria-selected=true], &[data-selected]\",\n\n  /**\n   * Styles for CSS Selector `[hidden=true]`\n   */\n  _hidden: \"&[hidden], &[data-hidden]\",\n\n  /**\n   * Styles for CSS Selector `&:-webkit-autofill`\n   */\n  _autofill: \"&:-webkit-autofill\",\n\n  /**\n   * Styles for CSS Selector `&:nth-child(even)`\n   */\n  _even: \"&:nth-of-type(even)\",\n\n  /**\n   * Styles for CSS Selector `&:nth-child(odd)`\n   */\n  _odd: \"&:nth-of-type(odd)\",\n\n  /**\n   * Styles for CSS Selector `&:first-of-type`\n   */\n  _first: \"&:first-of-type\",\n\n  /**\n   * Styles for CSS Selector `&:last-of-type`\n   */\n  _last: \"&:last-of-type\",\n\n  /**\n   * Styles for CSS Selector `&:not(:first-of-type)`\n   */\n  _notFirst: \"&:not(:first-of-type)\",\n\n  /**\n   * Styles for CSS Selector `&:not(:last-of-type)`\n   */\n  _notLast: \"&:not(:last-of-type)\",\n\n  /**\n   * Styles for CSS Selector `&:visited`\n   */\n  _visited: \"&:visited\",\n\n  /**\n   * Used to style the active link in a navigation\n   * Styles for CSS Selector `&[aria-current=page]`\n   */\n  _activeLink: \"&[aria-current=page]\",\n\n  /**\n   * Styles to apply when the ARIA attribute `aria-checked` is `mixed`\n   * - CSS selector `&[aria-checked=mixed]`\n   */\n  _indeterminate: \"&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]\",\n\n  /**\n   * Styles to apply when parent is hovered\n   */\n  _groupHover: toGroup(group.hover),\n\n  /**\n   * Styles to apply when parent is focused\n   */\n  _groupFocus: toGroup(group.focus),\n\n  /**\n   * Styles to apply when parent is active\n   */\n  _groupActive: toGroup(group.active),\n\n  /**\n   * Styles to apply when parent is disabled\n   */\n  _groupDisabled: toGroup(group.disabled),\n\n  /**\n   * Styles to apply when parent is invalid\n   */\n  _groupInvalid: toGroup(group.invalid),\n\n  /**\n   * Styles to apply when parent is checked\n   */\n  _groupChecked: toGroup(group.checked),\n\n  /**\n   * Styles for CSS Selector `&::placeholder`.\n   */\n  _placeholder: \"&::placeholder\",\n\n  /**\n   * Styles for CSS Selector `&:fullscreen`.\n   */\n  _fullScreen: \"&:fullscreen\",\n\n  /**\n   * Styles for CSS Selector `&::selection`\n   */\n  _selection: \"&::selection\",\n\n  /**\n   * Styles for CSS Selector `[dir=rtl] &`\n   * It is applied when any parent element has `dir=\"rtl\"`\n   */\n  _rtl: \"[dir=rtl] &\"\n};\nexport var pseudoPropNames = objectKeys(pseudoSelectors);","map":{"version":3,"sources":["../../../src/pseudo/pseudo.selector.ts"],"names":["group","hover","selector","focus","active","disabled","invalid","checked","indeterminate","readOnly","expanded","toGroup","fn","merge","selectors","disabledSelector","pseudoSelectors","_hover","_active","_focus","_highlighted","_focusWithin","_focusVisible","_disabled","_readOnly","_before","_after","_empty","_expanded","_checked","_grabbed","_pressed","_invalid","_valid","_loading","_selected","_hidden","_autofill","_even","_odd","_first","_last","_notFirst","_notLast","_visited","_activeLink","_indeterminate","_groupHover","_groupFocus","_groupActive","_groupDisabled","_groupInvalid","_groupChecked","_placeholder","_fullScreen","_selection","_rtl","pseudoPropNames","objectKeys"],"mappings":"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","sourcesContent":["import { AnyFunction, objectKeys } from \"@chakra-ui/utils\"\n\nconst group = {\n  hover: (selector: string) => `${selector}:hover &, ${selector}[data-hover] &`,\n  focus: (selector: string) => `${selector}:focus &, ${selector}[data-focus] &`,\n  active: (selector: string) =>\n    `${selector}:active &, ${selector}[data-active] &`,\n  disabled: (selector: string) =>\n    `${selector}:disabled &, ${selector}[data-disabled] &`,\n  invalid: (selector: string) =>\n    `${selector}:invalid &, ${selector}[data-invalid] &`,\n  checked: (selector: string) =>\n    `${selector}:checked &, ${selector}[data-checked] &`,\n  indeterminate: (selector: string) =>\n    `${selector}:indeterminate &, ${selector}[aria-checked=mixed] &, ${selector}[data-indeterminate] &`,\n  readOnly: (selector: string) =>\n    `${selector}:read-only &, ${selector}[readonly] &, ${selector}[data-read-only] &`,\n  expanded: (selector: string) =>\n    `${selector}:read-only &, ${selector}[aria-expanded=true] &, ${selector}[data-expanded] &`,\n}\n\nconst toGroup = (fn: AnyFunction) =>\n  merge(fn, \"[role=group]\", \"[data-group]\", \".group\")\n\nconst merge = (fn: AnyFunction, ...selectors: string[]) =>\n  selectors.map(fn).join(\", \")\n\nconst disabled = (selector: string) =>\n  `${selector}, ${selector}:focus, ${selector}:hover`\n\nconst disabledSelector = merge(\n  disabled,\n  \"&[disabled]\",\n  \"&[aria-disabled=true]\",\n  \"&[data-disabled]\",\n)\n\nexport const pseudoSelectors = {\n  /**\n   * Styles for CSS selector `&:hover`\n   */\n  _hover: \"&:hover, &[data-hover]\",\n  /**\n   * Styles for CSS Selector `&:active`\n   */\n  _active: \"&:active, &[data-active]\",\n  /**\n   * Styles for CSS selector `&:focus`\n   *\n   */\n  _focus: \"&:focus, &[data-focus]\",\n  /**\n   * Styles for the highlighted state.\n   */\n  _highlighted: \"&[data-highlighted]\",\n  /**\n   * Styles to apply when a child of this element has received focus\n   * - CSS Selector `&:focus-within`\n   */\n  _focusWithin: \"&:focus-within\",\n  _focusVisible: \"&:focus-visible\",\n  /**\n   * Styles to apply when this element is disabled. The passed styles are applied to these CSS selectors:\n   * - `&[aria-disabled=true]`\n   * - `&:disabled`\n   * - `&:disabled:focus`\n   * - `&:disabled:hover`\n   * - `&:focus[aria-disabled=true]`\n   * - `&:hover[aria-disabled=true]`\n   */\n  _disabled: disabledSelector,\n  /**\n   * Styles for CSS Selector `&:readonly`\n   */\n  _readOnly: \"&[aria-readonly=true], &[readonly], &[data-readonly]\",\n  /**\n   * Styles for CSS selector `&::before`\n   *\n   * NOTE:When using this, ensure the `content` is wrapped in a backtick.\n   * @example\n   * ```jsx\n   * <Box _before={{content:`\"\"` }}/>\n   * ```\n   */\n  _before: \"&::before\",\n  /**\n   * Styles for CSS selector `&::after`\n   *\n   * NOTE:When using this, ensure the `content` is wrapped in a backtick.\n   * @example\n   * ```jsx\n   * <Box _after={{content:`\"\"` }}/>\n   * ```\n   */\n  _after: \"&::after\",\n  _empty: \"&:empty\",\n  /**\n   * Styles to apply when the ARIA attribute `aria-expanded` is `true`\n   * - CSS selector `&[aria-expanded=true]`\n   */\n  _expanded: \"&[aria-expanded=true], &[data-expanded]\",\n  /**\n   * Styles to apply when the ARIA attribute `aria-checked` is `true`\n   * - CSS selector `&[aria-checked=true]`\n   */\n  _checked: \"&[aria-checked=true], &[data-checked]\",\n  /**\n   * Styles to apply when the ARIA attribute `aria-grabbed` is `true`\n   * - CSS selector `&[aria-grabbed=true]`\n   */\n  _grabbed: \"&[aria-grabbed=true], &[data-grabbed]\",\n  /**\n   * Styles for CSS Selector `&[aria-pressed=true]`\n   * Typically used to style the current \"pressed\" state of toggle buttons\n   */\n  _pressed: \"&[aria-pressed=true], &[data-pressed]\",\n  /**\n   * Styles to apply when the ARIA attribute `aria-invalid` is `true`\n   * - CSS selector `&[aria-invalid=true]`\n   */\n  _invalid: \"&[aria-invalid=true], &[data-invalid]\",\n  /**\n   * Styles for the valid state\n   * - CSS selector `&[data-valid], &[data-state=valid]`\n   */\n  _valid: \"&[data-valid], &[data-state=valid]\",\n  /**\n   * Styles for CSS Selector `&[aria-busy=true]` or `&[data-loading=true]`.\n   * Useful for styling loading states\n   */\n  _loading: \"&[data-loading], &[aria-busy=true]\",\n  /**\n   * Styles to apply when the ARIA attribute `aria-selected` is `true`\n   *\n   * - CSS selector `&[aria-selected=true]`\n   */\n  _selected: \"&[aria-selected=true], &[data-selected]\",\n  /**\n   * Styles for CSS Selector `[hidden=true]`\n   */\n  _hidden: \"&[hidden], &[data-hidden]\",\n  /**\n   * Styles for CSS Selector `&:-webkit-autofill`\n   */\n  _autofill: \"&:-webkit-autofill\",\n  /**\n   * Styles for CSS Selector `&:nth-child(even)`\n   */\n  _even: \"&:nth-of-type(even)\",\n  /**\n   * Styles for CSS Selector `&:nth-child(odd)`\n   */\n  _odd: \"&:nth-of-type(odd)\",\n  /**\n   * Styles for CSS Selector `&:first-of-type`\n   */\n  _first: \"&:first-of-type\",\n  /**\n   * Styles for CSS Selector `&:last-of-type`\n   */\n  _last: \"&:last-of-type\",\n  /**\n   * Styles for CSS Selector `&:not(:first-of-type)`\n   */\n  _notFirst: \"&:not(:first-of-type)\",\n  /**\n   * Styles for CSS Selector `&:not(:last-of-type)`\n   */\n  _notLast: \"&:not(:last-of-type)\",\n  /**\n   * Styles for CSS Selector `&:visited`\n   */\n  _visited: \"&:visited\",\n  /**\n   * Used to style the active link in a navigation\n   * Styles for CSS Selector `&[aria-current=page]`\n   */\n  _activeLink: \"&[aria-current=page]\",\n  /**\n   * Styles to apply when the ARIA attribute `aria-checked` is `mixed`\n   * - CSS selector `&[aria-checked=mixed]`\n   */\n  _indeterminate:\n    \"&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]\",\n  /**\n   * Styles to apply when parent is hovered\n   */\n  _groupHover: toGroup(group.hover),\n  /**\n   * Styles to apply when parent is focused\n   */\n  _groupFocus: toGroup(group.focus),\n  /**\n   * Styles to apply when parent is active\n   */\n  _groupActive: toGroup(group.active),\n  /**\n   * Styles to apply when parent is disabled\n   */\n  _groupDisabled: toGroup(group.disabled),\n  /**\n   * Styles to apply when parent is invalid\n   */\n  _groupInvalid: toGroup(group.invalid),\n  /**\n   * Styles to apply when parent is checked\n   */\n  _groupChecked: toGroup(group.checked),\n  /**\n   * Styles for CSS Selector `&::placeholder`.\n   */\n  _placeholder: \"&::placeholder\",\n  /**\n   * Styles for CSS Selector `&:fullscreen`.\n   */\n  _fullScreen: \"&:fullscreen\",\n  /**\n   * Styles for CSS Selector `&::selection`\n   */\n  _selection: \"&::selection\",\n  /**\n   * Styles for CSS Selector `[dir=rtl] &`\n   * It is applied when any parent element has `dir=\"rtl\"`\n   */\n  _rtl: \"[dir=rtl] &\",\n}\n\nexport type Pseudos = typeof pseudoSelectors\n\nexport const pseudoPropNames = objectKeys(pseudoSelectors)\n"]},"metadata":{},"sourceType":"module"}