{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useButtonGroup } from \"./button-group\";\nexport var Button = /*#__PURE__*/forwardRef((props, ref) => {\n  var _styles$_focus;\n\n  var group = useButtonGroup();\n  var styles = useStyleConfig(\"Button\", _extends({}, group, props));\n\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    isLoading,\n    isActive,\n    isFullWidth,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type = \"button\",\n    spinner,\n    className,\n    as\n  } = _omitThemingProps,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"isDisabled\", \"isLoading\", \"isActive\", \"isFullWidth\", \"children\", \"leftIcon\", \"rightIcon\", \"loadingText\", \"iconSpacing\", \"type\", \"spinner\", \"className\", \"as\"]);\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n\n\n  var _focus = mergeWith({}, (_styles$_focus = styles == null ? void 0 : styles[\"_focus\"]) != null ? _styles$_focus : {}, {\n    zIndex: 1\n  });\n\n  var buttonStyles = _extends({\n    display: \"inline-flex\",\n    appearance: \"none\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    transition: \"all 250ms\",\n    userSelect: \"none\",\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    verticalAlign: \"middle\",\n    outline: \"none\",\n    width: isFullWidth ? \"100%\" : \"auto\"\n  }, styles, !!group && {\n    _focus\n  });\n\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({\n    disabled: isDisabled || isLoading,\n    ref: ref,\n    as: as,\n    type: as ? undefined : type,\n    \"data-active\": dataAttr(isActive),\n    \"data-loading\": dataAttr(isLoading),\n    __css: buttonStyles,\n    className: cx(\"chakra-button\", className)\n  }, rest), leftIcon && !isLoading && /*#__PURE__*/React.createElement(ButtonIcon, {\n    marginEnd: iconSpacing\n  }, leftIcon), isLoading && /*#__PURE__*/React.createElement(ButtonSpinner, {\n    __css: {\n      fontSize: \"1em\",\n      lineHeight: \"normal\"\n    },\n    spacing: iconSpacing,\n    label: loadingText\n  }, spinner), isLoading ? loadingText || /*#__PURE__*/React.createElement(chakra.span, {\n    opacity: 0\n  }, children) : children, rightIcon && !isLoading && /*#__PURE__*/React.createElement(ButtonIcon, {\n    marginStart: iconSpacing\n  }, rightIcon));\n});\n\nif (__DEV__) {\n  Button.displayName = \"Button\";\n}\n\nvar ButtonIcon = props => {\n  var {\n    children,\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"children\", \"className\"]);\n\n  var _children = /*#__PURE__*/React.isValidElement(children) ? /*#__PURE__*/React.cloneElement(children, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : children;\n\n  var _className = cx(\"chakra-button__icon\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({}, rest, {\n    className: _className\n  }), _children);\n};\n\nif (__DEV__) {\n  ButtonIcon.displayName = \"ButtonIcon\";\n}\n\nvar ButtonSpinner = props => {\n  var {\n    label,\n    spacing,\n    children = /*#__PURE__*/React.createElement(Spinner, {\n      color: \"currentColor\",\n      width: \"1em\",\n      height: \"1em\"\n    }),\n    className,\n    __css\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"label\", \"spacing\", \"children\", \"className\", \"__css\"]);\n\n  var _className = cx(\"chakra-button__spinner\", className);\n\n  var spinnerStyles = _extends({\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\",\n    marginEnd: label ? spacing : 0\n  }, __css);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: _className\n  }, rest, {\n    __css: spinnerStyles\n  }), children);\n};\n\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\";\n}","map":{"version":3,"sources":["../../src/button.tsx"],"names":["Button","forwardRef","group","useButtonGroup","styles","useStyleConfig","isDisabled","iconSpacing","type","as","rest","omitThemingProps","_focus","mergeWith","zIndex","buttonStyles","display","appearance","alignItems","justifyContent","transition","userSelect","position","whiteSpace","verticalAlign","outline","width","isFullWidth","dataAttr","cx","leftIcon","isLoading","fontSize","lineHeight","loadingText","rightIcon","ButtonIcon","props","className","_children","focusable","_className","ButtonSpinner","children","__css","spinnerStyles","label","marginEnd"],"mappings":"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","sourcesContent":["import { Spinner } from \"@chakra-ui/spinner\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useButtonGroup } from \"./button-group\"\n\nexport interface ButtonOptions {\n  /**\n   * If `true`, the button will show a spinner.\n   */\n  isLoading?: boolean\n  /**\n   * If `true`, the button will be styled in its active state.\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the button will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * The label to show in the button when `isLoading` is true\n   * If no text is passed, it only shows the spinner\n   */\n  loadingText?: string\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  isFullWidth?: boolean\n  /**\n   * The html button type to use.\n   */\n  type?: \"button\" | \"reset\" | \"submit\"\n  /**\n   * If added, the button will show an icon before the button's label.\n   * @type React.ReactElement\n   */\n  leftIcon?: React.ReactElement\n  /**\n   * If added, the button will show an icon after the button's label.\n   * @type React.ReactElement\n   */\n  rightIcon?: React.ReactElement\n  /**\n   * The space between the button icon and label.\n   * @type SystemProps[\"marginRight\"]\n   */\n  iconSpacing?: SystemProps[\"marginRight\"]\n  /**\n   * Replace the spinner component when `isLoading` is set to `true`\n   * @type React.ReactElement\n   */\n  spinner?: React.ReactElement\n}\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps {}\n\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    isFullWidth,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type = \"button\",\n    spinner,\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const _focus = mergeWith({}, styles?.[\"_focus\"] ?? {}, { zIndex: 1 })\n\n  const buttonStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n    appearance: \"none\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    transition: \"all 250ms\",\n    userSelect: \"none\",\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    verticalAlign: \"middle\",\n    outline: \"none\",\n    width: isFullWidth ? \"100%\" : \"auto\",\n    ...styles,\n    ...(!!group && { _focus }),\n  }\n\n  return (\n    <chakra.button\n      disabled={isDisabled || isLoading}\n      ref={ref}\n      as={as}\n      type={as ? undefined : type}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n    >\n      {leftIcon && !isLoading && (\n        <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>\n      )}\n      {isLoading && (\n        <ButtonSpinner\n          __css={{ fontSize: \"1em\", lineHeight: \"normal\" }}\n          spacing={iconSpacing}\n          label={loadingText}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n      {isLoading\n        ? loadingText || <chakra.span opacity={0}>{children}</chakra.span>\n        : children}\n      {rightIcon && !isLoading && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </chakra.button>\n  )\n})\n\nif (__DEV__) {\n  Button.displayName = \"Button\"\n}\n\nconst ButtonIcon: React.FC<HTMLChakraProps<\"span\">> = (props) => {\n  const { children, className, ...rest } = props\n\n  const _children = React.isValidElement(children)\n    ? React.cloneElement(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span {...rest} className={_className}>\n      {_children}\n    </chakra.span>\n  )\n}\n\nif (__DEV__) {\n  ButtonIcon.displayName = \"ButtonIcon\"\n}\n\ninterface ButtonSpinnerProps extends HTMLChakraProps<\"div\"> {\n  label?: string\n  /**\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n}\n\nconst ButtonSpinner: React.FC<ButtonSpinnerProps> = (props) => {\n  const {\n    label,\n    spacing,\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const spinnerStyles: SystemStyleObject = {\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\",\n    marginEnd: label ? spacing : 0,\n    ...__css,\n  }\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\"\n}\n"]},"metadata":{},"sourceType":"module"}