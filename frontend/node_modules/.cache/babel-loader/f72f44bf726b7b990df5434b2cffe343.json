{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useSlider } from \"./use-slider\";\nvar [SliderProvider, useSliderContext] = createContext({\n  name: \"SliderContext\",\n  errorMessage: \"useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <Slider />\"\n});\nexport { SliderProvider, useSliderContext };\n/**\n * The Slider is used to allow users to make selections from a range of values.\n * It provides context and functionality for all slider components\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#slider\n */\n\nexport var Slider = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Slider\", props);\n  var realProps = omitThemingProps(props);\n\n  var _useSlider = useSlider(realProps),\n      {\n    getInputProps,\n    getRootProps\n  } = _useSlider,\n      context = _objectWithoutPropertiesLoose(_useSlider, [\"getInputProps\", \"getRootProps\"]);\n\n  var rootProps = getRootProps();\n  var inputProps = getInputProps({}, ref);\n\n  var rootStyles = _extends({\n    display: \"inline-block\",\n    position: \"relative\",\n    cursor: \"pointer\"\n  }, styles.container);\n\n  return /*#__PURE__*/React.createElement(SliderProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({}, rootProps, {\n    className: \"chakra-slider\",\n    __css: rootStyles\n  }), props.children, /*#__PURE__*/React.createElement(\"input\", inputProps))));\n});\nSlider.defaultProps = {\n  orientation: \"horizontal\"\n};\n\nif (__DEV__) {\n  Slider.displayName = \"Slider\";\n}\n/**\n * Slider component that acts as the handle used to select predefined\n * values by dragging its handle along the track\n */\n\n\nexport var SliderThumb = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getThumbProps\n  } = useSliderContext();\n  var styles = useStyles();\n\n  var thumbStyles = _extends({\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    outline: 0\n  }, styles.thumb);\n\n  var thumbProps = getThumbProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, thumbProps, {\n    className: cx(\"chakra-slider__thumb\", props.className),\n    __css: thumbStyles\n  }));\n});\n\nif (__DEV__) {\n  SliderThumb.displayName = \"SliderThumb\";\n}\n\nexport var SliderTrack = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getTrackProps\n  } = useSliderContext();\n  var styles = useStyles();\n\n  var trackStyles = _extends({\n    overflow: \"hidden\"\n  }, styles.track);\n\n  var trackProps = getTrackProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, trackProps, {\n    className: cx(\"chakra-slider__track\", props.className),\n    __css: trackStyles\n  }));\n});\n\nif (__DEV__) {\n  SliderTrack.displayName = \"SliderTrack\";\n}\n\nexport var SliderFilledTrack = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getInnerTrackProps\n  } = useSliderContext();\n  var styles = useStyles();\n\n  var trackStyles = _extends({\n    width: \"inherit\",\n    height: \"inherit\"\n  }, styles.filledTrack);\n\n  var trackProps = getInnerTrackProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, trackProps, {\n    className: \"chakra-slider__filled-track\",\n    __css: trackStyles\n  }));\n});\n\nif (__DEV__) {\n  SliderFilledTrack.displayName = \"SliderFilledTrack\";\n}\n/**\n * SliderMark is used to provide names for specific Slider\n * values by defining labels or markers along the track.\n *\n * @see Docs https://chakra-ui.com/docs/components/slider\n */\n\n\nexport var SliderMark = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getMarkerProps\n  } = useSliderContext();\n  var markProps = getMarkerProps(props, ref);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, markProps, {\n    className: cx(\"chakra-slider__marker\", props.className)\n  }));\n});\n\nif (__DEV__) {\n  SliderMark.displayName = \"SliderMark\";\n}","map":{"version":3,"sources":["../../src/slider.tsx"],"names":["createContext","name","errorMessage","Slider","forwardRef","styles","useMultiStyleConfig","realProps","omitThemingProps","getRootProps","context","useSlider","rootProps","inputProps","getInputProps","rootStyles","display","position","cursor","props","orientation","SliderThumb","getThumbProps","useSliderContext","useStyles","thumbStyles","alignItems","justifyContent","outline","thumbProps","cx","SliderTrack","getTrackProps","trackStyles","overflow","trackProps","SliderFilledTrack","getInnerTrackProps","width","height","SliderMark","getMarkerProps","markProps"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useSlider, UseSliderProps, UseSliderReturn } from \"./use-slider\"\n\ninterface SliderContext\n  extends Omit<UseSliderReturn, \"getInputProps\" | \"getRootProps\"> {}\n\nconst [SliderProvider, useSliderContext] = createContext<SliderContext>({\n  name: \"SliderContext\",\n  errorMessage:\n    \"useSliderContext: `context` is undefined. Seems you forgot to wrap all slider components within <Slider />\",\n})\n\nexport { SliderProvider, useSliderContext }\n\ntype Omitted = \"size\" | \"defaultValue\" | \"onChange\"\nexport interface SliderProps\n  extends UseSliderProps,\n    ThemingProps,\n    Omit<HTMLChakraProps<\"div\">, Omitted> {}\n\n/**\n * The Slider is used to allow users to make selections from a range of values.\n * It provides context and functionality for all slider components\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#slider\n */\nexport const Slider = forwardRef<SliderProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Slider\", props)\n  const realProps = omitThemingProps(props)\n\n  const { getInputProps, getRootProps, ...context } = useSlider(realProps)\n\n  const rootProps = getRootProps()\n  const inputProps = getInputProps({}, ref)\n\n  const rootStyles: SystemStyleObject = {\n    display: \"inline-block\",\n    position: \"relative\",\n    cursor: \"pointer\",\n    ...styles.container,\n  }\n\n  return (\n    <SliderProvider value={context}>\n      <StylesProvider value={styles}>\n        <chakra.div {...rootProps} className=\"chakra-slider\" __css={rootStyles}>\n          {props.children}\n          <input {...inputProps} />\n        </chakra.div>\n      </StylesProvider>\n    </SliderProvider>\n  )\n})\n\nSlider.defaultProps = {\n  orientation: \"horizontal\",\n}\n\nif (__DEV__) {\n  Slider.displayName = \"Slider\"\n}\n\nexport interface SliderThumbProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Slider component that acts as the handle used to select predefined\n * values by dragging its handle along the track\n */\nexport const SliderThumb = forwardRef<SliderThumbProps, \"div\">((props, ref) => {\n  const { getThumbProps } = useSliderContext()\n\n  const styles = useStyles()\n\n  const thumbStyles: SystemStyleObject = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    outline: 0,\n    ...styles.thumb,\n  }\n\n  const thumbProps = getThumbProps(props, ref)\n\n  return (\n    <chakra.div\n      {...thumbProps}\n      className={cx(\"chakra-slider__thumb\", props.className)}\n      __css={thumbStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  SliderThumb.displayName = \"SliderThumb\"\n}\n\nexport interface SliderTrackProps extends HTMLChakraProps<\"div\"> {}\n\nexport const SliderTrack = forwardRef<SliderTrackProps, \"div\">((props, ref) => {\n  const { getTrackProps } = useSliderContext()\n\n  const styles = useStyles()\n  const trackStyles = {\n    overflow: \"hidden\",\n    ...styles.track,\n  }\n\n  const trackProps = getTrackProps(props, ref)\n\n  return (\n    <chakra.div\n      {...trackProps}\n      className={cx(\"chakra-slider__track\", props.className)}\n      __css={trackStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  SliderTrack.displayName = \"SliderTrack\"\n}\n\nexport interface SliderInnerTrackProps extends HTMLChakraProps<\"div\"> {}\n\nexport const SliderFilledTrack = forwardRef<SliderInnerTrackProps, \"div\">(\n  (props, ref) => {\n    const { getInnerTrackProps } = useSliderContext()\n\n    const styles = useStyles()\n    const trackStyles = {\n      width: \"inherit\",\n      height: \"inherit\",\n      ...styles.filledTrack,\n    }\n\n    const trackProps = getInnerTrackProps(props, ref)\n\n    return (\n      <chakra.div\n        {...trackProps}\n        className=\"chakra-slider__filled-track\"\n        __css={trackStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  SliderFilledTrack.displayName = \"SliderFilledTrack\"\n}\n\nexport interface SliderMarkProps extends HTMLChakraProps<\"div\"> {\n  value: number\n}\n\n/**\n * SliderMark is used to provide names for specific Slider\n * values by defining labels or markers along the track.\n *\n * @see Docs https://chakra-ui.com/docs/components/slider\n */\nexport const SliderMark = forwardRef<SliderMarkProps, \"div\">((props, ref) => {\n  const { getMarkerProps } = useSliderContext()\n  const markProps = getMarkerProps(props, ref)\n  return (\n    <chakra.div\n      {...markProps}\n      className={cx(\"chakra-slider__marker\", props.className)}\n    />\n  )\n})\n\nif (__DEV__) {\n  SliderMark.displayName = \"SliderMark\"\n}\n"]},"metadata":{},"sourceType":"module"}