[{"/home/swayne/Documents/reactprojects/spotifyAPI/my-app/src/pages/songPage.js":"1","/home/swayne/Documents/reactprojects/spotifyAPI/my-app/src/models/serviceGrid.js":"2","/home/swayne/Documents/reactprojects/spotifyAPI/my-app/src/models/songLinkForm.js":"3","/home/swayne/Documents/reactprojects/spotifyAPI/my-app/src/pages/formpage.js":"4","/home/swayne/Documents/reactprojects/spotifyAPI/my-app/src/index.js":"5"},{"size":4675,"mtime":1610451613187,"results":"6","hashOfConfig":"7"},{"size":1858,"mtime":1610450645845,"results":"8","hashOfConfig":"7"},{"size":4489,"mtime":1610453422414,"results":"9","hashOfConfig":"7"},{"size":469,"mtime":1610409055934,"results":"10","hashOfConfig":"7"},{"size":537,"mtime":1610450685405,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"1h1c1mu",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/swayne/Documents/reactprojects/spotifyAPI/my-app/src/pages/songPage.js",["24"],"import {React, useState, useEffect} from 'react' \nimport axios from 'axios'\nimport ServiceGrid from '../models/serviceGrid'\nimport { Box, \n  ChakraProvider, \n  Image, \n  Center,\n  Button, \n  Divider, \n  Skeleton, \n  Alert, \n  AlertIcon, \n  useDisclosure, \n  Fade} from \"@chakra-ui/react\"\nimport { LinkIcon } from '@chakra-ui/icons'\nimport { useParams } from 'react-router-dom'\nimport * as clipboard from \"clipboard-polyfill/text\";\n\nconst SongPage =(props) => {\n\n  const [imgLink, setImgLink] = useState('')\n  const [spotifyLink, setSpotifyLink] = useState('')\n  const [soundCloudLink, setSoundCloudLink] = useState('')\n  const [youtubeLink, setYoutubeLink] = useState('')\n  const [appleMusicLink, setAppleMusicLink] = useState('')\n  const [showSkeleton, setShowSkeleton] = useState(false)\n  const { id } = useParams();\n  const { isOpen, onToggle } = useDisclosure()\n\n  const SPOTIFYGRADIENT = \"linear(to-l, #1DB954,#1DB954)\"\n  const SCGRADIENT = \"linear(to-l, #ff9940,#ff7700)\"\n  const YOUTUBEGRADIENT = \"linear(to-l, #cc0000,#ff1a1a)\"\n  const APPLEMUSICGRADIENT = \"linear(to-l, #b166cc,#69a6f9)\"\n\n  const currentUrl= 'http://localhost:3000'\n  const url = 'http://localhost:5000/songs/'\n\n  function handler() {\n    clipboard.writeText(currentUrl+'/song/'+id).then(\n      () => {\n        onToggle()\n      },\n      () => {\n        console.log(\"error!\");\n      }\n    );\n  }\n\n  const getAllSongs = () => {\n    axios.get(url+id)\n    .then(function (response) {\n      console.log(\"values\")  \n      let values = response.data[0].values[0]\n      setImgLink(values.imglink)\n      setSpotifyLink(values.spotify)\n      setSoundCloudLink(values.soundCloud)\n      setYoutubeLink(values.youtube)\n      setAppleMusicLink(values.appleMusic)\n            // handle success\n    })\n    .catch(function (error) {\n        // handle error\n        console.log(error);\n    })\n  }\n\n  const showSkeletonOnLoad = () => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        setShowSkeleton(true)\n        resolve();\n      }, 1500);\n    });\n  }\n\n  useEffect(() => {\n    showSkeletonOnLoad()\n    getAllSongs()\n   }, [])\n\n\n  const display = () => {\n      return (\n        <ChakraProvider>\n          <Fade initialScale={0.9} in={isOpen}>\n            <Alert status=\"success\">\n              <AlertIcon />\n              Link copied!\n            </Alert>\n          </Fade>\n          <Image style = {{\n              display: \"flex\",\n              position: \"absolute\", size: \"cover\",\n              filter: \"blur(22px)\", \n              overflow: \"hidden\",\n              width: '100vw',\n              height: '100vh' }}\n          src = {imgLink}>\n          </Image>\n          <Box\n            style={{\n            position: 'absolute', left: '50%',\n            transform: 'translate(-50%)'\n            }}\n            m = {2} \n            p = \"10px\"  \n            rounded = \"20px\" \n            boxShadow = 'lg'\n            border = \"1px\" \n            borderColor = \"gray.200\" \n            w={[250, 300, 350, 380]}\n            bg = 'white'\n            >\n              <Skeleton isLoaded = {showSkeleton} rounded = '10px'>\n                <Image rounded = \"10px\" w = '100%' src = {imgLink}></Image>\n              </Skeleton>\n              <Divider mt = \"20px\"/>\n              {spotifyLink === undefined ? '' :\n                <ServiceGrid \n                name = \"Spotify\" \n                bgGradient = {SPOTIFYGRADIENT}\n                serviceLink = {spotifyLink}>\n                </ServiceGrid>\n              }\n              {soundCloudLink === undefined ? '' : \n                <ServiceGrid \n                name = \"SoundCloud\" \n                bgGradient = {SCGRADIENT}\n                serviceLink = {soundCloudLink}>\n                </ServiceGrid>\n              }\n              {youtubeLink === undefined ? '' : \n                <ServiceGrid \n                name = \"Youtube\" \n                bgGradient = \n                {YOUTUBEGRADIENT}\n                serviceLink = {youtubeLink}>\n                </ServiceGrid>\n              }\n              {appleMusicLink === undefined ? '' :\n                <ServiceGrid \n                name = \"Apple Music\" \n                bgGradient = {APPLEMUSICGRADIENT}\n                serviceLink = {appleMusicLink}>\n                </ServiceGrid>}\n              <Center>\n              <Skeleton isLoaded = {showSkeleton} rounded = '10px'>\n                <Button onClick = {handler} mt = {8}>Share! &nbsp;\n                  <LinkIcon></LinkIcon>\n                </Button>\n                </Skeleton>\n              </Center>\n          </Box>\n          </ChakraProvider> \n      );\n  }\n\n  return(\n    <>\n    {display(props)}\n    </>\n  )\n}\n\nexport default SongPage;",["25","26"],"/home/swayne/Documents/reactprojects/spotifyAPI/my-app/src/models/serviceGrid.js",[],"/home/swayne/Documents/reactprojects/spotifyAPI/my-app/src/models/songLinkForm.js",[],"/home/swayne/Documents/reactprojects/spotifyAPI/my-app/src/pages/formpage.js",[],"/home/swayne/Documents/reactprojects/spotifyAPI/my-app/src/index.js",["27","28"],{"ruleId":"29","severity":1,"message":"30","line":79,"column":7,"nodeType":"31","endLine":79,"endColumn":9,"suggestions":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":13,"column":10,"nodeType":"39","messageId":"40","endLine":13,"endColumn":13},{"ruleId":"37","severity":1,"message":"41","line":15,"column":9,"nodeType":"39","messageId":"40","endLine":15,"endColumn":11},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllSongs'. Either include it or remove the dependency array.","ArrayExpression",["42"],"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'id' is assigned a value but never used.",{"desc":"45","fix":"46"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [getAllSongs]",{"range":"47","text":"48"},[2103,2105],"[getAllSongs]"]